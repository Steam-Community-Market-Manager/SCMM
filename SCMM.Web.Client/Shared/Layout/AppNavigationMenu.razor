@inject IDialogService Dialogs
@inject AppState State

<MudNavMenu Color="Color.Primary" Bordered="true" Class="flex-grow-1">
    
    @if (!String.IsNullOrEmpty(State.Profile?.SteamId))
    {
        <MudNavLink Href="@($"/inventory/{State.Profile.SteamId}")" Match="NavLinkMatch.All" Disabled="@State.IsPrerendering">
            <div class="d-flex align-center ml-n4">
                <MudAvatar Color="@MudBlazor.Color.Secondary" Variant="@MudBlazor.Variant.Outlined" Size="@MudBlazor.Size.Medium" Style="height:2rem; width:2rem;">
                    <MudImage Src="@State.Profile.AvatarUrl"></MudImage>
                </MudAvatar>
                <span class="px-3 no-wrap">My Inventory</span>
            </div>
        </MudNavLink>
    }
    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemInventory) == true)
    {
        <MudNavLink Href="/inventory" Icon="fas fa-fw fa-trophy" Match="NavLinkMatch.All" Disabled="@State.IsPrerendering">
            <span class="no-wrap">Inventory Leaderboard</span>
        </MudNavLink>
    }
    
    <MudDivider />

    <MudNavLink Href="/items" Icon="fas fa-fw fa-tshirt" Disabled="@State.IsPrerendering">
        <span class="no-wrap">Items</span>
    </MudNavLink>

    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemStore) == true)
    {
        <MudNavLink Href="/store" Icon="fas fa-fw fa-shopping-cart" Disabled="@State.IsPrerendering">
            <span class="no-wrap">Item Stores</span>
        </MudNavLink>
    }
    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemWorkshop) == true)
    {
        <MudNavLink Href="/item/workshop" Icon="fas fa-fw fa-compass-drafting" Disabled="@State.IsPrerendering">
            <span class="no-wrap">Item Workshop</span>
        </MudNavLink>
    }
    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemDefinitions) == true)
    {
        <MudNavLink Href="/item/definitionArchives" Icon="fas fa-fw fa-dolly" Disabled="@State.IsPrerendering">
                <span class="no-wrap">Item Definition Archives</span>
        </MudNavLink>
    }

    <MudDivider />
    
    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarket) == true)
    {
        <MudNavLink Href="/market/deals" Icon="fas fa-fw fa-search-dollar" Disabled="@State.IsPrerendering">
            <span class="no-wrap">Market Deals</span>
        </MudNavLink>
    }
    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarket) == true)
    {
        <MudNavLink Href="/market/tracker" Icon="fas fa-fw fa-magnifying-glass-chart" Disabled="true" title="Coming soon...">
            <span class="no-wrap">Market Item Tracker</span>
        </MudNavLink>
    }
    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketActivityTracking) == true)
    {
        <MudNavLink Href="/market/activity" Icon="fas fa-fw fa-exchange-alt" Disabled="@State.IsPrerendering">
            <span class="no-wrap">Market Item Activity</span>
        </MudNavLink>
    }

    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketPriceTracking) == true ||
         State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketActivityTracking) == true)
    {
        <MudDivider />
    }

    <MudNavLink Href="/stats" Icon="fas fa-fw fa-chart-pie" Disabled="@State.IsPrerendering">
        <span class="no-wrap">Statistics</span>
    </MudNavLink>

    <MudDivider />
    
    <MudNavLink Href="/help" Icon="fas fa-fw fa-question" Disabled="@State.IsPrerendering">
        <span class="no-wrap">Help Me</span>
    </MudNavLink>
    
    @if (State.SystemStatus != null) 
    {
        var systemStatus = State.SystemStatus.Status;

        <MudDivider />
        <MudNavLink Href="/system" Disabled="@State.IsPrerendering" title="View the system status details"
                    Icon="@(systemStatus == SystemStatusSeverity.Normal ? "fas fa-fw fa-heart-circle-check" : (systemStatus == SystemStatusSeverity.Degraded) ? "fas fa-fw fa-heart-circle-exclamation" : "fas fa-fw fa-heart-circle-xmark")"
                    IconColor="@(systemStatus == SystemStatusSeverity.Normal ? Color.Success : (systemStatus == SystemStatusSeverity.Degraded) ? Color.Warning : Color.Error)">
            <MudText Typo="Typo.inherit" Class="no-wrap"
                     Color="@(systemStatus == SystemStatusSeverity.Normal ? Color.Success : (systemStatus == SystemStatusSeverity.Degraded) ? Color.Warning : Color.Error)">
                @switch(systemStatus)
                {
                    case SystemStatusSeverity.Normal:
                        <span class="no-wrap">Services are normal</span>
                        break;
                    case SystemStatusSeverity.Degraded:
                        <span class="no-wrap">Services are degraded</span>
                        break;
                    case SystemStatusSeverity.Critical:
                        <span class="no-wrap">Services are critical</span>
                        break;
                }
            </MudText>
        </MudNavLink>

    }

</MudNavMenu>

@code {
    
    private void ShowDonationDialog()
    {
        Dialogs.Show<DonateDialog>();
    }

}
