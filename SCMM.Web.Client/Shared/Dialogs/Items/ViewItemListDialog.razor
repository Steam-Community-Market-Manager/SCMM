@using SCMM.Web.Client.Shared.Components.Items
@using SCMM.Web.Data.Models.UI.Item
@inherits ResponsiveDialog
@inject ILogger<ViewItemListDialog> Logger
@inject ISnackbar Snackbar
@inject PinnedActionManager PinnedActionManager
@inject HttpClient Http
@inject DocumentManager Document
@inject AppState State

<MudDialog>
    <TitleContent>
        <MudGrid>
            <MudItem xs="12" Class="@($"d-flex flex-wrap {(IsMediaSize(Breakpoint.MdAndUp) ? "pr-12" : null)}")">
                <MudText Typo="MudBlazor.Typo.h6" Class="no-wrap">
                    @ListName
                    @if(List?.Items?.Any() == true)
                    {
                        <span> (@List.Items.Length) </span>
                    }
                </MudText>
                <MudSpacer />
                @if (List != null && PinnedAction != null)
                {
                    <MudToggleIconButton Toggled="IsActionPinned" ToggledChanged="TogglePinnedAction"
                                         Title="Bookmark this list" ToggledTitle="Remove this bookmark"
                                         Icon="far fa-bookmark" ToggledIcon="fas fa-bookmark"
                                         Size="MudBlazor.Size.Small" ToggledSize="MudBlazor.Size.Small"
                                         Class="ma-1 ml-4 mr-0" DisableRipple="true" Disabled="@State.IsPrerendering" />
                }
                @if (List?.Items?.Any() == true)
                {
                    <MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                             Dense="true" Class="@($"hover-darken mx-4 {(IsMediaSize(Breakpoint.SmAndDown) ? "mr-8" : null)}")" title="Change sort order">
                        <ActivatorContent>
                            <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Secondary">
                                <i class="fas fa-fw fa-sort-alpha-down" />
                            </MudText>
                        </ActivatorContent>
                        <ChildContent>
                            @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.Age))
                            {
                                <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.TimeAccepted), Data.Models.SortDirection.Descending))">Newest</MudMenuItem>
                                <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.TimeAccepted), Data.Models.SortDirection.Ascending))">Oldest</MudMenuItem>
                            }
                            <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.BuyNowPrice), Data.Models.SortDirection.Ascending))">Lowest Price</MudMenuItem>
                            <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.BuyNowPrice), Data.Models.SortDirection.Descending))">Highest Price</MudMenuItem>
                            <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.PriceMovement), Data.Models.SortDirection.Descending))">Highest Profit</MudMenuItem>
                            <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.PriceMovement), Data.Models.SortDirection.Ascending))">Highest Loss</MudMenuItem>
                            @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.Subscriptions))
                            {
                                <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.Subscriptions), Data.Models.SortDirection.Ascending))">Lowest Subscribers</MudMenuItem>
                                <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.Subscriptions), Data.Models.SortDirection.Descending))">Highest Subscribers</MudMenuItem>
                            }
                            @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.EstimatedTotalSupply))
                            {
                                <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.SupplyTotalEstimated), Data.Models.SortDirection.Ascending))">Lowest Minimum Supply</MudMenuItem>
                                <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ItemDescriptionWithPriceDTO.SupplyTotalEstimated), Data.Models.SortDirection.Descending))">Highest Minimum Supply</MudMenuItem>
                            }
                        </ChildContent>
                    </MudMenu>
                    <MudTextField T="string" ValueChanged="@OnSearch" DebounceInterval="500" Placeholder="Filter items" FullWidth="@(IsMediaSize(Breakpoint.SmAndDown))" Class="flex-grow-0 mt-n4"
                                  Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" />
                }
			</MudItem>
		</MudGrid>
    </TitleContent>
    <DialogContent>
        @if (List?.Items == null)
        {
            <Loading Message="Loading item list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
        } 
        else
        {
            <div class="pb-4">
                <MudGrid Spacing="0">
                    @if (!String.IsNullOrEmpty(DemandUrl))
                    {
                        <MudItem xs="12">
                            <MudGrid Spacing="1" Class="mb-4">
                                <MudItem xs="12" md="6" lg="4" xl="3">
                                    <MudTooltip Text="The median (middle) price of all items in this list over the last 24hrs.">
                                        <dl>
                                            <dt>
                                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
                                                    <span><i class="fas fa-fw fa-piggy-bank"></i> Median Price: </span>
                                                </MudText>
                                            </dt>
                                            <dd>
                                                @if (Demand != null)
                                                {
                                                    <MudText Typo="Typo.subtitle2" Color="Color.Default">
                                                        <span>@State.Currency.ToPriceString(Demand.Last24hrMedianPrice)</span>
                                                        <span class="@(Demand.Last168hrMedianPriceDelta >= 0 ? "mud-success-text" : "mud-error-text")"><i class="@($"fas fa-fw {(Demand.Last168hrMedianPriceDelta >= 0 ? "fa-arrow-up" : "fa-arrow-down")}")"></i> @State.Currency.ToPriceString(Demand.Last168hrMedianPriceDelta, dense: true) <span class="mud-secondary-text">from 7 days ago</span></span>
                                                    </MudText>
                                                }
                                                else
                                                {
                                                    <MudSkeleton SkeletonType="SkeletonType.Text" />
                                                }
                                            </dd>
                                        </dl>
                                    </MudTooltip>
                                </MudItem>
                                <MudItem xs="12" md="6" lg="4" xl="3">
                                    <MudTooltip Text="The median (middle) difference between the last 24hr market price and original store price for all items in this list. If this number is positive, it means the majority of items in this list will (eventually) generate a profit.">
                                        <dl>
                                            <dt>
                                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
                                                    <span><i class="fas fa-fw fa-chart-line"></i> Median Store Price Movement: </span>
                                                </MudText>
                                            </dt>
                                            <dd>
                                                @if (Demand != null)
                                                {
                                                    <MudText Typo="Typo.subtitle2" Color="@(Demand.Last24hrMedianMovementFromStorePrice >= 0 ? Color.Success : Color.Error)">
                                                        <span><i class="@($"fas fa-fw {(Demand.Last24hrMedianMovementFromStorePrice >= 0 ? "fa-arrow-up" : "fa-arrow-down")}")"></i> @State.Currency.ToPriceString(Demand.Last24hrMedianMovementFromStorePrice) <span class="mud-secondary-text"> from original store price</span></span>
                                                    </MudText>
                                                }
                                                else
                                                {
                                                    <MudSkeleton SkeletonType="SkeletonType.Text" />
                                                }
                                            </dd>
                                        </dl>
                                    </MudTooltip>
                                </MudItem>
                                <MudItem xs="12" md="6" lg="4" xl="3">
                                    <MudTooltip Text="The number of listing on the Steam Community Market for all items in this list">
                                        <dl>
                                            <dt>
                                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
                                                    <span><i class="fas fa-fw fa-truck-ramp-box"></i> Market Supply: </span>
                                                </MudText>
                                            </dt>
                                            <dd>
                                                @if (Demand != null)
                                                {
                                                    <MudText Typo="Typo.subtitle2" Color="Color.Default">
                                                        <span>@(Demand.TotalMarketSupply.ToQuantityString()) <span class="mud-secondary-text">currently listed for sale, median is</span> @(Demand.MedianMarketSupply.ToQuantityString())</span>
                                                    </MudText>
                                                }
                                                else
                                                {
                                                    <MudSkeleton SkeletonType="SkeletonType.Text" />
                                                }
                                            </dd>
                                        </dl>
                                    </MudTooltip>
                                </MudItem>
                                <MudItem xs="12" md="6" lg="4" xl="3">
                                    <MudTooltip Text="The number of purchases from the Steam Community Market for all items in this list">
                                        <dl>
                                            <dt>
                                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
                                                    <span><i class="fas fa-fw fa-people-carry"></i> Market Demand: </span>
                                                </MudText>
                                            </dt>
                                            <dd>
                                                @if (Demand != null)
                                                {
                                                    <MudText Typo="Typo.subtitle2" Color="Color.Default">
                                                        <span>@(Demand.TotalMarketDemand.ToQuantityString()) <span class="mud-secondary-text">sold in last 24hrs, median is</span> @(Demand.MedianMarketDemand.ToQuantityString())</span>
                                                    </MudText>
                                                }
                                                else
                                                {
                                                    <MudSkeleton SkeletonType="SkeletonType.Text" />
                                                }
                                            </dd>
                                        </dl>
                                    </MudTooltip>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    }
                    @{
                        var acceptedYear = 0;
                    }
                    @foreach (var item in ListFilteredAndSorted)
                    {
                        @if (SortBy == nameof(ItemDescriptionWithPriceDTO.TimeAccepted) && item.TimeAccepted?.Year != acceptedYear)
                        {
                            acceptedYear = item.TimeAccepted.Value.Year;
                            <MudItem xs="12" Class="my-4">
                                <MudText Typo="Typo.h6" Color="Color.Default">
                                    <span>Accepted in @item.TimeAccepted?.Year <small class="mud-secondary-text">(@ListFilteredAndSorted.Count(x => x.TimeAccepted?.Year == item.TimeAccepted?.Year))</small></span>
                                </MudText>
                                <MudDivider />
                            </MudItem>
                        }
                        <MudItem xs="6" sm="4" md="3" lg="2" xl="2">
                            <ItemDescriptionSummary Item="@item" Highlighted="@(item.Id == HighlightedItemId)" />
                        </MudItem>
                    }
                </MudGrid>
            </div>
        }
    </DialogContent>
</MudDialog>

@code {

    [Parameter]
    public string ListName { get; set; }

    [Parameter]
    public string ListUrl { get; set; }

    [Parameter]
    public string DemandUrl { get; set; }

    [Parameter]
    public ulong HighlightedItemId { get; set; }

    [Parameter]
    public string SortBy { get; set; } = nameof(ItemDescriptionWithPriceDTO.TimeAccepted);

    [Parameter]
    public Data.Models.SortDirection SortDirection { get; set; } = Data.Models.SortDirection.Descending;

    private PaginatedResult<ItemDescriptionWithPriceDTO> List { get; set; }

    private ItemDescriptionWithPriceDTO[] ListFilteredAndSorted { get; set; }

    private ItemGroupDemandDTO Demand { get; set; }

    private string Filter { get; set; }
    
    private PinnedActionManager.Action PinnedAction { get; set; }

    private bool IsActionPinned { get; set; }

    protected override void OnConfigure(ResponsiveDialogOptions options)
    {
        options.FullscreenBreakpoint = MudBlazor.Breakpoint.Sm;
        options.MaxWidth = MudBlazor.MaxWidth.Large;
        options.FullWidth = true; // force item images to scale equally
        options.CloseButton = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            List = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemDescriptionWithPriceDTO>>(ListUrl);
            ListFilteredAndSorted = GetFilteredAndSortedItems(List.Items).ToArray();
            PinnedAction = new PinnedActionManager.Action()
            {
                Type = "List",
                Url = ListUrl,
                IconUrl = List?.Items?.FirstOrDefault()?.IconUrl,
                Description = ListName,
            };

            IsActionPinned = await PinnedActionManager.IsPinned(PinnedAction);

            Dialog.StateHasChanged();
            StateHasChanged();

            if (HighlightedItemId > 0)
            {
                Document.ScrollElementIntoView("highlighted", TimeSpan.FromSeconds(1));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item list");
            Snackbar.Add($"Unable to load item list. {ex.Message}", MudBlazor.Severity.Error);
        }

        try
        {
            if (!String.IsNullOrEmpty(DemandUrl))
            {
                Demand = await Http.GetFromJsonWithDefaultsAsync<ItemGroupDemandDTO>(DemandUrl);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item demand");
            Snackbar.Add($"Unable to load item demand. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private void OnSearch(string text)
    {
        Filter = text;
        ListFilteredAndSorted = GetFilteredAndSortedItems(List.Items).ToArray();
        StateHasChanged();
    }

    private void SetSortOrder(string sortBy, Data.Models.SortDirection sortDirection)
    {
        SortBy = sortBy;
        SortDirection = sortDirection;
        ListFilteredAndSorted = GetFilteredAndSortedItems(List.Items).ToArray();
        StateHasChanged();
        
        if (HighlightedItemId > 0)
        {
            Document.ScrollElementIntoView("highlighted", TimeSpan.FromSeconds(1));
        }
    }

    private IEnumerable<ItemDescriptionWithPriceDTO> GetFilteredAndSortedItems(IEnumerable<ItemDescriptionWithPriceDTO> items)
    {
        if (!String.IsNullOrEmpty(Filter))
        {
            items = items.FilterBy(Filter);
        }
        if (!String.IsNullOrEmpty(SortBy))
        {
            items = items.AsQueryable().SortBy(SortBy, SortDirection);
        }

        return items;
    }
    
    private async Task TogglePinnedAction(bool pinned)
    {
        IsActionPinned = !pinned;
        if (pinned)
        {
            await PinnedActionManager.PinAction(PinnedAction);
        }
        else
        {
            await PinnedActionManager.UnpinAction(PinnedAction);
        }
    }

}
