@using SCMM.Web.Client.Shared.Components.Items
@using SCMM.Web.Data.Models.UI.Item
@inherits ResponsiveDialog
@inject ILogger<ViewItemDetailsDialog> Logger
@inject ISnackbar Snackbar
@inject PinnedActionManager PinnedActionManager
@inject HttpClient Http
@inject AppState State

<MudDialog>
    <TitleContent>
        <div class="d-flex align-start mr-4">
            <MudText Typo="MudBlazor.Typo.h6">@ItemName Details</MudText>
            <MudSpacer />
            @if (Item != null && PinnedAction != null)
            {
                <MudToggleIconButton Toggled="IsActionPinned" ToggledChanged="TogglePinnedAction"
                                     Title="Bookmark this item" ToggledTitle="Remove this bookmark"
                                     Icon="far fa-bookmark" ToggledIcon="fas fa-bookmark"
                                     Size="MudBlazor.Size.Small" ToggledSize="MudBlazor.Size.Small"
                                     Class="ma-1 mx-4" DisableRipple="true" Disabled="@State.IsPrerendering" />
            }
        </div>
    </TitleContent>
    <DialogContent>
        @if (Item == null)
        {
            <Loading Message="Loading item..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
        } 
        else
        {
            <div class="mud-paper-inverted">
                <ItemDescriptionDetails Item="@Item" />
            </div>
        }
    </DialogContent>
</MudDialog>

@code {

    [Parameter]
    public string ItemName { get; set; }
    
    [Parameter]
    public string ItemUrl { get; set; }

    private ItemDetailedDTO Item { get; set; }

    private PinnedActionManager.Action PinnedAction { get; set; }

    private bool IsActionPinned { get; set; }

    protected override void OnConfigure(ResponsiveDialogOptions options)
    {
        options.FullscreenBreakpoint = MudBlazor.Breakpoint.Md;
        options.MaxWidth = MudBlazor.MaxWidth.ExtraLarge;
        options.FullWidth = true;
        options.CloseButton = true;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            Item = await Http.GetFromJsonWithDefaultsAsync<ItemDetailedDTO>(ItemUrl);
            PinnedAction = new PinnedActionManager.Action()
            {
                Type = "Item",
                Url = ItemUrl,
                IconUrl = Item?.IconUrl,
                Description = ItemName,
            };

            IsActionPinned = await PinnedActionManager.IsPinned(PinnedAction);

            Dialog.StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading the item details");
            Snackbar.Add($"Unable to load item details. {ex.Message}", MudBlazor.Severity.Error);
        }
    }

    private async Task TogglePinnedAction(bool pinned)
    {
        IsActionPinned = !pinned;
        if (pinned)
        {
            await PinnedActionManager.PinAction(PinnedAction);
        }
        else
        {
            await PinnedActionManager.UnpinAction(PinnedAction);
        }
    }

}
