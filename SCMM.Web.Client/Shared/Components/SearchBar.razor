@inherits PersistentComponent
@using SCMM.Web.Client.Shared.Dialogs.Items
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Search
@inject ILogger<SearchBar> Logger
@inject IDialogService Dialogs
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject PinnedActionManager PinnedActionManager
@inject AppState State
@inject HttpClient Http

<div class="px-4" style="min-width: 350px; max-width: 250px">
    <MudAutocomplete T="SearchResultDTO" Value="@Search" SearchFunc="@SearchAsync" ValueChanged="@((x) => OnActionSelected(x.Type, x.Url, x.Description))" ToStringFunc="@(x => x?.Description)" ResetValueOnEmptyText="true"
                     Placeholder="Search the website for..." DebounceInterval="500" FullWidth="false" Dense="true" Disabled="State.IsPrerendering"
                     Variant="MudBlazor.Variant.Text" AdornmentIcon="fas fa-fw fa-search ml-2" IconSize="MudBlazor.Size.Small" Class="mud-input-no-frills ma-0">
        <ItemTemplate Context="item">
            <div class="d-flex algin-center">
                <img src="@item.IconUrl" class="mr-2" style="width:2em; height:2em" />
                <MudText Class="no-wrap my-1">@item.Description</MudText>
                <MudChip Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Secondary" Size="MudBlazor.Size.Small" Class="no-wrap ml-2">@item.Type</MudChip>
            </div>
        </ItemTemplate>
        <ItemSelectedTemplate Context="item">
            <div class="d-flex algin-center">
                <img src="@item.IconUrl" class="mr-2" style="width:2em; height:2em" />
                <MudText Class="no-wrap my-1">@item.Description</MudText>
                <MudChip Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Secondary" Size="MudBlazor.Size.Small" Class="no-wrap ml-2">@item.Type</MudChip>
            </div>
        </ItemSelectedTemplate>
    </MudAutocomplete>
</div>
@if (PinnedActions?.Any() == true)
{
    <MudContainer Class="d-flex align-center justify-start scroll-x scrollbar-hidden pa-0">
        @foreach (var pinnedActions in PinnedActions)
        {
            <div class="d-flex algin-center hover-darken pa-2" onclick="@(() => OnActionSelected(pinnedActions.Type, pinnedActions.Url, pinnedActions.Description))">
                <img src="@pinnedActions.IconUrl" class="mr-2" style="width:2em; height:2em" />
                <MudText Class="no-wrap my-1">@pinnedActions.Description</MudText>
            </div>
        }
    </MudContainer>
}

@code {

    private SearchResultDTO Search;

    private IEnumerable<PinnedActionManager.Action> PinnedActions { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        PinnedActionManager.PinnedActionsChanged += (actions) => {
            PinnedActions = actions;
            StateHasChanged();
        };
    }

    protected override async Task OnLoadStateAsync()
    {
        PinnedActions = await RestoreFromStateOrLoad(nameof(PinnedActions), 
            () => PinnedActionManager.ListPinnedActions()
        );
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(PinnedActions), PinnedActions);
        return Task.CompletedTask;
    }

    private async Task<IEnumerable<SearchResultDTO>> SearchAsync(string value)
    {
        try
        {
            if (!String.IsNullOrEmpty(value))
            {
                return await Http.GetFromJsonWithDefaultsAsync<SearchResultDTO[]>($"api/search?query={value}");
            }
            else
            {
                return Enumerable.Empty<SearchResultDTO>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error searching");
            throw;
        }
    }

    private async Task OnActionSelected(string type, string url, string description)
    {
        Search = null;
        switch (type)
        {
            case "List":
                Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
                {
                    ["ListName"] = description,
                    ["ListUrl"] = url,
                    ["SortBy"] = nameof(ItemDescriptionWithPriceDTO.TimeAccepted),
                    ["SortDirection"] = MudBlazor.SortDirection.Descending
                });
                break;

            case "Type":
                Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
                {
                    ["ListName"] = $"All {description.Pluralise()}",
                    ["ListUrl"] = url,
                    ["DemandUrl"] = $"api/item/type/{description}/demand",
                    ["SortBy"] = nameof(ItemDescriptionWithPriceDTO.TimeAccepted),
                    ["SortDirection"] = MudBlazor.SortDirection.Descending
                });
                break;

            case "Collection":
                Dialogs.Show<ViewItemCollectionDialog>(null, parameters: new DialogParameters()
                {
                    ["CollectionName"] = $"{description} Collection",
                    ["CollectionUrl"] = url
                });
                break;

            case "Item":
                Dialogs.Show<ViewItemDetailsDialog>(null, parameters: new DialogParameters()
                {
                    ["ItemName"] = description,
                    ["ItemUrl"] = url
                });
                break;

            case "Store":
                NavigationManager.NavigateTo(url);
                break;
        }
    }

}
