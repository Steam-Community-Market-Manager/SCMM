@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Profile.Inventory
@page "/inventory/{SteamId}"
@page "/steam/inventory/{SteamId}"
@inherits PersistentComponent
@inject ILogger<InventoryPage> Logger
@inject ISnackbar Snackbar
@inject IDialogService Dialogs
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="@(Profile != null ? $"{State?.App?.Name} Inventory - {Profile.Name}" : "Inventory")"
               Description="@(InventoryTotals != null ? $"Inventory contains {InventoryTotals.Items.ToQuantityString()} item(s) with a total market value of {State.Currency?.ToPriceString(InventoryTotals.MarketValue)}." : null)"
               ImageUrl="@Profile?.AvatarUrl">
    <MudGrid Spacing="2">
        @if (LoadingError == null)
        {
            <InventoryHeaderPanel Profile="@Profile" InventoryTotal="@InventoryTotals" />
        }
        @if (Profile != null && InventoryTotals != null)
        {
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                <MudItem xs="12" sm="6" lg="4" xl="2" Class="d-flex flex-row justify-start align-center">
                    <MudTextField T="string" Value="@Filter" ValueChanged="@OnSearch" DebounceInterval="500" Placeholder="Filter items..." FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering"
                                  Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" Variant="MudBlazor.Variant.Outlined" />
                </MudItem>
		    </MudHidden>
        }
        <MudItem xs="12">
            @if (Profile == null || InventoryTotals == null)
            {
                @if (LoadingError != null)
                {
                    if (LoadingErrorStatusCode == HttpStatusCode.NotFound && Profile == null)
                    {
                        <Alert Title="Steam profile not found" SubTitle="Check that the SteamID is correct, then try again." />
                    }
                    else if (LoadingErrorStatusCode == HttpStatusCode.NotFound && InventoryTotals == null)
                    {
                        <Alert Title="Steam inventory is currently private" SubTitle="We are unable to show you the contents of this inventory." Severity="Severity.Warning" />
                    }
                    else
                    {
                        <Alert Exception="@LoadingError" />
                    }
                }
                else
                {
                    <Loading Message="@LoadingMessage" />
                }
            }
            else
            {
                <MudTabs Elevation="0" ActivePanelIndex="PanelIndex" ActivePanelIndexChanged="OnSelectedPanelChanged" Class="mud-tabs-transparent">
                    <ChildContent>
                        <MudTabPanel Icon="fas fa-fw fa-th mr-2" Text="Inventory" Disabled="State.IsPrerendering">
                            <MudPaper Outlined="true">
                                <InventoryItemsPanel SteamId="@Profile?.SteamId" Filter="@Filter" SortBy="@SortBy" SortDirection="@SortDirection" />
                            </MudPaper>
                        </MudTabPanel>
                        <MudTabPanel Icon="fas fa-fw fa-tshirt mr-4" Text="Collections" Disabled="State.IsPrerendering">
                            <MudPaper Outlined="true">
                                <InventoryCollectionsPanel SteamId="@Profile?.SteamId" Filter="@Filter" />
                            </MudPaper>
                        </MudTabPanel>
                        <MudTabPanel Icon="fas fa-fw fa-balance-scale-left mr-4" Text="Market Performance" Disabled="State.IsPrerendering">
                            <MudPaper Outlined="true">
                                <InventoryMarketPanel SteamId="@Profile?.SteamId" Filter="@Filter" InventoryTotals="@InventoryTotals" />
                            </MudPaper>
                        </MudTabPanel>
                        @if (State.Is(Profile?.SteamId) || State.IsInRole(Roles.Administrator))
                        {
                            <MudTabPanel Icon="fas fa-fw fa-hand-holding-usd mr-3" Text="Investment Performance" Disabled="State.IsPrerendering">
                                <MudPaper Outlined="true">
                                    <InventoryInvestmentPanel SteamId="@Profile?.SteamId" Filter="@Filter" />
                                </MudPaper>
                            </MudTabPanel>
                        }
					</ChildContent>
	                <Header>
                        <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                            <MudTextField T="string" Value="@Filter" ValueChanged="@OnSearch" DebounceInterval="500" Placeholder="Filter items..." FullWidth="true" Class="mud-input-full-height ma-0"
                                            Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" Disabled="State.IsPrerendering" />
                            @if (PanelIndex == 0)
                            {
                                <MudMenu Icon="fas fa-fw fa-sort-alpha-down" ListClass="ma-0 pa-0" Disabled="State.IsPrerendering">
                                    <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.Quantity), Data.Models.SortDirection.Ascending))">Lowest Quantity</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.Quantity), Data.Models.SortDirection.Descending))">Highest Quantity</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.BuyNowPrice), Data.Models.SortDirection.Ascending))">Lowest Unit Price</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.BuyNowPrice), Data.Models.SortDirection.Descending))">Highest Unit Price</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.TotalBuyNowPrice), Data.Models.SortDirection.Ascending))">Lowest Stacked Price</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.TotalBuyNowPrice), Data.Models.SortDirection.Descending))">Highest Stacked Price</MudMenuItem>
                                    @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.Subscriptions))
                                    {
                                        <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.Subscriptions), Data.Models.SortDirection.Ascending))">Lowest Subscribers</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.Subscriptions), Data.Models.SortDirection.Descending))">Highest Subscribers</MudMenuItem>
                                    }
                                    @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.EstimatedTotalSupply))
                                    {
                                        <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.SupplyTotalEstimated), Data.Models.SortDirection.Ascending))">Lowest Estimated Total Supply</MudMenuItem>
                                        <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.SupplyTotalEstimated), Data.Models.SortDirection.Descending))">Highest Estimated Total Supply</MudMenuItem>
                                    }
                                    <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.DistanceToAllTimeHighestValue), Data.Models.SortDirection.Descending))">Closest to All Time High (ATH)</MudMenuItem>
                                    <MudMenuItem OnClick="@(() => SetSortOrder(nameof(ProfileInventoryItemDescriptionDTO.DistanceToAllTimeLowestValue), Data.Models.SortDirection.Ascending))">Closest to All Time Low (ATL)</MudMenuItem>
                                </MudMenu>
                            }
                        </MudHidden>
                        <MudMenu Icon="fas fa-fw fa-ellipsis-v" ListClass="ma-0 pa-0" Disabled="State.IsPrerendering">
                            <MudMenuItem OnTouch="@ViewProfileOnSteam" OnClick="@ViewProfileOnSteam">
                                <i class="fab fa-fw fa-steam mr-1"></i>
                                <span>View on Steam</span>
                            </MudMenuItem>
                            <MudMenuItem OnTouch="@SynchroniseProfileWithSteam" OnClick="@SynchroniseProfileWithSteam">
                                <i class="fa fa-fw fa-sync mr-1"></i>
                                <span>Synchronise with Steam</span>
                            </MudMenuItem>
                            @if (State.Is(Profile?.SteamId))
                            {
                                <MudMenuItem OnTouch="@ShowInventoryStackCombinerDialog" OnClick="@ShowInventoryStackCombinerDialog">
                                    <i class="fa fa-fw fa-object-group mr-1"></i>
                                    <span>Stack all inventory items</span>
                                </MudMenuItem>
                            }
                        </MudMenu>
	                </Header>
                </MudTabs>
            }
        </MudItem>
    </MudGrid>
</PageContainer>

@code {

    [Parameter]
    public string SteamId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string SortBy { get; set; } = nameof(ProfileInventoryItemDescriptionDTO.BuyNowPrice);

    [Parameter]
    [SupplyParameterFromQuery]
    public string SortDirection { get; set; } = Data.Models.SortDirection.Descending.ToString();

    [Parameter]
    [SupplyParameterFromQuery]
    public string Panel { get; set; }

    private ProfileDetailedDTO Profile;

    private ProfileInventoryTotalsDTO InventoryTotals;

    private bool InventoryIsPrivate;

    private int PanelIndex;

    private string LoadingMessage;

    private string LoadingError;

    private HttpStatusCode? LoadingErrorStatusCode;

    protected override async Task OnLoadStateAsync()
    {
        Profile = await RestoreFromStateOrLoad(nameof(Profile), async () =>
        {
            await LoadProfileAndInventory();
            return Profile;
        });
        InventoryTotals = RestoreFromStateOrDefault(nameof(InventoryTotals), InventoryTotals);
        InventoryIsPrivate = RestoreFromStateOrDefault(nameof(InventoryIsPrivate), InventoryIsPrivate);
        PanelIndex = RestoreFromStateOrDefault(nameof(PanelIndex), PanelIndex);
        LoadingMessage = RestoreFromStateOrDefault(nameof(LoadingMessage), LoadingMessage);
        LoadingError = RestoreFromStateOrDefault(nameof(LoadingError), LoadingError);
        LoadingErrorStatusCode = RestoreFromStateOrDefault(nameof(LoadingErrorStatusCode), LoadingErrorStatusCode);
        if (InventoryIsPrivate)
        {
            ShowInventoryPrivateNotification();
        }
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(Profile), Profile);
        PersistToState(nameof(InventoryTotals), InventoryTotals);
        PersistToState(nameof(InventoryIsPrivate), InventoryIsPrivate);
        PersistToState(nameof(PanelIndex), PanelIndex);
        PersistToState(nameof(LoadingMessage), LoadingMessage);
        PersistToState(nameof(LoadingError), LoadingError);
        PersistToState(nameof(LoadingErrorStatusCode), LoadingErrorStatusCode);
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        switch (Panel)
        {
            case "items": PanelIndex = 0; break;
            case "collections": PanelIndex = 1; break;
            case "market": PanelIndex = 2; break;
            case "investment": PanelIndex = 3; break;
            case "statistics": PanelIndex = 4; break;
        }

        // If we have navigated to a different profile, reload the new profile
        if ((Profile != null) &&
            !String.Equals(SteamId, Profile?.SteamId, StringComparison.InvariantCultureIgnoreCase) &&
            !String.Equals(SteamId, Profile?.ProfileId, StringComparison.InvariantCultureIgnoreCase))
        {
            await LoadProfileAndInventory();
        }
    }

    private void OnSearch(string text)
    {
        Filter = text;
        StateHasChanged();
    }

    private void SetSortOrder(string sortBy, Data.Models.SortDirection sortDirection)
    {
        SortBy = sortBy;
        SortDirection = sortDirection.ToString();
        StateHasChanged();
    }

    private void OnSelectedPanelChanged(int index)
    {
        var filter = !String.IsNullOrEmpty(Filter) ? $"&filter={Uri.EscapeDataString(Filter)}" : String.Empty;

        PanelIndex = index;
        if (!State.IsPrerendering)
        {
            switch (index)
            {
                case 0: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=items{filter}"); break;
                case 1: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=collections{filter}"); break;
                case 2: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=market{filter}"); break;
                case 3: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=investment{filter}"); break;
                case 4: NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(SteamId)}?panel=statistics{filter}"); break;
            }
        }
    }

    private void ViewProfileOnSteam()
    {
        ExternalNavigationManager.NavigateToNewTabAsync(new SteamProfilePageRequest()
        {
            SteamId = Uri.EscapeDataString(Profile?.SteamId ?? SteamId)
        });
    }
    
    private void ShowInventoryStackCombinerDialog()
    {
        Dialogs.Show<InventoryStackCombinerDialog>(null, parameters: new DialogParameters()
        {
            ["SteamId"] = SteamId
        });
    }

    private async Task SynchroniseProfileWithSteam()
    {
        Profile = null;
        StateHasChanged();
        await LoadProfileAndInventory(force: true);
        StateHasChanged();
    }

    private async Task LoadProfileAndInventory(bool force = false)
    {
        try
        {
            Logger.LogTrace($"Loading inventory for '{Uri.EscapeDataString(SteamId)}'...");
            Profile = null;
            InventoryTotals = null;

            LoadingError = null;
            LoadingMessage = "Finding Steam profile...";
            StateHasChanged();
            await LoadProfile();

            LoadingMessage = "Synchronising inventory with Steam...";
            StateHasChanged();
            await SynchroniseInventory(force);

            LoadingMessage = "Calculating inventory value...";
            StateHasChanged();
            await LoadInventoryTotals();

            LoadingMessage = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading profile inventory '{Uri.EscapeDataString(SteamId)}'");
            LoadingMessage = null;
            LoadingError = ex.Message;
            LoadingErrorStatusCode = (ex as HttpRequestException)?.StatusCode;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadProfile()
    {
        try
        {
            Logger.LogTrace("Fetching inventory profile...");
            Profile = await Http.GetFromJsonWithDefaultsAsync<ProfileDetailedDTO>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/summary"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory profile for '{Uri.EscapeDataString(SteamId)}'");
            Profile = null;
            throw;
        }
    }

    private async Task SynchroniseInventory(bool force = false)
    {
        try
        {
            Logger.LogTrace("Synchronising inventory items...");
            var response = await Http.PostAsync($"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/sync?force={force}", null);
            if(!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(await response.Content.ReadAsStringAsync(), null, response.StatusCode);
            }

            if (Profile != null && force == true)
            {
                Profile.LastUpdatedInventoryOn = DateTimeOffset.Now;
            }
        }
        catch (Exception ex)
        {
            var httpErrorCode = (ex as HttpRequestException)?.StatusCode;
            if (httpErrorCode == HttpStatusCode.Unauthorized)
            {
                Logger.LogWarning(ex, $"Inventory is currently private for '{Uri.EscapeDataString(SteamId)}', unable to synchronise at this time");
                ShowInventoryPrivateNotification();
                InventoryIsPrivate = true;
            }
            else
            {
                Logger.LogError(ex, $"Error synchronising inventory items for '{Uri.EscapeDataString(SteamId)}'");
                throw;
            }
        }
    }

    private async Task LoadInventoryTotals()
    {
        try
        {
            Logger.LogTrace("Fetching inventory totals...");
            InventoryTotals = await Http.GetFromJsonWithDefaultsAsync<ProfileInventoryTotalsDTO>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/total"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory totals for '{Uri.EscapeDataString(SteamId)}'");
            InventoryTotals = null;
            throw;
        }
    }

    private void ShowInventoryPrivateNotification()
    {
        var thisIsMyInventory = State.Is(Profile?.SteamId);
        var snackBarMessage = $"<strong>{(thisIsMyInventory ? "Your" : "This")} inventory is currently private.</strong><br/>";
        snackBarMessage += (Profile?.LastUpdatedInventoryOn != null
            ? $" You are viewing an old snapshot from {Profile.LastUpdatedInventoryOn.Value.ToString("g")} as we are unable to show you the latest contents of {(thisIsMyInventory ? "your" : "this")} inventory."
            : $" We are unable to show you the contents of this inventory."
        );

        if (thisIsMyInventory)
        {
            snackBarMessage += (
                $" To fix this, change your Steam inventory privacy settings to 'Public'."
            );
        }

        Snackbar.Add(
            snackBarMessage,
            Severity.Warning,
            options =>
            {
                options.Icon = "fas fa-fw fa-eye-slash ma-2";
                if (thisIsMyInventory)
                {
                    options.Action = "Change Privacy Settings";
                    options.Onclick = (x) =>
                    {
                        return ExternalNavigationManager.NavigateToNewTabAsync(
                            $"https://steamcommunity.com/profiles/{Profile?.SteamId}/edit/settings"
                        );
                    };
                }
            }
        );
    }
}
