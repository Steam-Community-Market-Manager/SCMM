@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Profile.Inventory
@using Syncfusion.Blazor.Charts
@inject ILogger<InventoryMarketPanel> Logger
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

@if (InventoryMovement == null)
{
    @if (LoadingError != null)
    {
        <Alert Exception="@LoadingError" />
    }
    else
    {
        <Loading Message="Loading market movement..." />
    }
}
else if (!InventoryMovement.FilterBy(Filter).Where(x => x.Movement != 0).Any())
{
    <div class="d-flex flex-column justify-center align-center full-height pa-4">
        <TumbleWeed Light="true" />
        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No market movement has been observed (yet), check back later</MudText>
    </div>
}
else 
{
    <MudGrid Spacing="0">
        @if (InventoryMovementChartData?.Any() == true)
        {
            <MudItem xs="12" xl="4">
                <div class="pa-4">
                    <style>
                        #MarketMovement_Series_0_Connector_ {
                            stroke-dasharray: 10px 10px;
                            stroke-linejoin: round;
                            stroke-linecap: round;
                            -webkit-animation: dash 1s linear infinite;
                            animation: dash 1s linear infinite;
                        }
                        @@-webkit-keyframes dash {
                            100% {
                                stroke-dashoffset: -20px;
                            }
                        }
                        @@keyframes dash {
                            100% {
                                stroke-dashoffset: -20px;
                            }
                        }
                    </style>
                    <SfChart ID="MarketMovement" Theme="Syncfusion.Blazor.Theme.FluentDark" EnableAnimation="false" Background="transparent" Width="100%" Height="100%" CustomClass="text-centered"
                             Title="Market movement" SubTitle="@((DateTimeOffset.Now - InventoryMovement.Min(x => x.MovementTime)).ToDurationString(prefix: "in the last", maxGranularity: 1))">
                        <ChartTitleStyle Size="1.3em" Color="#eeeeee" />
                        <ChartSubTitleStyle Size="1em" Color="#9b9b9b" />
                        <ChartArea>
                            <ChartAreaBorder Width="0" />
                        </ChartArea>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelIntersectAction="LabelIntersectAction.Rotate90">
                            <ChartAxisLabelBorder Width="0" />
                        </ChartPrimaryXAxis>
                        <ChartAxes>
                            <ChartAxis Name="MovementAxis" LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}")" Visible="false" />
                        </ChartAxes>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@InventoryMovementChartData" XName="Name" YName="Value" YAxisName="MovementAxis" Fill="#388e3c" NegativeFillColor="#d32f2f" SummaryFillColor="#1976d2" 
                                         SumIndexes="@InventoryMovementChartSumIndexes" Type="ChartSeriesType.Waterfall">
                                <ChartSeriesAnimation Enable="false" />
                                <ChartSeriesBorder Width="0" />
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer">
                                        <ChartDataLabelFont Color="#eeeeee" />
                                        <ChartDataLabelMargin Left="5" Right="5" Top="5" Bottom="5" />
									</ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                        <ChartZoomSettings EnableSelectionZooming="false" EnableMouseWheelZooming="false" EnablePinchZooming="false" />
                        <ChartLegendSettings Visible="false" />
                        <ChartTooltipSettings Enable="true">
                            <Template>
                                @{
                                    var data = (context as ChartDataPointInfo);
                                }
                                <MudPaper Outlined="true" Class="pa-2">
                                    <span class="no-wrap">@(data.X?.ToString()) : <strong>@State.Currency.ToPriceString((decimal)((double)data.Y))</strong></span>
								</MudPaper>
							</Template>
                        </ChartTooltipSettings>
                    </SfChart>
                </div>
		    </MudItem>
        }
        @if (InventoryMovementPositiveDistributionChartData?.Any() == true)
        {
            <MudItem xs="12" lg="6" xl="4">
                <div class="pa-4">
                    <SfAccumulationChart ID="PositiveMovementDistribution" Theme="Syncfusion.Blazor.Theme.FluentDark" EnableAnimation="false" Background="transparent" Width="100%" Height="100%" CustomClass="text-centered"
                                         Title="Positive price movement" SubTitle="@($"Up {State.Currency.ToPriceString((decimal)InventoryMovementPositiveDistributionChartData.OfType<ChartData>().Sum(x => x.Value))} {((DateTimeOffset.Now - InventoryMovement.Min(x => x.MovementTime)).ToDurationString(prefix: "in the last", maxGranularity: 1))}")" EnableSmartLabels="true">
                        <AccumulationChartTitleStyle Size="1.5em" Color="#eeeeee" />
                        <AccumulationChartSubTitleStyle Size="1em" Color="#388e3c" />
                        <AccumulationChartSeriesCollection>
                            <AccumulationChartSeries DataSource="@InventoryMovementPositiveDistributionChartData" XName="Name" YName="Value" Radius="80%" StartAngle="0" EndAngle="360" InnerRadius="0%" Explode="false">
                                <AccumulationChartAnimation Enable="true" />
                                <AccumulationDataLabelSettings Name="Name" Visible="true" Position="AccumulationLabelPosition.Outside">
                                    <AccumulationChartDataLabelFont Color="#eeeeee" />
                                    <AccumulationChartConnector Type="ConnectorType.Curve" />
                                </AccumulationDataLabelSettings>
                            </AccumulationChartSeries>
                        </AccumulationChartSeriesCollection>
                        <AccumulationChartLegendSettings Visible="false" />
                        <AccumulationChartTooltipSettings Enable="true">
                            <Template>
                                @{
                                    var data = (context as AccumulationChartDataPointInfo);
                                }
                                <MudPaper Outlined="true" Class="pa-2">
                                    <span class="no-wrap">@(data.X?.ToString()) : <strong>@State.Currency.ToPriceString((decimal)((double)data.Y))</strong> (@Math.Round(data.Percentage, 0)%)</span>
								</MudPaper>
							</Template>
                        </AccumulationChartTooltipSettings>
                    </SfAccumulationChart>
                </div>
		    </MudItem>
        }
        @if (InventoryMovementNegativeDistributionChartData?.Any() == true)
        {
            <MudItem xs="12" lg="6" xl="4">
                <div class="pa-4">
                    <SfAccumulationChart ID="NegativeMovementDistribution" Theme="Syncfusion.Blazor.Theme.FluentDark" EnableAnimation="false" Background="transparent" Width="100%" Height="100%" CustomClass="text-centered"
                                         Title="Negative price movement" SubTitle="@($"Down {State.Currency.ToPriceString((decimal)InventoryMovementNegativeDistributionChartData.OfType<ChartData>().Sum(x => x.Value))} {((DateTimeOffset.Now - InventoryMovement.Min(x => x.MovementTime)).ToDurationString(prefix: "in the last", maxGranularity: 1))}")" EnableSmartLabels="true" >
                        <AccumulationChartTitleStyle Size="1.5em" Color="#eeeeee" />
                        <AccumulationChartSubTitleStyle Size="1em" Color="#d32f2f" />
                        <AccumulationChartSeriesCollection>
                            <AccumulationChartSeries DataSource="@InventoryMovementNegativeDistributionChartData" XName="Name" YName="Value" Radius="80%" StartAngle="0" EndAngle="360" InnerRadius="0%" Explode="false">
                                <AccumulationChartAnimation Enable="true" />
                                <AccumulationDataLabelSettings Name="Name" Visible="true" Position="AccumulationLabelPosition.Outside">
                                    <AccumulationChartDataLabelFont Color="#eeeeee" />
                                    <AccumulationChartConnector Type="ConnectorType.Curve" />
                                </AccumulationDataLabelSettings>
                            </AccumulationChartSeries>
                        </AccumulationChartSeriesCollection>
                        <AccumulationChartLegendSettings Visible="false" />
                        <AccumulationChartTooltipSettings Enable="true">
                            <Template>
                                @{
                                    var data = (context as AccumulationChartDataPointInfo);
                                }
                                <MudPaper Outlined="true" Class="pa-2">
                                    <span class="no-wrap">@(data.X?.ToString()) : <strong>@State.Currency.ToPriceString(-((decimal)((double)data.Y)))</strong> (@Math.Round(data.Percentage, 0)%)</span>
								</MudPaper>
							</Template>
                        </AccumulationChartTooltipSettings>
                    </SfAccumulationChart>
                </div>
            </MudItem>
        }
        @if (InventoryMovementFilteredPositive?.Any() == true)
        {
            <MudItem xs="12" lg="6">
                <div class="d-flex flex-wrap flex-row align-start justify-center pa-4">
                    @foreach (var item in InventoryMovementFilteredPositive)
                    {
                        <MudTooltip Text="@($"{State.Currency.ToPriceString(item.Value - item.Movement)} → {State.Currency.ToPriceString(item.Value, dense: true)}")">
                            <div class="d-flex flex-row align-center clickable hover-darken hover-zoom pa-1" @onclick="@(() => OnItemClicked(item.Item))">
                                <img src="@(item.Item.IconUrl)" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{item.Item.ItemType.RustItemTypeToShortName()}.png'")" class="icon mx-1" />
                                <div class="d-flex flex-column">
                                    <MudText Typo="Typo.body2" Class="mx-1 no-wrap" Style="@($"color: {(item.Item.ForegroundColour)}")">
                                        <span>@(item.Item.Name)</span>
                                        @if (item.Quantity > 1 ) {
                                            <span class="mud-secondary-text"> (@item.Quantity.ToQuantityString()) </span>
                                        }
					                </MudText>
                                    <small class="mud-success-text">
                                        <i class="fas fa-fw fa-arrow-up"></i> 
                                        <span>@State.Currency.ToPriceString(item.Movement * item.Quantity)</span>
                                        @if (item.Quantity > 1 ) {
                                            <span class="mud-secondary-text"> (@State.Currency.ToPriceString(item.Movement, dense: true) each) </span>
                                        }
                                    </small>
				                </div>
			                </div>
                        </MudTooltip>
                    }
                </div>
		    </MudItem>
        }
        
        @if (InventoryMovementFilteredNegative?.Any() == true)
        {
            <MudItem xs="12" lg="6">
                <div class="d-flex flex-wrap flex-row align-start justify-center pa-4">
                    @foreach (var item in InventoryMovementFilteredNegative)
                    {
                        <MudTooltip Text="@($"{State.Currency.ToPriceString(item.Value - item.Movement)} ➜ {State.Currency.ToPriceString(item.Value, dense: true)}")">
                            <div class="d-flex flex-row align-center clickable hover-darken hover-zoom pa-1" @onclick="@(() => OnItemClicked(item.Item))">
                                <img src="@(item.Item.IconUrl)" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{item.Item.ItemType.RustItemTypeToShortName()}.png'")" class="icon mx-1" />
                                <div class="d-flex flex-column">
                                    <MudText Typo="Typo.body2" Class="mx-1 no-wrap" Style="@($"color: {(item.Item.ForegroundColour)}")">
                                        <span>@(item.Item.Name)</span>
                                        @if (item.Quantity > 1 ) {
                                            <span class="mud-secondary-text"> (@item.Quantity.ToQuantityString())</span>
                                        }
					                </MudText>
                                    <small class="mud-error-text">
                                        <i class="fas fa-fw fa-arrow-down"></i> 
                                        <span>@State.Currency.ToPriceString(item.Movement * item.Quantity)</span>
                                        @if (item.Quantity > 1 ) {
                                            <span class="mud-secondary-text"> (@State.Currency.ToPriceString(item.Movement) each) </span>
                                        }
                                    </small>
				                </div>
			                </div>
                        </MudTooltip>
                    }
                </div>
		    </MudItem>
        }

    </MudGrid>
}

@code {

    [Parameter]
    public string SteamId { get; set; }
    
    [Parameter]
    public string Filter { get; set; }
    
    [Parameter]
    public ProfileInventoryTotalsDTO InventoryTotals { get; set; }

    private IEnumerable<ProfileInventoryItemMovementDTO> InventoryMovement { get; set; }

    private IEnumerable<ProfileInventoryItemMovementDTO> InventoryMovementFilteredPositive { get; set; }

    private IEnumerable<ProfileInventoryItemMovementDTO> InventoryMovementFilteredNegative { get; set; }
    
    private IEnumerable<object> InventoryMovementChartData { get; set; }
    
    private IEnumerable<object> InventoryMovementPositiveDistributionChartData { get; set;}
    
    private IEnumerable<object> InventoryMovementNegativeDistributionChartData { get; set;}

    private double[] InventoryMovementChartSumIndexes { get; set; }

    private Exception LoadingError { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryMovement();
    }
    
    protected override void OnParametersSet()
    {
        if (InventoryMovement != null)
        {
            RebuildInventoryMovementChartData();
        }
    }

    private void OnItemClicked(ItemDescriptionDTO item)
    {
        ExternalNavigationManager.NavigateToItemAsync(item);
    }

    private async Task LoadInventoryMovement()
    {
        try
        {
            Logger.LogTrace("Fetching inventory market movement...");
            InventoryMovement = await Http.GetFromJsonWithDefaultsAsync<IEnumerable<ProfileInventoryItemMovementDTO>>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/movement"
            );

            RebuildInventoryMovementChartData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory market movement for '{SteamId}'");
            InventoryMovement = null;
            LoadingError = ex;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private void RebuildInventoryMovementChartData()
    {
        var movementFiltered = InventoryMovement.FilterBy(Filter).ToList();
        InventoryMovementFilteredPositive = movementFiltered.Where(x => x.Movement > 0).OrderByDescending(x => x.Movement * x.Quantity).ToList();
        InventoryMovementFilteredNegative = movementFiltered.Where(x => x.Movement < 0).OrderBy(x => x.Movement * x.Quantity).ToList();
        if (!InventoryMovementFilteredPositive.Any() && !InventoryMovementFilteredNegative.Any())
        {
            return;
        }

        var movementChartData = new List<ChartData>();
        /*
        movementChartData.Add(new ChartData() 
        {
            Name = $"Value {(DateTimeOffset.Now - InventoryTotals.MarketMovementTime).ToDurationString(suffix: "ago", zero: "moments ago", maxGranularity: 1)}",
            Value =  (double) State.Currency.ToPrice(InventoryTotals.MarketValue - movementFiltered.Sum(x => x.Movement * x.Quantity))
        });
        */
        if (InventoryMovementFilteredPositive.Any())
        {
            movementChartData.Add(new ChartData() 
            {
                Name = $"Positive movement",
                Value = (double) State.Currency.ToPrice(InventoryMovementFilteredPositive.Sum(x => x.Movement * x.Quantity))
            });
        }
        if (InventoryMovementFilteredNegative.Any())
        {
            movementChartData.Add(new ChartData() 
            {
                Name = $"Negative movement",
                Value = (double) State.Currency.ToPrice(InventoryMovementFilteredNegative.Sum(x => x.Movement * x.Quantity))
            });
        }
        movementChartData.Add(new ChartData() 
        {
            Name = "Total movement"
        });
        
        InventoryMovementChartSumIndexes = new double[] { movementChartData.Count() - 1 };
        InventoryMovementChartData = movementChartData;
        
        var distributionChartData = movementFiltered.Select(x => new ChartData()
        {
            Name = $"{x.Item.Name}",
            Value = (double) State.Currency.ToPrice(x.Movement * x.Quantity),
        });

        var positiveMovementDistribution = new List<ChartData>();
        var topPositiveMovement = InventoryMovementFilteredPositive.Take(9);
        var otherPositiveMovement = InventoryMovementFilteredPositive.Except(topPositiveMovement);
        positiveMovementDistribution.AddRange(
            topPositiveMovement.Select(x => new ChartData()
            {
                Name = $"{x.Item.Name}",
                Value = (double) State.Currency.ToPrice(x.Movement * x.Quantity),
            })
        );
        if (otherPositiveMovement.Any())
        {
            positiveMovementDistribution.Add(new ChartData() 
            {
                Name = $"Other Items ({otherPositiveMovement.Count().ToQuantityString()})",
                Value = (double) State.Currency.ToPrice(otherPositiveMovement.Sum(x => x.Movement * x.Quantity))
            });
        }

        InventoryMovementPositiveDistributionChartData = positiveMovementDistribution;
        
        var negativeMovementDistribution = new List<ChartData>();
        var topNegativeMovement = InventoryMovementFilteredNegative.Take(9);
        var otherNegativeMovement = InventoryMovementFilteredNegative.Except(topNegativeMovement);
        negativeMovementDistribution.AddRange(
            topNegativeMovement.Select(x => new ChartData()
            {
                Name = $"{x.Item.Name}",
                Value = (double) State.Currency.ToPrice(x.Movement * x.Quantity),
            })
        );
        if (otherNegativeMovement.Any())
        {
            negativeMovementDistribution.Add(new ChartData() 
            {
                Name = $"Other Items ({otherNegativeMovement.Count().ToQuantityString()})",
                Value = (double) State.Currency.ToPrice(otherNegativeMovement.Sum(x => x.Movement * x.Quantity))
            });
        }

        InventoryMovementNegativeDistributionChartData = negativeMovementDistribution;
    }

    private class ChartData
    {
        public string Name {get; set; }

        public double Value {get; set; }
    }
}
