@page "/inventory"
@using SCMM.Web.Data.Models.UI.Analytic
@using SCMM.Web.Data.Models.UI.Statistic
@inherits PersistentComponent
@inject ILogger<InventoryLeaderboardPage> Logger
@inject ISnackbar Snackbar
@inject AppState State
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject VirtualisedItemsMemoryCache HighestValueInventoryCache
@inject VirtualisedItemsMemoryCache MostRecentInventoryCache

<PageContainer Title="@($"{State?.App?.Name} Inventory Leaderboard")">
    <MudContainer MaxWidth="MudBlazor.MaxWidth.Large">
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudText Typo="Typo.body1">
                    <span>What is your @(State?.App?.Name ?? "Steam") inventory worth? Enter your Steam ID below and we'll tell you the current market value of your inventory items.</span><br/>
                    <span>Make sure your inventory items are set as "public" in your Steam profile privacy settings so we can detect your items.</span>
                </MudText>
            </MudItem>
            <MudItem xs="12" md="9">
                <MudTextField @bind-Value="SteamId" Variant="Variant.Outlined" FullWidth="true" Immediate="true" AutoFocus="true" Disabled="State.IsPrerendering" Class="ma-0"
                              Adornment="MudBlazor.Adornment.Start" AdornmentIcon="fab fa-fw fa-steam mr-3" Placeholder="Enter a Steam ID64, Steam URL, or Custom URL" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="fas fa-fw fa-search-dollar" FullWidth="true"
                           Disabled="@(String.IsNullOrEmpty(SteamId) || State.IsPrerendering)" OnClick="@(() => ViewProfileInventory(SteamId))" Class="full-height full-width">
                    <span>Calculate Value</span>
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
    <MudContainer MaxWidth="MudBlazor.MaxWidth.Large" Class="mt-2">
        <MudGrid Spacing="2">
            @if (Totals != null)
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="px-4 py-2">
                        <MudText Typo="Typo.h6" Class="text-centered">
                            <span>@Totals.TotalInventories.ToQuantityString() <span class="mud-secondary-text"> inventories tracked, </span></span>
                            <span><span class="mud-secondary-text"> containing </span> @Totals.TotalItems.ToQuantityString() <span class="mud-secondary-text"> items, </span></span>
                            <span><span class="mud-secondary-text"> with a total market value of </span> @State.Currency.ToPriceString(Totals.TotalMarketValue) </span>
                        </MudText>
                    </MudPaper>
                </MudItem>
            }
            <MudItem xs="12" md="6">
                <StatisticsPanel Icon="fas fa-fw fa-trophy" Title="Highest Valued Inventories" Dense="true">
                    <MudStack Reverse="MyInventoryRankIsBelowTheLine" Spacing="0">
                        @if (MyInventoryRank != null)
                        {
                            <MudStack Row="true" @onclick="@((_) => ViewProfileInventory(MyInventoryRank.SteamId))" Class="clickable mud-theme-dark py-2 px-4">
                                <div>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <MudText Typo="Typo.caption" Class="pr-2">#@MyInventoryRank.Rank.ToQuantityString()</MudText>
                                        <img src="@(!String.IsNullOrEmpty(MyInventoryRank.SteamId) ? MyInventoryRank.AvatarUrl : "/images/steam_default_avatar.png")" class="mr-1" style="width:32px; height:32px;" />
                                        <div class="d-flex flex-column">
                                            <MudText Typo="Typo.body2">@(MyInventoryRank.Name ?? "Anonymous User")</MudText>
                                            <MudText Typo="Typo.caption" Color="MudBlazor.Color.Secondary">
                                                <span class="no-wrap">
                                                    <i class="fas fa-fw fa-clock"></i>
                                                    <span> Synced @((DateTimeOffset.Now - (MyInventoryRank.LastUpdatedOn ?? DateTimeOffset.Now)).ToDurationString(suffix: "ago", zero: "just now", maxGranularity: 1)) </span>
                                                </span>
                                            </MudText>
                                        </div>
                                    </div>
                                </div>
                                <MudSpacer />
                                <div class="text-right">
                                    <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(MyInventoryRank.Value)</MudText>
                                    <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary" Class="no-wrap"><small>@MyInventoryRank.Items.ToQuantityString() items</small></MudText>
                                </div>
                            </MudStack>
                            <MudDivider />
                        }
                        <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:60vh;" Class="flex-grow-1">
                            <tbody>
                                @if (HighestValueInventoryCache?.Total == 0)
                                {
                                    <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                        <Loading />
                                    </div>
                                }
                                <Virtualize ItemsProvider="LoadProfilesHighestValueInventory" Context="profile" SpacerElement="tr" OverscanCount="10">
                                    <EmptyContent>
                                        <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                            <TumbleWeed Light="true" />
                                            <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                                        </div>
                                    </EmptyContent>
                                    <ItemContent>
                                        <tr @onclick="@((_) => ViewProfileInventory(profile.SteamId))" class="@(!String.IsNullOrEmpty(profile.SteamId) ? "clickable" : null)" style="min-height:55px; max-height:55px; height:55px;">
                                            <td>
                                                <div class="d-flex flex-row justify-start align-center">
                                                    <MudText Typo="Typo.caption" Class="pr-2">#@profile.Rank.ToQuantityString()</MudText>
                                                    <img src="@(!String.IsNullOrEmpty(profile.SteamId) ? profile.AvatarUrl : "/images/steam_default_avatar.png")" class="mr-1" style="width:32px; height:32px;" />
                                                    <div class="d-flex flex-column">
                                                        <MudText Typo="Typo.body2">@(profile.Name ?? "Anonymous User")</MudText>
                                                        <MudText Typo="Typo.caption" Color="MudBlazor.Color.Secondary">
                                                            @if (profile.IsBanned)
                                                            {
                                                                <span class="no-wrap mud-error-text">
                                                                    <i class="fas fa-fw fa-ban"></i>
                                                                    <span> Banned </span>
                                                                </span>
                                                            }
                                                            @if (profile.IsPrivate)
                                                            {
                                                                <span class="no-wrap mud-warning-text">
                                                                    <i class="fas fa-fw fa-lock"></i>
                                                                    <span> Private </span>
                                                                </span>
                                                            }
                                                            @if (profile.IsBot)
                                                            {
                                                                <span class="no-wrap">
                                                                    <i class="fas fa-fw fa-robot"></i>
                                                                    <span> Bot </span>
                                                                </span>
                                                            }
                                                            <span class="no-wrap">
                                                                <i class="fas fa-fw fa-clock"></i>
                                                                <span> Synced @((DateTimeOffset.Now - (profile.LastUpdatedOn ?? DateTimeOffset.Now)).ToDurationString(suffix: "ago", zero: "just now", maxGranularity: 1)) </span>
                                                            </span>
                                                        </MudText>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(profile.Value)</MudText>
                                                <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary" Class="no-wrap"><small>@profile.Items.ToQuantityString() items</small></MudText>
                                            </td>
                                        </tr>
                                    </ItemContent>
                                    <Placeholder>
                                        <tr style="min-height:55px; max-height:55px; height:55px;">
                                            <td>
                                                <div class="d-flex flex-row justify-start align-center">
                                                    <MudProgressCircular Indeterminate="true" Class="mr-4" Style="width:32px; height:32px;" />
                                                    <div class="d-flex flex-column">
                                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                                        <MudText Typo="Typo.caption" Color="MudBlazor.Color.Secondary"><small></small></MudText>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-right">
                                                <MudText Typo="Typo.body2" Class="no-wrap">-</MudText>
                                                <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary" Class="no-wrap"><small></small></MudText>
                                            </td>
                                        </tr>
                                    </Placeholder>
                                </Virtualize>
                            </tbody>
                        </MudSimpleTable>
                    </MudStack>
                </StatisticsPanel>
            </MudItem>
            <MudItem xs="12" md="6">
                <StatisticsPanel Icon="fas fa-fw fa-clock" Title="Recently Valued Inventories" Dense="true">
                    <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:60vh;" Class="flex-grow-1">
                        <tbody>
                            @if (MostRecentInventoryCache?.Total == 0)
                            {
                                <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                    <Loading />
                                </div>
                            }
                            <Virtualize ItemsProvider="LoadProfilesMostRecentInventory" Context="profile" SpacerElement="tr" OverscanCount="10">
                                <EmptyContent>
                                    <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                        <TumbleWeed Light="true" />
                                        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                                    </div>
                                </EmptyContent>
                                <ItemContent>
                                    <tr @onclick="@((_) => ViewProfileInventory(profile.SteamId))" class="@(!String.IsNullOrEmpty(profile.SteamId) ? "clickable" : null)" style="min-height:55px; max-height:55px; height:55px;">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <img src="@(!String.IsNullOrEmpty(profile.SteamId) ? profile.AvatarUrl : "/images/steam_default_avatar.png")" class="mr-1" style="width:32px; height:32px;" />
                                                <div class="d-flex flex-column">
                                                    <MudText Typo="Typo.body2">@(profile.Name ?? "Anonymous User")</MudText>
                                                    <MudText Typo="Typo.caption" Color="MudBlazor.Color.Secondary">
                                                        @if (profile.IsBanned)
                                                        {
                                                            <span class="no-wrap mud-error-text">
                                                                <i class="fas fa-fw fa-ban"></i>
                                                                <span> Banned </span>
                                                            </span>
                                                        }
                                                        @if (profile.IsPrivate)
                                                        {
                                                            <span class="no-wrap mud-warning-text">
                                                                <i class="fas fa-fw fa-lock"></i>
                                                                <span> Private </span>
                                                            </span>
                                                        }
                                                        @if (profile.IsBot)
                                                        {
                                                            <span class="no-wrap">
                                                                <i class="fas fa-fw fa-robot"></i>
                                                                <span> Bot </span>
                                                            </span>
                                                        }
                                                        <span class="no-wrap">
                                                            <i class="fas fa-fw fa-clock"></i>
                                                            <span> Synced @((DateTimeOffset.Now - (profile.LastUpdatedOn ?? DateTimeOffset.Now)).ToDurationString(suffix: "ago", zero: "just now", maxGranularity: 1)) </span>
                                                        </span>
                                                    </MudText>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(profile.Value)</MudText>
                                            <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary" Class="no-wrap"><small>@profile.Items.ToQuantityString() items</small></MudText>
                                        </td>
                                    </tr>
                                </ItemContent>
                                <Placeholder>
                                    <tr style="min-height:55px; max-height:55px; height:55px;">
                                        <td>
                                            <div class="d-flex flex-row justify-start align-center">
                                                <MudProgressCircular Indeterminate="true" Class="mr-4" Style="width:32px; height:32px;" />
                                                <div class="d-flex flex-column">
                                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                                    <MudText Typo="Typo.caption" Color="MudBlazor.Color.Secondary"><small></small></MudText>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.body2" Class="no-wrap">-</MudText>
                                            <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary" Class="no-wrap"><small></small></MudText>
                                        </td>
                                    </tr>
                                </Placeholder>
                            </Virtualize>
                        </tbody>
                    </MudSimpleTable>
                </StatisticsPanel>
            </MudItem>
        </MudGrid>
    </MudContainer>
</PageContainer>

@code {

    private string SteamId { get; set; }

    private ProfileInventoryTotalsStatisticDTO Totals { get; set; }

    private ProfileInventoryValueStatisticDTO MyInventoryRank { get; set; }

    private bool MyInventoryRankIsBelowTheLine { get; set; } = true;

    protected override async Task OnLoadStateAsync()
    {
        Totals = await RestoreFromStateOrLoad(nameof(Totals), async () =>
        {
            try
            {
                return await Http.GetFromJsonWithDefaultsAsync<ProfileInventoryTotalsStatisticDTO>($"api/stats/profiles/inventories/total");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error profile inventory totals");
                Snackbar.Add($"Unable to load profile inventory totals. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
        if (State.IsAuthenticated && State.Profile != null)
        {
            MyInventoryRank = await RestoreFromStateOrLoad(nameof(Totals), async () =>
            {
                try
                {
                    return await Http.GetFromJsonWithDefaultsAsync<ProfileInventoryValueStatisticDTO>($"api/stats/profiles/inventories/myRank");
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, $"Error profile inventory ranking");
                    Snackbar.Add($"Unable to load profile inventory ranking. {ex.Message}", MudBlazor.Severity.Error);
                    throw;
                }
            });
        }
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(Totals), Totals);
        return Task.CompletedTask;
    }

    private void ViewProfileInventory(string steamId)
    {
        if (!String.IsNullOrEmpty(steamId))
        {
            NavigationManager.NavigateTo($"/inventory/{Uri.EscapeDataString(steamId)}");
        }
    }

    protected async ValueTask<ItemsProviderResult<ProfileInventoryValueStatisticDTO>> LoadProfilesHighestValueInventory(ItemsProviderRequest request)
    {
        try
        {
            var data = await HighestValueInventoryCache.Get(
                request.StartIndex,
                request.Count,
                () => Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ProfileInventoryValueStatisticDTO>>($"api/stats/profiles/inventories/highestValue?start={request.StartIndex}&count={request.Count}")
            );
            if (data != null && MyInventoryRank != null)
            {
                MyInventoryRankIsBelowTheLine = (data.Start + (data.Count * 0.5)) <= MyInventoryRank.Rank;
                StateHasChanged();
            }

            return new ItemsProviderResult<ProfileInventoryValueStatisticDTO>(data.Items, data.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'profile highest value inventory' item statistics");
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected async ValueTask<ItemsProviderResult<ProfileInventoryValueStatisticDTO>> LoadProfilesMostRecentInventory(ItemsProviderRequest request)
    {
        try
        {
            var data = await MostRecentInventoryCache.Get(
                request.StartIndex,
                request.Count,
                () => Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ProfileInventoryValueStatisticDTO>>($"api/stats/profiles/inventories/recentlyValued?start={request.StartIndex}&count={request.Count}")
            );

            return new ItemsProviderResult<ProfileInventoryValueStatisticDTO>(data.Items, data.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'profile most recent inventory' item statistics");
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
}
