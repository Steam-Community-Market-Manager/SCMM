@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inherits PersistentComponent
@inject ILogger<InventoryItemsPanel> Logger
@inject HttpClient Http
@inject AppState State
@inject ExternalNavigationManager ExternalNavigationManager

@if (InventoryItemsFilteredAndSorted == null)
{
    @if (LoadingError != null)
    {
        <Alert Exception="@LoadingError" />
    }
    else
    {
        <Loading Message="Loading inventory items..." />
    }
}
else if (!InventoryItemsFilteredAndSorted.Any())
{
    <div class="d-flex flex-column justify-center align-center full-height pa-4">
        <TumbleWeed Light="true" />
        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No items found</MudText>
    </div>
}
else 
{
    <div class="d-flex flex-wrap flex-row align-start justify-center">
        @foreach (var item in InventoryItemsFilteredAndSorted)
        {
            <div class="item">
                @if (item.Quantity > 1)
                {
                    <MudBadge Color="MudBlazor.Color.Dark" Content="@item.Quantity" Max="99999" Overlap="true" Bordered="true" Class="mud-badge-overlap-extra" BadgeClass="mud-badge-border-inherit">
                        <InventoryItemSummary SteamId="@SteamId" Item="@item" />
                    </MudBadge>
                }
                else
                {
                    <InventoryItemSummary SteamId="@SteamId" Item="@item" />
                }
                @if(SelectedInventoryItems != null && State.Is(SteamId))
                {
                    <div class="@($"item-multi-select {((SelectedInventoryItems.ContainsKey(item.Id) && SelectedInventoryItems[item.Id] == true) ? "item-selected" : "item-hover-to-select")}")">
                        <MudCheckBox T="bool" @bind-Value="@SelectedInventoryItems[item.Id]" Color="Color.Primary" Class="ma-n1" Disabled="State.IsPrerendering" />
                    </div>
                }
            </div>
        }
    </div>
    @if (SelectedInventoryItems != null && SelectedInventoryItems.Any(x => x.Value) && State.Is(SteamId))
    {
        <div class="multi-select-actions mud-appbar pa-2">
            <MudStack Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.body2">
                    @{
                        var selectedItemTotals = GetSelectedItemsTotals();
                    }
                    <span><strong>@selectedItemTotals.Item1</strong> item(s) selected, worth a total of <strong>@State.Currency.ToPriceString(selectedItemTotals.Item2)</strong></span>
                </MudText>
                <MudStack Spacing="2" Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                    <MudButton OnClick="ClearItemSelection" Variant="Variant.Outlined" Color="Color.Secondary" Class="mx-1" Disabled="State.IsPrerendering">Clear</MudButton>
                    <MudButton OnClick="SellSelectedItemsOnMarket" Variant="Variant.Filled" Color="Color.Success" StartIcon="fa fa-fw fa-hand-holding-usd" Class="mx-1" Disabled="State.IsPrerendering">Multi-sell</MudButton>
                </MudStack>
            </MudStack>
        </div>
    }
}

@code {

    [Parameter]
    public string SteamId { get; set; }

    [Parameter]
    public string Filter { get; set; }

    [Parameter]
    public string SortBy { get; set; } = nameof(ProfileInventoryItemDescriptionDTO.BuyNowPrice);

    [Parameter]
    public string SortDirection { get; set; } = Data.Models.SortDirection.Descending.ToString();

    private IList<ProfileInventoryItemDescriptionDTO> InventoryItems;

    private ProfileInventoryItemDescriptionDTO[] InventoryItemsFilteredAndSorted { get; set; }

    private IDictionary<ulong, bool> SelectedInventoryItems;

    private Exception LoadingError;

    protected override async Task OnLoadStateAsync()
    {
        InventoryItems = await RestoreFromStateOrLoad(nameof(InventoryItems), async () =>
        {
            await LoadInventoryItems();
            return InventoryItems;
        });
        SelectedInventoryItems = RestoreFromStateOrDefault(nameof(SelectedInventoryItems), SelectedInventoryItems);
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(InventoryItems), InventoryItems);
        PersistToState(nameof(SelectedInventoryItems), SelectedInventoryItems);
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (InventoryItems != null)
        {
            InventoryItemsFilteredAndSorted = GetFilteredAndSortedItems(InventoryItems).ToArray();
        }
    }

    private async Task LoadInventoryItems()
    {
        try
        {
            Logger.LogTrace("Fetching inventory items...");
            InventoryItems = await Http.GetFromJsonWithDefaultsAsync<IList<ProfileInventoryItemDescriptionDTO>>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/items"
            );
            SelectedInventoryItems = InventoryItems.ToDictionary(x => x.Id, x => false);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error fetching inventory items for '{SteamId}'");
            InventoryItems = null;
            LoadingError = ex;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private IEnumerable<ProfileInventoryItemDescriptionDTO> GetFilteredAndSortedItems(IEnumerable<ProfileInventoryItemDescriptionDTO> items)
    {
        if (!String.IsNullOrEmpty(Filter))
        {
            items = items.FilterBy(Filter);
        }
        if (!String.IsNullOrEmpty(SortBy))
        {
            items = items.AsQueryable().SortBy(SortBy, Enum.Parse<Data.Models.SortDirection>(SortDirection));
        }

        return items;
    }

    private Tuple<int, long> GetSelectedItemsTotals()
    {
        var selectedItems = InventoryItems.Where(x => SelectedInventoryItems.Any(y => y.Key == x.Id && y.Value == true)).ToArray();
        return new Tuple<int, long>(
            selectedItems.Sum(x => x.Quantity),
            selectedItems.Sum(x => (x.BuyNowPrice ?? 0) * x.Quantity)
        );
    }

    private void ClearItemSelection()
    {
        SelectedInventoryItems = InventoryItems?.ToDictionary(x => x.Id, x => false);
        StateHasChanged();
    }

    private void SellSelectedItemsOnMarket()
    {
        var items = InventoryItems.Where(x => SelectedInventoryItems.Any(y => y.Key == x.Id && y.Value == true));
        ExternalNavigationManager.NavigateToNewTabAsync(new SteamMarketMultisellPageRequest()
        {
            AppId = items.Where(x => x.AppId > 0).FirstOrDefault()?.AppId.ToString(),
            MarketHashNames = items.Select(x => x.Name).ToArray()
        });
        ClearItemSelection();
    }
}
