@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject AppState State

<MudItem xs="12" sm="6" lg="4" xl="2">
    <div class="d-flex flex-row justify-start align-start">
        @if (Profile == null)
        {
            <MudSkeleton SkeletonType="MudBlazor.SkeletonType.Circle" Width="48px" Height="48px" Class="mud-skeleton-light" />
        }
        else
        {
            @if (Profile?.Roles?.Contains(Roles.VIP) == true)
            {
                <div class="d-flex flex-column justify-center align-center" style="position:relative">
                    <MudAvatar Image="@Profile.AvatarUrl" style="border:1px solid gold" />
                    @if (Profile?.Roles?.Contains(Roles.VIP) == true)
                    {
                        <i class="fas fa-fw fa-crown fa-bounce" style="position:absolute; top:-0.75em; font-size:1.5em; color:gold; z-index:999999"></i>
                    }
                    <MudText Typo="MudBlazor.Typo.caption" Class="ma-1" Style="color:gold">
                        <MudTooltip Placement="Placement.Right" Arrow="true">
                            <TooltipContent>
                                @if (Profile?.Roles?.Contains(Roles.Donator) == true)
                                {
                                    <span>Thank you for your generous support and/or donation(s) to the SCMM project</span>
                                }
                                else
                                {
                                    <span>Thank you for contributing to the SCMM project</span>
                                }
                            </TooltipContent>
                            <ChildContent>
                                @if (Profile?.Roles?.Contains(Roles.Donator) == true)
                                {
                                    <span>Donator</span>
                                }
                                else
                                {
                                    <span>VIP</span>
                                }
                            </ChildContent>
                        </MudTooltip>
                    </MudText>
                </div>
            }
            else
            {
                <MudAvatar Image="@Profile.AvatarUrl" />
            }
        }
        <div class="ml-2">
            @if (Profile == null)
            {
                <MudSkeleton Width="12em" Class="mud-skeleton-light" />
                <MudSkeleton Width="8em" Class="mud-skeleton-light" />
            }
            else
            {
                <MudText Typo="MudBlazor.Typo.body2">
                    <span>@Profile.Name</span>
                </MudText>
                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                    <small class="no-wrap">
                        <i class="fa fa-fw fa-fingerprint"></i>
                        <span>@Profile.SteamId</span>
                    </small>
                    <small class="no-wrap">
                        @if (!String.IsNullOrEmpty(Profile.ProfileId) && !String.Equals(Profile.ProfileId, Profile.SteamId, StringComparison.OrdinalIgnoreCase))
                        {
                            <i class="fa fa-fw fa-user"></i>
                            <span>@Profile.ProfileId</span>
                        }
                    </small>
                    @if (Profile.IsTradeBanned)
                    {
                        <small class="no-wrap mud-error-text">
                            <i class="fas fa-fw fa-ban ml-1"></i>
                            <span>Banned</span>
                        </small>
                    }
                    @if (Profile.Privacy != SteamVisibilityType.Public)
                    {
                        <small class="no-wrap mud-warning-text">
                            <i class="fas fa-fw fa-lock ml-1"></i>
                            <span>Private</span>
                        </small>
                    }
                    @if (Profile.Roles.Contains(Roles.Bot))
                    {
                        <small class="no-wrap">
                            <i class="fas fa-fw fa-robot ml-1"></i>
                            <span>Bot</span>
                        </small>
                    }
                </MudText>
                @if (Profile.LastUpdatedInventoryOn != null)
                {
                    <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                        <small class="no-wrap">
                            <i class="fa fa-fw fa-clock"></i>
                            <span>Last synchronised @((DateTimeOffset.Now - (Profile.LastUpdatedInventoryOn ?? DateTimeOffset.Now)).ToDurationString(suffix: "ago", zero: "just now", maxGranularity: 1))</span>
                        </small>
                    </MudText>
                }
            }
        </div>
    </div>
</MudItem>

<MudItem xs="12" sm="6" lg="4" xl="2">
    <MudTooltip Text="The total number of items in this inventory">
        <div class="d-flex flex-row justify-start align-start">
            <MudAvatar Class="mud-info">
                <i class="fas fa-fw fa-th"></i>
            </MudAvatar>
            <div class="ml-2">
                <MudText Typo="MudBlazor.Typo.body2">Inventory Items</MudText>
                <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                    @if (InventoryTotal == null)
                    {
                        <MudSkeleton Width="50%" Class="mud-skeleton-light" />
                    }
                    else 
                    {
                        @InventoryTotal.Items.ToQuantityString()
                    }
                </MudText>
            </div>
        </div>
    </MudTooltip>
</MudItem>

@if (InventoryTotal == null || InventoryTotal?.MarketValue > 0)
{
    <MudItem xs="12" sm="6" lg="4" xl="2">
        <MudTooltip Text="How much people have recently paid for the items in this inventory, based on the most recent median sales price of each item">
            <div class="d-flex flex-row justify-start align-start">
                <MudAvatar Class="mud-info">
                    <i class="fas fa-fw fa-balance-scale-left"></i>
                </MudAvatar>
                <div class="ml-2">
                    <MudText Typo="MudBlazor.Typo.body2">Inventory Value</MudText>
                    <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                        @if (InventoryTotal == null)
                        {
                            <MudSkeleton Class="mud-skeleton-light" />
                        }
                        else 
                        {
                            <span>@State.Currency.ToPriceString(InventoryTotal.MarketValue)</span>
                            <small class="@($"ml-1 {(InventoryTotal.MarketMovementValue > 0 ? "mud-success-text" : "mud-error-text")}")">
                                <i class="@($"fas fa-fw {(InventoryTotal.MarketMovementValue > 0 ? "fa-arrow-up" : "fa-arrow-down")}")"></i>
                                @switch(@State.Profile.InventoryValueMovementDisplay)
                                {
                                    case InventoryValueMovementDisplayType.Price:
                                        <span>@State.Currency.ToPriceString(InventoryTotal.MarketMovementValue, dense: true) @((DateTimeOffset.Now - InventoryTotal.MarketMovementTime).ToDurationString(prefix: "in the last", maxGranularity: 1))</span>
                                        break;
                                    case InventoryValueMovementDisplayType.Percentage:
                                        <span>@InventoryTotal.MarketMovementValue.ToPercentageString(InventoryTotal.MarketValue, decimals: 1) @((DateTimeOffset.Now - InventoryTotal.MarketMovementTime).ToDurationString(prefix: "in the last", maxGranularity: 1))</span>
                                        break;
                                }
                            </small>
                        }
                    </MudText>
                </div>
            </div>
        </MudTooltip>
    </MudItem>
}

@if (InventoryTotal == null || InventoryTotal?.Invested > 0)
{
    <MudItem xs="12" sm="6" lg="4" xl="2">
        <MudTooltip Text="The total amount of money spent to purchase this inventory">
            <div class="d-flex flex-row justify-start align-start">
                <MudAvatar Class="mud-error">
                    <i class="fas fa-fw fa-dollar-sign"></i>
                </MudAvatar>
                <div class="ml-2">
                    <MudText Typo="MudBlazor.Typo.body2">Investment Costs</MudText>
                    <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                        @if (InventoryTotal == null)
                        {
                            <MudSkeleton Class="mud-skeleton-light" />
                        }
                        else 
                        {
                            @State.Currency.ToPriceString(InventoryTotal.Invested.Value)
                        }
                    </MudText>
                </div>
            </div>
        </MudTooltip>
    </MudItem>
}

@if (InventoryTotal == null || (InventoryTotal?.InvestmentNetReturn != null && InventoryTotal?.InvestmentNetReturn != 0))
{
    <MudItem xs="12" sm="6" lg="4" xl="2">
        <MudTooltip Text="The total amount of investment gains and losses for this inventory. Calculated by subtracting the cost of purchasing all items (where purchase price is known) from the last median sales price">
            <div class="d-flex flex-row justify-start align-start">
                <MudAvatar Class="@(InventoryTotal?.InvestmentNetReturn >= 0 ? "mud-success" : "mud-error")">
                    @if (InventoryTotal == null)
                    {
                        <MudSkeleton SkeletonType="MudBlazor.SkeletonType.Circle" Class="mud-skeleton-light" />
                    }
                    else
                    {
                        <i class="fas fa-fw fa-hand-holding-usd"></i>
                    }
                </MudAvatar>
                <div class="ml-2">
                    <MudText Typo="MudBlazor.Typo.body2">
                        @if (InventoryTotal == null)
                        {
                            <MudSkeleton Width="8em" Class="mud-skeleton-light" />
                        }
                        else
                        {
                            <span>Investment Returns</span>
                        }
                    </MudText>
                    <MudText Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                        @if (InventoryTotal == null)
                        {
                            <MudSkeleton Width="12em" Class="mud-skeleton-light" />
                        }
                        else 
                        {
                            <span>@State.Currency.ToPriceString(InventoryTotal.InvestmentNetReturn.Value)</span>
                            @if (InventoryTotal.InvestmentGains > 0)
                            {
                                <small class="mud-success-text ml-1">
                                    <i class="fas fa-fw fa-arrow-up"></i> 
                                    <span>@State.Currency.ToPriceString(InventoryTotal.InvestmentGains.Value, dense: true) gains</span>
                                </small>
                            }
                            @if (InventoryTotal.InvestmentLosses > 0)
                            {
                                <small class="mud-error-text ml-1">
                                    <i class="fas fa-fw fa-arrow-down"></i> 
                                    <span>@State.Currency.ToPriceString(InventoryTotal.InvestmentLosses.Value, dense: true) losses</span>
                                </small>
                            }
                        }
                    </MudText>
                </div>
            </div>
        </MudTooltip>
    </MudItem>
}

@code {

    [Parameter]
    public ProfileDetailedDTO Profile { get; set; }
    
    [Parameter]
    public ProfileInventoryTotalsDTO InventoryTotal { get; set; }

    [Parameter]
    public EventCallback SynchroniseInventory { get; set; }

}