@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject ExternalNavigationManager ExternalNavigationManager
@inject PinnedActionManager PinnedActionManager
@inject AppState State
@inject IDialogService Dialogs

<div class="align-self-stretch">
    <MudTooltip Placement="Placement.Top" Class="mud-paper mud-paper-outlined">
        <TooltipContent>
            @if (Item.AverageBuyPrice > 0)
            {
                <span>@Item.Name, purchased at @State.Currency.ToPriceString(Item.AverageBuyPrice.Value, dense: true)</span>
            }
            else
            {
                <span>@Item.Name</span>
            }
        </TooltipContent>
        <ChildContent>
            <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" PopoverClass="mud-paper mud-paper-outlined my-1" ListClass="ma-0 pa-0" FullWidth="false" Dense="true" Disabled="State.IsPrerendering">
                <ActivatorContent>
                    <div class="item-summary d-flex flex-wrap flex-column align-center justify-center full-height" @onclick="@((_) => OnItemClicked(Item))">
                        <div class="hover-zoom">
                            <img src="@Item.IconUrl" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{Item.ItemType.RustItemTypeToShortName()}.png'")" class="ma-1" />
                        </div>
                        @if (Item.BuyNowPrice != null)
                        {
                            <MudText Typo="MudBlazor.Typo.caption" Class="text-centered no-wrap">
                                @State.Currency.ToPriceString(Item.BuyNowPrice.Value)
                            </MudText>
                        }
                    </div>
                </ActivatorContent>
                <ChildContent>
                    @if (Item != null)
                    {
                        <MudMenuItem OnClick="@(() => PinItemAction())">
                            <i class="@($"fa fa-fw fa-bookmark mr-1")"></i>
                            <span>Bookmark Item</span>
                        </MudMenuItem>
                    }
                    @if (State.Is(SteamId))
                    {
                        @if (Item.Stacks.Length > 1)
                        {
                            <MudMenuItem OnClick="ShowStackCombinerDialog">
                                <i class="fa fa-fw fa-object-group mr-1"></i>
                                <span>Combine Stacks</span>
                            </MudMenuItem>
                        }
                        @if (Item.Quantity > 1 && (Item.Stacks.Length < Item.Quantity))
                        {
                            <MudMenuItem OnClick="ShowStackSplitterDialog">
                                <i class="fa fa-fw fa-object-ungroup mr-1"></i>
                                <span>Split Stacks</span>
                            </MudMenuItem>
                        }
                        @if (!String.IsNullOrEmpty(Item.BuyNowUrl))
                        {
                            <MudMenuItem OnClick="SellItemOnMarket">
                                <i class="fa fa-fw fa-hand-holding-usd mr-1"></i>
                                <span>@(Item.Quantity > 1 ? "Multi-Sell on Steam" : "Sell on Steam")</span>
                            </MudMenuItem>
                        }
                    }
                    @if (Item.Stacks?.Any() == true)
                    {
                        <MudMenuItem OnClick="ViewItemOnSteam">
                            <i class="@($"fab fa-fw fa-steam mr-1")"></i>
                            <span>View on Steam</span>
                        </MudMenuItem>
                    }
                    @if (Item.Actions != null)
                    {
                        @foreach (var action in Item.Actions)
                        {
                            <MudMenuItem OnClick="@(() => ExternalNavigationManager.NavigateToNewTabAsync(action.Url))">
                                <i class="@($"fa fa-fw {action.Icon} mr-1")"></i>
                                <span>@action.Name</span>
                            </MudMenuItem>
                        }
                    }
                </ChildContent>
            </MudMenu>
        </ChildContent>
    </MudTooltip>
</div>

@code {
    
    [Parameter]
    public string SteamId { get; set; }
    
    [Parameter]
    public ProfileInventoryItemDescriptionDTO Item { get; set; }

    private void OnItemClicked(ProfileInventoryItemDescriptionDTO item)
    {
        ExternalNavigationManager.NavigateToItemAsync(item);
    }
    
    private void ViewItemOnSteam()
    {
        ExternalNavigationManager.NavigateToNewTabAsync(new SteamProfileInventoryPageRequest()
        {
            SteamId = SteamId,
            AppId = Item.AppId.ToString(),
            AssetId = Item.Stacks?.MaxBy(x => x.Quantity).SteamId
        });
    }
    
    private void SellItemOnMarket()
    {
        ExternalNavigationManager.NavigateToNewTabAsync(new SteamMarketMultisellPageRequest()
        {
            AppId = Item.AppId.ToString(),
            MarketHashNames = new string[] { Item.Name }
        });
    }

    private void ShowStackCombinerDialog()
    {
        Dialogs.Show<ItemStackCombinerDialog>(null, parameters: new DialogParameters()
        {
            ["SteamId"] = SteamId,
            ["Item"] = Item
        });
    }

    private void ShowStackSplitterDialog()
    {
        Dialogs.Show<ItemStackSplitterDialog>(null, parameters: new DialogParameters()
        {
            ["SteamId"] = SteamId,
            ["Item"] = Item
        });
    }

    private async Task PinItemAction()
    {
        var action = new PinnedActionManager.Action()
        {
            Type = "Item",
            Url = $"/api/item/{Item?.Id}",
            IconUrl = Item?.IconUrl,
            Description = Item?.Name,
        };

        if (!(await PinnedActionManager.IsPinned(action)))
        {
            await PinnedActionManager.PinAction(action);
        }
    }

}
