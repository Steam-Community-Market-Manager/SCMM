@using SCMM.Web.Data.Models.UI.Profile.Inventory
@inject ILogger<InventoryInvestmentPanel> Logger
@inject HttpClient Http
@inject AppState State

@if (LoadingError != null)
{
    <Alert Exception="@LoadingError" />
}
else
{
    <MudTable @ref="Table" T="ProfileInventoryInvestmentItemDTO" Dense="true" Hover="true" Striped="false" FixedHeader="true" FixedFooter="true" ReadOnly="@(!State.Is(SteamId) || State.IsPrerendering)" Class="mud-table-dense-extra"
              ServerData="@LoadItems" RowsPerPage="25" Breakpoint="Breakpoint.Xs" CommitEditTooltip="Save Changes" AllowUnsorted="false">
        <ToolBarContent>
            <MudText Typo="MudBlazor.Typo.body2" Class="no-wrap">
                <span>Track your investment returns against the latest market value.</span><br/>
                <span class="mud-secondary-text">Click on an items "Purchase Price" column to edit the purchase information. Your return on investment (RoI) will then automatically calculate.</span>
            </MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="mud-primary-text">
                <MudTooltip Text="The name of the item. These are a 1:1 mirror of your inventory items; If you have a stack of items, they'll show as a stack here too">
                    <MudTableSortLabel SortLabel="Name" T="ProfileInventoryInvestmentItemDTO">Item</MudTableSortLabel>
                </MudTooltip>
            </MudTh>
            <MudTh Class="mud-primary-text">
                <MudTooltip Text="The price that you paid for the item">
                    <MudTableSortLabel SortLabel="BuyPrice" InitialDirection="MudBlazor.SortDirection.Descending" T="ProfileInventoryInvestmentItemDTO">Purchase Price</MudTableSortLabel>
                </MudTooltip>
            </MudTh>
            <MudTh Class="mud-primary-text">
                <MudTooltip Text="The price you could reasonably expect to sell the item for right now by undercutting the lowest 'buy now' price">
                    <MudTableSortLabel SortLabel="SellLaterPrice" InitialDirection="MudBlazor.SortDirection.Descending" T="ProfileInventoryInvestmentItemDTO">Market Price</MudTableSortLabel>
                </MudTooltip>
            </MudTh>
            @if (State.Profile.ItemIncludeMarketFees)
            {
                <MudTh Class="mud-primary-text">
                    <MudTooltip Text="The fees charged when selling this item on the market">
                        <MudTableSortLabel SortLabel="SellLaterFee" InitialDirection="MudBlazor.SortDirection.Descending" T="ProfileInventoryInvestmentItemDTO">Market Fees</MudTableSortLabel>
                    </MudTooltip>
                </MudTh>
            }
            <MudTh Class="mud-primary-text">
                <MudTooltip Text="The profit or loss you'll make if you sold this item at the listing price, after deducting your investment cost and market fees (if fees are enabled)">
                    <MudTableSortLabel SortLabel="SellLaterProfit" InitialDirection="MudBlazor.SortDirection.Descending" T="ProfileInventoryInvestmentItemDTO">Profit / Loss</MudTableSortLabel>
                </MudTooltip>
            </MudTh>
            <MudTh Class="mud-primary-text">
                <MudTooltip Text="Your return on investment, as a percentage. 0% is break-even, a positive number is profit, negative is a loss">
                    <MudTableSortLabel SortLabel="SellLaterRoI" InitialDirection="MudBlazor.SortDirection.Descending" T="ProfileInventoryInvestmentItemDTO">RoI %</MudTableSortLabel>
                </MudTooltip>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <div class="d-flex flex-row justify-start align-center">
                    <img src="@context.IconUrl" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{context.ItemType.RustItemTypeToShortName()}.png'")" class="icon my-1 mr-2" />
                    <strong>@context.Name</strong>
                    @if (context.Quantity > 1)
                    { 
                        <MudChip T="string" Variant="MudBlazor.Variant.Outlined" Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Default" Class="mud-chip-outlined ml-1">@context.Quantity</MudChip>
                    }
                </div>
            </MudTd>
            <MudTd>
                @switch(context.AcquiredBy)
                {
                    case SteamProfileInventoryItemAcquisitionType.Store: 
                    {
                        <i class="fas fa-fw fa-shopping-cart mr-1" />
                        @if (context.BuyCurrency != null && context.BuyPrice != null)
                        {
                            @context.BuyCurrency.ToPriceString(context.BuyPrice.Value)
                        }
                        else
                        {
                            <span class="mud-secondary-text">(click to modify)</span>
                        }
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Marketplace: 
                    {
                        <i class="fas fa-fw fa-search-dollar mr-1" />
                        @if (context.BuyCurrency != null && context.BuyPrice != null)
                        {
                            @context.BuyCurrency.ToPriceString(context.BuyPrice.Value)
                        }
                        else
                        {
                            <span class="mud-secondary-text">Unknown</span>
                        }
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Trade: 
                    {
                        <i class="fa fa-fw fa-exchange-alt mr-1" />
                        @if (context.BuyCurrency != null && context.BuyPrice != null)
                        {
                            @context.BuyCurrency.ToPriceString(context.BuyPrice.Value)
                        }
                        else
                        {
                            <span class="mud-secondary-text">Unknown</span>
                        }
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Gambling: 
                    {
                        <i class="fa fa-fw fa-dice mr-1" />
                        <span>Gambling <span class="mud-secondary-text">(Free)</span></span>
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Gift: 
                    {
                        <i class="fa fa-fw fa-gift mr-1" />
                        <span>Gift <span class="mud-secondary-text">(Free)</span></span>
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Drop: 
                    {
                        <i class="fa fa-fw fa-gift mr-1" />
                        <span>Game Drop <span class="mud-secondary-text">(Free)</span></span>
                        break;
                    }
                    case SteamProfileInventoryItemAcquisitionType.Bundle: 
                    {
                        <i class="fa fa-fw fa-box mr-1" />
                            <span>Container <span class="mud-secondary-text">(Bag/Crate/Barrel)</span></span>
                        break;
                    }
                    default:
                    {
                        @if (context.BuyCurrency != null && context.BuyPrice != null)
                        {
                            @context.BuyCurrency.ToPriceString(context.BuyPrice.Value)
                        }
                        else
                        {
                            <span class="mud-secondary-text">Unknown</span>
                        }
                        break;
                    }
                }
            </MudTd>
            <MudTd>
                @if (context.SellLaterPrice != null)
                {
                    <div class="d-flex flex-row justify-start align-center">
                        <img src="@($"/images/app/{State.App.Id}/markets/{context.SellLaterTo.ToString().ToLower()}.png")" alt="@context.SellLaterTo.GetDisplayName()" title="@context.SellLaterTo.GetDisplayName()" class="mr-2" style="width:1.5em; height:1.5em" />
                        <span>@State.Currency.ToPriceString(context.SellLaterPrice.Value)</span>
                    </div>
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            @if (State.Profile.ItemIncludeMarketFees)
            {
                <MudTd>
                    @if (context.SellLaterFee != null)
                    {
                        @State.Currency.ToPriceString(context.SellLaterFee.Value) 
                    }
                    else
                    {
                        <span class="mud-secondary-text">—</span>
                    }
                </MudTd>
            }
            <MudTd>
                @if (context.SellLaterPrice != null && (context.SellLaterPrice - (State.Profile.ItemIncludeMarketFees ? context.SellLaterFee ?? 0 : 0)) > 0)
                {
                    @State.Currency.ToPriceString(context.SellLaterPrice.Value - (State.Profile.ItemIncludeMarketFees ? context.SellLaterFee ?? 0 : 0) - (context.BuyPriceLocal ?? 0)) 
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            <MudTd Class="@GetItemClass(context)">
                @if (context.SellLaterPrice != null && context.BuyPriceLocal != null && context.BuyPriceLocal > 0 && (context.SellLaterPrice - (State.Profile.ItemIncludeMarketFees ? context.SellLaterFee ?? 0 : 0)) != 0)
                {
                    @(((int)Math.Round(((decimal)(context.SellLaterPrice.Value - (State.Profile.ItemIncludeMarketFees ? context.SellLaterFee ?? 0 : 0)) / context.BuyPriceLocal.Value) * 100, 0) - 100).ToRoIString()) 
                }
                else
                {
                    <span class="mud-secondary-text">N/A</span>
                }
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd>
                <div class="d-flex flex-row justify-start align-center">
                    <img src="@context.IconUrl" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{context.ItemType.RustItemTypeToShortName()}.png'")" class="icon my-1 mr-2" />
                    <strong>@context.Name</strong>
                    @if (context.Quantity > 1)
                    { 
                        <MudChip T="string" Variant="MudBlazor.Variant.Outlined" Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Default" Class="mud-chip-outlined ml-1">@context.Quantity</MudChip>
                    }
                </div>
            </MudTd>
            <MudTd>
                <div class="d-flex flex-row justify-space-between align-baseline">
                    <MudSelect T="SteamProfileInventoryItemAcquisitionType" Value="@context.AcquiredBy" ValueChanged="@((x) => UpdateItemAcquired(context, x))" Disabled="State.IsPrerendering">
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Store">
                            <i class="fas fa-fw fa-shopping-cart" />
                            <span>Store</span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Marketplace">
                            <i class="fas fa-fw fa-search-dollar" />
                            <span>Marketplace</span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Trade">
                            <i class="fa fa-fw fa-exchange-alt" />
                            <span>Trade</span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Bundle">
                            <i class="fa fa-fw fa-box" />
                            <span>Container <span class="mud-secondary-text">(Bag/Crate/Barrel)</span></span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Gambling">
                            <i class="fa fa-fw fa-dice" />
                            <span>Gambling <span class="mud-secondary-text">(Free)</span></span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Gift">
                            <i class="fa fa-fw fa-gift" />
                            <span>Gift <span class="mud-secondary-text">(Free)</span></span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Drop">
                            <i class="fa fa-fw fa-gift" />
                            <span>Game Drop <span class="mud-secondary-text">(Free)</span></span>
                        </MudSelectItem>
                        <MudSelectItem Value="@SteamProfileInventoryItemAcquisitionType.Other">
                            <span>Other</span>
                        </MudSelectItem>
                    </MudSelect>
                    @if (context.AcquiredBy == SteamProfileInventoryItemAcquisitionType.Store && context.BuyPriceStore != null)
                    {
                        <span class="mx-4">@State.Currency.ToPriceString(context.BuyPriceStore.Value)</span>
                    }
                    else if(context.AcquiredBy != SteamProfileInventoryItemAcquisitionType.Gambling && 
                            context.AcquiredBy != SteamProfileInventoryItemAcquisitionType.Gift && 
                            context.AcquiredBy != SteamProfileInventoryItemAcquisitionType.Drop)
                    {
                        <MudTextField @bind-Value="@context.BuyPriceText" OnDebounceIntervalElapsed="@((e) => UpdateItemPrice(context, e))" DebounceInterval="500" PlaceHolder="Price" AutoFocus="true"
                                      Adornment="@(String.IsNullOrEmpty(State.Currency.SuffixText) ? MudBlazor.Adornment.Start : MudBlazor.Adornment.End)" Disabled="State.IsPrerendering"
                                      AdornmentText="@(String.IsNullOrEmpty(State.Currency.SuffixText) ? State.Currency.PrefixText : State.Currency.SuffixText)" />
                    }
                </div>
            </MudTd>
            <MudTd>
                @if (context.SellLaterPrice != null)
                {
                    <div class="d-flex flex-row justify-start align-center">
                        <img src="@($"/images/app/{State.App.Id}/markets/{context.SellLaterTo.ToString().ToLower()}.png")" alt="@context.SellLaterTo.GetDisplayName()" title="@context.SellLaterTo.GetDisplayName()" class="mr-2" style="width:1.5em; height:1.5em" />
                        <span>@State.Currency.ToPriceString(context.SellLaterPrice.Value)</span>
                    </div>
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            @if (State.Profile.ItemIncludeMarketFees)
            {
                <MudTd>
                    @if (context.SellLaterFee != null)
                    {
                        @State.Currency.ToPriceString(context.SellLaterFee.Value) 
                    }
                    else
                    {
                        <span class="mud-secondary-text">—</span>
                    }
                </MudTd>
            }
            <MudTd>
                @if (context.SellLaterPrice != null && (context.SellLaterPrice - (State.Profile.ItemIncludeMarketFees ? context.SellLaterFee ?? 0 : 0)) > 0)
                {
                    @State.Currency.ToPriceString(context.SellLaterPrice.Value - (State.Profile.ItemIncludeMarketFees ? context.SellLaterFee ?? 0 : 0) - (context.BuyPriceLocal ?? 0)) 
                }
                else
                {
                    <span class="mud-secondary-text">—</span>
                }
            </MudTd>
            <MudTd Class="@GetItemClass(context)">
                @if (context.SellLaterPrice != null && context.BuyPriceLocal != null && context.BuyPriceLocal > 0 && (context.SellLaterPrice - (State.Profile.ItemIncludeMarketFees ? context.SellLaterFee ?? 0 : 0)) > 0)
                {
                    @(((int)Math.Round(((decimal)(context.SellLaterPrice.Value - (State.Profile.ItemIncludeMarketFees ? context.SellLaterFee ?? 0 : 0)) / context.BuyPriceLocal.Value) * 100, 0) - 100).ToRoIString()) 
                }
                else
                {
                    <span class="mud-secondary-text">N/A</span>
                }
            </MudTd>
        </RowEditingTemplate>
        <NoRecordsContent>
            <div class="d-flex flex-column justify-center align-center full-height pa-4">
                <TumbleWeed Light="true" />
                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No items found</MudText>
            </div>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {

    [Parameter]
    public string SteamId { get; set; }
    
    [Parameter]
    public string Filter { get; set; }

    private MudTable<ProfileInventoryInvestmentItemDTO> Table { get; set; }
    
    private Exception LoadingError { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Table != null)
        {
            await Table.ReloadServerData();
        }    }

    private async Task<TableData<ProfileInventoryInvestmentItemDTO>> LoadItems(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            LoadingError = null;
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ProfileInventoryInvestmentItemDTO>>(
                $"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/investment?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&start={state.Page * state.PageSize}&count={state.PageSize}&sortBy={state.SortLabel}&sortDirection={state.SortDirection}"
            );

            return new TableData<ProfileInventoryInvestmentItemDTO>() 
            {
                TotalItems = response.Total, 
                Items = response.Items
            };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading inventory items");
            LoadingError = ex;
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task UpdateItemAcquired(ProfileInventoryInvestmentItemDTO item, SteamProfileInventoryItemAcquisitionType value)
    {
        try 
        {
            item.AcquiredBy = value;
            var useStorePrice = (item.AcquiredBy == SteamProfileInventoryItemAcquisitionType.Store && item.BuyPriceStore != null);
            item.BuyCurrency = (useStorePrice ? State.Currency : item.BuyCurrency);
            item.BuyPrice = (useStorePrice ? item.BuyPriceStore : item.BuyPrice);
            item.BuyPriceLocal = (useStorePrice ? item.BuyPriceStore : item.BuyPrice);
            
            Logger.LogTrace($"Updating buy price for '{item.ItemId}' (aquired: '{item.AcquiredBy}', price: '{item.BuyPrice}', currency: '{item.BuyCurrency?.CultureName}')");
            var response = await Http.PutAsJsonWithDefaultsAsync($"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/item/{item.ItemId}", new UpdateInventoryItemCommand()
            {
                AcquiredBy = item.AcquiredBy,
                CurrencyGuid = item.BuyCurrency?.Guid,
                BuyPrice = item.BuyPrice
            });
            
            if(!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(await response.Content.ReadAsStringAsync(), null, response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error updating item acquired by for '{item.ItemId}' (aquired: '{value}')");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task UpdateItemPrice(ProfileInventoryInvestmentItemDTO item, string value)
    {
        var oldBuyPrice = item.BuyPrice;
        var buyPrice = value.SteamPriceAsInt(culture: CultureInfo.InvariantCulture, useDecimalShortCircuit: false);
        if (buyPrice != oldBuyPrice)
        {
            try 
            {
                item.BuyCurrency = State.Currency;
                item.BuyPrice = buyPrice;
                item.BuyPriceLocal = buyPrice;

                Logger.LogTrace($"Updating buy price for '{item.ItemId}' (raw: '{value}', old: '{oldBuyPrice}', new: '{buyPrice}', currency: '{item.BuyCurrency.CultureName}')");
                var response = await Http.PutAsJsonWithDefaultsAsync($"api/profile/{Uri.EscapeDataString(SteamId)}/inventory/item/{item.ItemId}", new UpdateInventoryItemCommand()
                {
                    CurrencyGuid = State.Currency.Guid,
                    BuyPrice = buyPrice
                });
                
                if(!response.IsSuccessStatusCode)
                {
                    throw new HttpRequestException(await response.Content.ReadAsStringAsync(), null, response.StatusCode);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error updating item buy price for '{item.ItemId}' (value: '{value}')");
            }
            finally
            {
                StateHasChanged();
            }
        }
    }
    
    private string GetItemClass(ProfileInventoryInvestmentItemDTO item, int index = 0)
    {
        if (item.BuyPrice == null || item.BuyPriceLocal <= 0 || item.SellLaterPrice == null)
        {
            return null;
        }
        var roi = ((int)Math.Round(((decimal)(item.SellLaterPrice.Value - (State.Profile.ItemIncludeMarketFees ? item.SellLaterFee ?? 0 : 0)) / item.BuyPriceLocal.Value) * 100, 0));
        if (roi > 100)
        {
            return "mud-success";
        }
        if (roi < 100)
        {
            return "mud-error";
        }
        return null;
    }
    
}
