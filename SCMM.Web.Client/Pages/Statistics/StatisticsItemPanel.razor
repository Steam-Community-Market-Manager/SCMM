@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Statistic
@using SCMM.Web.Client.Shared.Dialogs.Items
@using Syncfusion.Blazor.Charts
@inherits PersistentComponent
@inject ILogger<StatisticsItemPanel> Logger
@inject IDialogService Dialogs
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<MudGrid Spacing="2">
    
    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemWorkshopAcceptedTracking) == true)
    {
        <MudItem xs="12">
            <StatisticsPanel Icon="fas fa-fw fa-tshirt mr-1" Title="Most Accepted Item Type" Subtitle="Which item types have the most number of accepted in-game items?" Dense="true">
                <ActionContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudDatePicker Date="ItemTypeDistributionDateStart" Label="From Year" OpenTo="OpenTo.Year" DateFormat="yyyy" FixDay="1" FixMonth="1" DateChanged="@(async (x) => await LoadItemTypeDistribution(x, null))" />
                        <MudText Typo="Typo.h6"><i class="fas fa-fw fa-arrow-right"></i></MudText>
                        <MudDatePicker Date="ItemTypeDistributionDateEnd" Label="To Year" OpenTo="OpenTo.Year" DateFormat="yyyy" FixDay="31" FixMonth="12" DateChanged="@(async (x) => await LoadItemTypeDistribution(null, x))" />
                    </MudStack>
                </ActionContent>
                <ChildContent>
                    @if (ItemTypeDistributionChartData == null)
                    {
                        <div class="d-flex align-center justify-center full-width full-height pa-2">
                            <Loading Message="Loading item type distribution..." />
                        </div>
                    }
                    else
                    {
                        <SfChart ID="ItemTypeDistribution" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" EnableSideBySidePlacement="false" Width="100%" Height="100%">
                            <ChartArea>
                                <ChartAreaBorder Width="0"></ChartAreaBorder>
                            </ChartArea>
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="45" LabelIntersectAction="LabelIntersectAction.Trim"
                                               ZoomFactor="0.3" ZoomPosition="0" EnableScrollbarOnZooming="true" EnableAutoIntervalOnZooming="true">
                                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                <ChartAxisScrollbarSettings Enable="true"></ChartAxisScrollbarSettings>
                            </ChartPrimaryXAxis>
                            <ChartPrimaryYAxis Title="Number of items">
                                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                            </ChartPrimaryYAxis>
                            <ChartSeriesCollection>
                                @*
                                <ChartSeries DataSource="@ItemTypeDistributionChartData" ColumnWidth="0.5" XName="ItemType" YName="Total" Name="Total Items" Type="ChartSeriesType.Column">
                                    <ChartMarker>
                                        <ChartDataLabel Visible="true" Alignment="Alignment.Center" EnableRotation="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                        </ChartDataLabel>
                                    </ChartMarker>
                                </ChartSeries>
                                <ChartSeries DataSource="@ItemTypeDistributionChartData" ColumnWidth="0.4" XName="ItemType" YName="Submitted" Name="Submitted Items" Type="ChartSeriesType.Column">
                                    <ChartMarker>
                                        <ChartDataLabel Visible="true" EnableRotation="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                        </ChartDataLabel>
                                    </ChartMarker>
                                </ChartSeries>
                                <ChartSeries DataSource="@ItemTypeDistributionChartData" ColumnWidth="0.3" XName="ItemType" YName="Accepted" Name="Accepted Items" Type="ChartSeriesType.Column">
                                    <ChartMarker>
                                        <ChartDataLabel Visible="true" EnableRotation="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                        </ChartDataLabel>
                                    </ChartMarker>
                                </ChartSeries>
                                *@
                                <ChartSeries DataSource="@ItemTypeDistributionChartData" XName="ItemType" YName="Accepted" Name="Accepted Items" Type="ChartSeriesType.Column">
                                    <ChartMarker>
                                        <ChartDataLabel Visible="true" EnableRotation="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                        </ChartDataLabel>
                                    </ChartMarker>
                                </ChartSeries>
                            </ChartSeriesCollection>
                            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
                            <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                            <ChartLegendSettings Visible="true"></ChartLegendSettings>
                        </SfChart>
                    }
                </ChildContent>
            </StatisticsPanel>
        </MudItem>   
    }

    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemWorkshop) == true)
    {
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-cubes-stacked mr-1" Title="Highest Estimated Item Supply" Subtitle="Which items have the highest estimated total supply?" Dense="true">
                <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:30vh;" Class="flex-grow-1">
                    <tbody>
                        <Virtualize ItemsProvider="LoadItemMostSupply" Context="item" SpacerElement="tr" OverscanCount="5">
                            <EmptyContent>
                                <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                    <TumbleWeed Light="true" />
                                    <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                                </div>
                            </EmptyContent>
                            <ItemContent>
                                <tr @onclick="@((_) => ShowItemEstimatedSupplyDialog(item))" class="clickable">
                                    <td>
                                        <div class="d-flex flex-row justify-start align-center">
                                            <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                        </div>
                                    </td>
                                    <td class="text-right">
                                        <MudText Typo="Typo.body2" Class="no-wrap">
                                            <span>@item.SupplyTotalEstimated.ToQuantityString()+ estimated supply</span>
                                        </MudText>
                                    </td>
                                </tr>
                            </ItemContent>
                            <Placeholder>
                                <tr>
                                    <td>
                                        <div class="d-flex flex-row justify-start align-center">
                                            <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                        </div>
                                    </td>
                                    <td class="text-right">—</td>
                                </tr>
                            </Placeholder>
                        </Virtualize>
                    </tbody>
                </MudSimpleTable>
            </StatisticsPanel>
        </MudItem>
    }

    <MudItem xs="12" md="6" xl="3">
        <StatisticsPanel Icon="fas fa-fw fa-tshirt mr-1" Title="Largest Item Collections" Subtitle="Which item collections have the most number of items?" Dense="true">
            <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:30vh;" Class="flex-grow-1">
                <tbody>
                    <Virtualize ItemsProvider="LoadItemsLargestCollections" Context="item" SpacerElement="tr" OverscanCount="5">
                        <EmptyContent>
                            <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                <TumbleWeed Light="true" />
                                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                            </div>
                        </EmptyContent>
                        <ItemContent>
                            <tr @onclick="@((_) => ShowItemCollectionDialog(item))" class="clickable">
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2">@item.Name (@item.Items.ToQuantityString())</MudText>
                                    </div>
                                </td>
                                <td class="text-right">
                                    <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyNowPrice.Value)</MudText>
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr>
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                    </div>
                                </td>
                                <td class="text-right">—</td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                </tbody>
            </MudSimpleTable>
        </StatisticsPanel>
    </MudItem>
    
    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemWorkshop) == true)
    {
        <MudItem xs="12" md="6" xl="3">
            <StatisticsPanel Icon="fas fa-fw fa-user mr-1" Title="Largest Item Creators" Subtitle="Which skin creators have the most accepted in-game items?" Dense="true">
                <MudSimpleTable Dense="true" FixedHeader="true" Style="height:30vh;" Class="flex-grow-1">
                    <tbody>
                        <Virtualize ItemsProvider="LoadProfilesLargestCreators" Context="item" SpacerElement="tr" OverscanCount="5">
                            <EmptyContent>
                                <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                    <TumbleWeed Light="true" />
                                    <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                                </div>
                            </EmptyContent>
                            <ItemContent>
                                <tr @onclick="@((_) => ShowProfileItemsDialog(item))" class="clickable">
                                    <td>
                                        <div class="d-flex flex-row justify-start align-center">
                                            <img src="@item.AvatarUrl" class="mr-1" style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2">@item.Name</MudText>
                                        </div>
                                    </td>
                                    <td class="text-right">
                                        <MudText Typo="Typo.body2" Class="no-wrap">@item.Items.ToQuantityString() item(s)</MudText>
                                    </td>
                                </tr>
                            </ItemContent>
                            <Placeholder>
                                <tr>
                                    <td>
                                        <div class="d-flex flex-row justify-start align-center">
                                            <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                        </div>
                                    </td>
                                    <td class="text-right">—</td>
                                </tr>
                            </Placeholder>
                        </Virtualize>
                    </tbody>
                </MudSimpleTable>
            </StatisticsPanel>
        </MudItem>
    }
    
</MudGrid>

@code {

    private IEnumerable<ItemTypeDistributionChartPointDTO> ItemTypeDistributionChartData { get; set; }

    private DateTime? ItemTypeDistributionDateStart = new DateTime(2015, 1, 1);
    private DateTime? ItemTypeDistributionDateEnd = DateTime.Now.Date;

    protected override async Task OnLoadStateAsync()
    {
        ItemTypeDistributionChartData = await RestoreFromStateOrLoad(nameof(ItemTypeDistributionChartData), async () =>
        {
            try
            {
                return await LoadItemTypeDistribution();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Unable to load item type distribution");
                Snackbar.Add($"Unable to load item type distribution. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(ItemTypeDistributionChartData), ItemTypeDistributionChartData);
        return Task.CompletedTask;
    }

    private void ViewItem(ItemDescriptionDTO item)
    {
        ExternalNavigationManager.NavigateToItemAsync(item);
    }

    private void ShowItemEstimatedSupplyDialog(ItemSupplyStatisticDTO item)
    {
        Dialogs.Show<ViewItemEstimatedSupplyDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = item.Name,
            ["ItemUrl"] = $"/api/item/{item.Id}"
        });
    }

    private void ShowItemCollectionDialog(DashboardAssetCollectionDTO collection)
    {
        Dialogs.Show<ViewItemCollectionDialog>(null, parameters: new DialogParameters()
        {
            ["CollectionName"] = $"{collection.Name} Collection",
            ["CollectionUrl"] = $"api/item/collection/{collection.Name}?creatorId={collection.CreatorId}"
        });
    }

    private void ShowProfileItemsDialog(ProfileAcceptedItemsStatisticDTO profile)
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = $"Items by {profile.Name}",
            ["ListUrl"] = $"api/item?creatorId={profile.SteamId}&count=-1",
            ["SortBy"] = nameof(ItemDescriptionWithPriceDTO.TimeAccepted),
            ["SortDirection"] = MudBlazor.SortDirection.Descending
        });
    }

    private string GetItemStyles(IItemDescription item)
    {
        return $"color: {item.ForegroundColour}";
    }

    protected async Task<IEnumerable<ItemTypeDistributionChartPointDTO>> LoadItemTypeDistribution(DateTime? start = null, DateTime? end = null)
    {
        try
        {
            ItemTypeDistributionChartData = null;
            if (start != null)
            {
                ItemTypeDistributionDateStart = start.Value;
            }
            if (end != null)
            {
                ItemTypeDistributionDateEnd = end.Value;
            }

            StateHasChanged();

            return ItemTypeDistributionChartData = await Http.GetFromJsonWithDefaultsAsync<IEnumerable<ItemTypeDistributionChartPointDTO>>($"api/stats/items/typeDistribution?fromYear={ItemTypeDistributionDateStart?.Year}&toYear={ItemTypeDistributionDateEnd?.Year}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to load item type distribution");
            Snackbar.Add($"Unable to load item type distribution. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemSupplyStatisticDTO>> LoadItemMostSupply(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemSupplyStatisticDTO>>($"api/stats/items/mostSupply?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemSupplyStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most supply' item statistics");
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<DashboardAssetCollectionDTO>> LoadItemsLargestCollections(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<DashboardAssetCollectionDTO>>($"api/stats/items/largestCollections?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<DashboardAssetCollectionDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'largest collections' item statistics");
            throw;
        }
    }
    
    protected async ValueTask<ItemsProviderResult<ProfileAcceptedItemsStatisticDTO>> LoadProfilesLargestCreators(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ProfileAcceptedItemsStatisticDTO>>($"api/stats/profiles/largestCreators?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ProfileAcceptedItemsStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'largest creators' profile statistics");
            throw;
        }
    }
    
}
