@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Analytic
@using SCMM.Web.Data.Models.UI.Statistic
@using Syncfusion.Blazor.Charts
@inherits PersistentComponent
@inject ILogger<StatisticsMarketPanel> Logger
@inject ISnackbar Snackbar
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

@{
    var volumeColour = "#66c0f4";
    var valueColour = "#388e3c";
}
<MudGrid Spacing="2">
    
    <MudItem xs="12" xl="12">
        <StatisticsPanel>
            <MudStack Spacing="0" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceEvenly" Class="flex-wrap">
                <MudPaper Elevation="0" Class="ma-2">
                    <MudStack Row="true">
                        <MudText Typo="Typo.h3" Color="Color.Secondary">
                            <i class="fas fa-fw fa-scale-unbalanced"></i>
                        </MudText>
                        <MudStack Spacing="0">
                            @if (MarketTotals?.Listings != null)
                            {
                                <MudText Typo="Typo.h6" Color="Color.Default">@MarketTotals.Listings.ToQuantityString()</MudText>
                            }
                            else
                            {
                                <MudSkeleton SkeletonType="MudBlazor.SkeletonType.Text"></MudSkeleton>
                            }
                            <MudText Typo="Typo.caption" Color="Color.Secondary">items are currently listed on the market</MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>
                <MudPaper Elevation="0" Class="ma-2">
                    <MudStack Row="true">
                        <MudText Typo="Typo.h3" Color="Color.Secondary">
                            <i class="fas fa-fw fa-sack-dollar"></i>
                        </MudText>
                        <MudStack Spacing="0">
                            @if (MarketTotals?.Listings != null)
                            {
                                <MudText Typo="Typo.h6" Color="Color.Default">@State.Currency.ToPriceString(MarketTotals.ListingsMarketValue)</MudText>
                            }
                            else
                            {
                                <MudSkeleton SkeletonType="MudBlazor.SkeletonType.Text"></MudSkeleton>
                            }
                            <MudText Typo="Typo.caption" Color="Color.Secondary">is the current total value of all listed market items</MudText>
                        </MudStack>
                    </MudStack>
                </MudPaper>
                @if (MarketTotals?.VolumeLast24hrs != null)
                {
                    <MudPaper Elevation="0" Class="ma-2">
                        <MudStack Row="true">
                            <MudText Typo="Typo.h3" Color="Color.Secondary">
                                <i class="fas fa-fw fa-people-arrows"></i>
                            </MudText>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h6" Color="Color.Default">@MarketTotals.VolumeLast24hrs.Value.ToQuantityString()</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">items have been brought/sold on the market in the last 24hrs</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                }
                @if (MarketTotals?.VolumeLast24hrs != null)
                {
                    <MudPaper Elevation="0" Class="ma-2">
                        <MudStack Row="true">
                            <MudText Typo="Typo.h3" Color="Color.Secondary">
                                <i class="fas fa-fw fa-money-bill-transfer"></i>
                            </MudText>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h6" Color="Color.Default">@State.Currency.ToPriceString(MarketTotals.VolumeMarketValueLast24hrs.Value)</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">has been spent buying/selling items on the market in the last 24hrs</MudText>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                }
            </MudStack>
        </StatisticsPanel>
    </MudItem>

    <MudItem xs="12" xl="12">
        <StatisticsPanel>
            <div class="d-flex flex-row flex-wrap">
                <div class="d-flex flex-column flex-grow-1">
                    <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="d-flex align-center">
                        <img src="@State.App.IconUrl" class="mr-2" style="width: 1em; height: 1em" />
                        <span>@State.App.Name Index Fund</span>
                    </MudText>
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                        <span>If there was an <MudLink Typo="MudBlazor.Typo.body2" Href="https://www.investopedia.com/terms/i/indexfund.asp" Target="_blank">index fund</MudLink> that tracked the performance of all market items, how is it performing?</span>
                    </MudText>
                </div>
                <div class="pa-1 flex-shrink-1">
                    <MudButtonGroup Variant="Variant.Text" OverrideStyles="false">
                        <MudButton OnClick="@(() => LoadMarketIndexFund(7))" Color="@(MarketIndexFundMaxDays == 7 ? Color.Primary : Color.Secondary)" Class="px-2" Disabled="State.IsPrerendering">Week</MudButton>
                        <MudButton OnClick="@(() => LoadMarketIndexFund(30))" Color="@(MarketIndexFundMaxDays == 30 ? Color.Primary : Color.Secondary)" Class="px-2" Disabled="State.IsPrerendering">Month</MudButton>
                        <MudButton OnClick="@(() => LoadMarketIndexFund(365))" Color="@(MarketIndexFundMaxDays == 365 ? Color.Primary : Color.Secondary)" Class="px-2" Disabled="State.IsPrerendering">Year</MudButton>
                        <MudButton OnClick="@(() => LoadMarketIndexFund(-1))" Color="@(MarketIndexFundMaxDays == -1 ? Color.Primary : Color.Secondary)" Class="px-2" Disabled="State.IsPrerendering">Lifetime</MudButton>
                    </MudButtonGroup>
                </div>
            </div>
            <div class="d-flex flex-column justify-stretch align-stretch relative" style="height:60vh">
                @if (MarketIndexFundChartData == null)
                {
                    <div class="d-flex align-center justify-center full-width full-height pa-2">
                        <Loading Message="Loading market index fund..." />
                    </div>
                }
                else
                {
                    <SfChart ID="MarketIndexFund" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" Width="100%" Height="100%">
                        <ChartArea>
                            <ChartAreaBorder Width="0"></ChartAreaBorder>
                        </ChartArea>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Auto" Format="d-MMM-yy" LabelIntersectAction="LabelIntersectAction.Rotate90" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                        </ChartPrimaryXAxis>
                        <ChartAxes>
                            <ChartAxis Name="TotalSalesVolumeAxis" RowIndex="0" LabelFormat="#,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift" OpposedPosition="true" />
                            <ChartAxis Name="TotalSalesValueAxis" RowIndex="1" LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}")" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />
                            <ChartAxis Name="AverageItemValueAxis" RowIndex="3" LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText}")" EdgeLabelPlacement="EdgeLabelPlacement.Shift" />
                        </ChartAxes>
                        <ChartRows>
                            <ChartRow Height="25%"></ChartRow>
                            <ChartRow Height="35%"></ChartRow>
                            <ChartRow Height="5%"></ChartRow>
                            <ChartRow Height="35%"></ChartRow>
                        </ChartRows>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@MarketIndexFundChartData" YAxisName="TotalSalesVolumeAxis" Name="Daily Sales Volume" XName="Date" YName="TotalSalesVolume" Fill="@volumeColour" Type="ChartSeriesType.StepArea">
                            </ChartSeries>
                            <ChartSeries DataSource="@MarketIndexFundChartData" YAxisName="TotalSalesValueAxis" Name="Daily Sales Value" XName="Date" YName="TotalSalesValue" Fill="@valueColour" Type="ChartSeriesType.Line">
                            </ChartSeries>
                            <ChartSeries DataSource="@MarketIndexFundChartData" YAxisName="AverageItemValueAxis" Name="@($"{@State.App.Name} Index Fund Value")" XName="Date" YName="AverageItemValue" Fill="@State.App.PrimaryColor" Type="ChartSeriesType.Line">
                            </ChartSeries>
                        </ChartSeriesCollection>
                        <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="false" EnablePinchZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
                        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
                        <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="true"></ChartLegendSettings>
                    </SfChart>
                }
            </div>
            <div>
                <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" GutterBottom>
                    <span>Based on Dr. Blake Porter's <MudLink Typo="MudBlazor.Typo.caption" Href="https://www.blakeporterneuro.com/video-game-skin-analysis-rust/" Target="_blank">"Video Game Skin Analysis"</MudLink> (2019).</span><br />
                    <span>For every day there are items trading on the Steam Community Market we get the total number of sales and median sale price of all traded items for that day.</span><br />
                    <span>The index fund value is calculated as '<code>sales[day].groupBy(item).avg(item.median_sales_price)</code>'. The cumulative value is calculated as '<code>sales[day].sum(median_sales_price * sales_volume)</code>'.</span><br />
                </MudText>
            </div>
        </StatisticsPanel>
    </MudItem>

    <MudItem xs="12" md="6" xl="3">
        <StatisticsPanel Icon="fas fa-fw fa-fire mr-1" Title="Hot Right Now" Subtitle="Which items have been bought/sold the most in the past 24hrs?" Dense="true">
            <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:30vh;" Class="flex-grow-1">
                <tbody>
                    <Virtualize ItemsProvider="LoadItemsMostDemanded" Context="item" SpacerElement="tr" OverscanCount="5">
                        <EmptyContent>
                            <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                <TumbleWeed Light="true" />
                                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                            </div>
                        </EmptyContent>
                        <ItemContent>
                            <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                    </div>
                                </td>
                                <td class="text-right">
                                    <MudText Typo="Typo.body2" Class="no-wrap">@item.Demand.ToQuantityString() sold today</MudText>
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr>
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                    </div>
                                </td>
                                <td class="text-right">—</td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                </tbody>
            </MudSimpleTable>
        </StatisticsPanel>
    </MudItem>

    <MudItem xs="12" md="6" xl="3">
        <StatisticsPanel Icon="fas fa-fw fa-arrow-up mr-1" Title="Stonking" Subtitle="Which items recently reached their all-time highest value?" Dense="true">
            <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:30vh;" Class="flex-grow-1">
                <tbody>
                    <Virtualize ItemsProvider="LoadItemsAllTimeHigh" Context="item" SpacerElement="tr" OverscanCount="5">
                        <EmptyContent>
                            <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                <TumbleWeed Light="true" />
                                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                            </div>
                        </EmptyContent>
                        <ItemContent>
                            <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                    </div>
                                </td>
                                <td class="text-right">
                                    <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyNowPrice)</MudText>
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr>
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                    </div>
                                </td>
                                <td class="text-right">—</td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                </tbody>
            </MudSimpleTable>
        </StatisticsPanel>
    </MudItem>

    <MudItem xs="12" md="6" xl="3">
        <StatisticsPanel Icon="fas fa-fw fa-arrow-down mr-1" Title="Crashing" Subtitle="Which items recently reached their all-time lowest value?" Dense="true">
            <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:30vh;" Class="flex-grow-1">
                <tbody>
                    <Virtualize ItemsProvider="LoadItemsAllTimeLow" Context="item" SpacerElement="tr" OverscanCount="5">
                        <EmptyContent>
                            <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                <TumbleWeed Light="true" />
                                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                            </div>
                        </EmptyContent>
                        <ItemContent>
                            <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                    </div>
                                </td>
                                <td class="text-right">
                                    <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyNowPrice)</MudText>
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr>
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                    </div>
                                </td>
                                <td class="text-right">—</td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                </tbody>
            </MudSimpleTable>
        </StatisticsPanel>
    </MudItem>

    <MudItem xs="12" md="6" xl="3">
        <StatisticsPanel Icon="fas fa-fw fa-dollar-sign mr-1" Title="Most Expensive" Subtitle="Which are the most expensive items on the market?" Dense="true">
            <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Style="height:30vh;" Class="flex-grow-1">
                <tbody>
                    <Virtualize ItemsProvider="LoadItemMostExpensive" Context="item" SpacerElement="tr" OverscanCount="5">
                        <EmptyContent>
                            <div class="d-flex flex-column justify-center align-center full-height pa-4">
                                <TumbleWeed Light="true" />
                                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">No data</MudText>
                            </div>
                        </EmptyContent>
                        <ItemContent>
                            <tr @onclick="@((_) => ViewItem(item))" class="clickable">
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Style="@GetItemStyles(item)">@item.Name</MudText>
                                    </div>
                                </td>
                                <td class="text-right">
                                    <MudText Typo="Typo.body2" Class="no-wrap">@State.Currency.ToPriceString(item.BuyNowPrice)</MudText>
                                </td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr>
                                <td>
                                    <div class="d-flex flex-row justify-start align-center">
                                        <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                    </div>
                                </td>
                                <td class="text-right">—</td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                </tbody>
            </MudSimpleTable>
        </StatisticsPanel>
    </MudItem>

</MudGrid>

@code {

    private MarketTotalsStatisticDTO MarketTotals { get; set; }

    private IEnumerable<MarketIndexFundChartPointDTO> MarketIndexFundChartData { get; set; }
    
    private int MarketIndexFundMaxDays { get; set; }

    protected override async Task OnLoadStateAsync()
    {
        MarketTotals = await RestoreFromStateOrLoad(nameof(MarketTotals), async () =>
        {
            try
            {
                return await Http.GetFromJsonWithDefaultsAsync<MarketTotalsStatisticDTO>($"api/stats/market/totals");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error loading market totals");
                Snackbar.Add($"Unable to load market totals. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
        MarketIndexFundChartData = await RestoreFromStateOrLoad(nameof(MarketIndexFundChartData), async () =>
        {
            try
            {
                return await LoadMarketIndexFund();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error loading market index fund");
                Snackbar.Add($"Unable to load market index fund {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(MarketTotals), MarketTotals);
        PersistToState(nameof(MarketIndexFundChartData), MarketIndexFundChartData);
        return Task.CompletedTask;
    }

    private void ViewItem(ItemDescriptionDTO item)
    {
        ExternalNavigationManager.NavigateToItemAsync(item);
    }

    private string GetItemStyles(IItemDescription item)
    {
        return $"color: {item.ForegroundColour}";
    }

    protected async Task<IEnumerable<MarketIndexFundChartPointDTO>> LoadMarketIndexFund(int maxDays = 365)
    {
        try
        {
            MarketIndexFundMaxDays = maxDays;
            MarketIndexFundChartData = null;
            StateHasChanged();

            return MarketIndexFundChartData = await Http.GetFromJsonWithDefaultsAsync<IEnumerable<MarketIndexFundChartPointDTO>>($"api/stats/market/indexFund?maxDays={maxDays}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to list market index fund");
            Snackbar.Add($"Unable to load market index fund. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemSupplyDemandStatisticDTO>> LoadItemsMostDemanded(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemSupplyDemandStatisticDTO>>($"api/stats/items/mostDemanded?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemSupplyDemandStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most demanded' item statistics");
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemValueStatisticDTO>> LoadItemsAllTimeHigh(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemValueStatisticDTO>>($"api/stats/items/allTimeHigh?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemValueStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time high' item statistics");
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemValueStatisticDTO>> LoadItemsAllTimeLow(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemValueStatisticDTO>>($"api/stats/items/allTimeLow?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemValueStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'all time low' item statistics");
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<ItemValueStatisticDTO>> LoadItemMostExpensive(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemValueStatisticDTO>>($"api/stats/items/mostExpensive?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemValueStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'most expensive' item statistics");
            throw;
        }
    }

}
