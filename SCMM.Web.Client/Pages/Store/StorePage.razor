@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Steam.Data.Models.Store.Requests.Html;
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Store
@using SCMM.Web.Client.Shared.Dialogs.Items
@page "/store"
@page "/store/{StoreId}"
@page "/steam/store"
@inherits PersistentComponent
@inject ILogger<StorePage> Logger
@inject IDialogService Dialogs
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

@if (StoreList == null)
{
    @if (StoreException == null)
    {
        <Loading Message="Loading store list..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
    }
    else
    {
        <Alert Exception="@StoreException" />
    }
}
else if (StoreList.Any())
{
    <MudTabs Elevation="0" Position="MudBlazor.Position.Bottom" ActivePanelIndex="StoreIndex" ActivePanelIndexChanged="OnSelectedStoreChanged" KeepPanelsAlive="false" Class="mud-tabs-transparent">
        <ChildContent>
		    @foreach (var store in StoreList)
            {
                <MudTabPanel ID="@store.Id" Tag="@store" Text="@GetStoreTitle(store)" Disabled="State.IsPrerendering" />
            }
	    </ChildContent>
	    <TabPanelHeader>
            @if ((context.Tag as StoreIdentifierDTO).Start != null)
            {
                if (!String.IsNullOrEmpty((context.Tag as StoreIdentifierDTO).Name))
                {
                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="pl-2">@((context.Tag as StoreIdentifierDTO).Name)</MudText>
                }
            }
            else
            {
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="pl-2"><i class="fas fa-thumbtack"></i></MudText>
            }
        </TabPanelHeader>
	    <Header>
            <MudIconButton Size="MudBlazor.Size.Small" Icon="fa fa-fw fa-history" OnClick="@(() => ShowStoreListDialog(StoreList))" Class="pa-2 pr-4" />
	    </Header>
    </MudTabs>
    <PageContainer Title="@($"{State?.App?.Name} Store - {(Store?.Start?.ToString("d") ?? Store?.Name ?? "Store")}")" Class="mb-6 ml-6 mr-6"
                   Description="@(Store != null ? $"Store contains {Store.Items.Length} item(s) with a total cost of {State.Currency?.ToPriceString(Store.Items.Sum(x => x.StorePrice ?? 0))}." : null)"
                   ImageUrl="@Store?.ItemsThumbnailUrl">
        <MudGrid Spacing="2">
            @if (Store == null)
            {
                <MudItem xs="12">
                    @if (StoreException == null)
                    {
                        <Loading Message="Loading store..." Size="MudBlazor.Size.Large" Typo="MudBlazor.Typo.h6" />
                    }
                    else
                    {
                        <Alert Exception="@StoreException" />
                    }
                </MudItem>
            }
            else
            {
                @if (Store.Notes != null)
                {
                    @foreach (var note in Store.Notes)
                    {
                        <MudItem xs="12">
                            <MudAlert Variant="MudBlazor.Variant.Text" Severity="MudBlazor.Severity.Warning" Icon="fas fa-fw fa-info-circle" Class="mud-alert-outlined-warning">
                                <MarkdownView Content="@note" />
                            </MudAlert>
                        </MudItem>
                    }
                }
                
                @if (Store.Start != null)
                {
                    <MudItem xs="12">
                        <StoreAnalyticsPanel Store="@Store" />
                    </MudItem>
                }
                
                @if (State.IsInRole(Roles.Administrator) || (Store.IsDraft && State.IsInRole(Roles.Contributor)))
                {
                    <MudItem xs="12">
                        <MudPaper Outlined="true" Class="d-flex flex-row flex-wrap justify-center align-center full-height pa-2">
                            <MudAutocomplete T="ItemDescriptionWithPriceDTO" @bind-Value="LinkedItem" SearchFunc="@SearchItem" ToStringFunc="@(x => x == null ? null : x.Name)" Variant="Variant.Outlined" Margin="Margin.Dense" 
                                             Placeholder="Add an item to this store..." Class="flex-grow-0 flex-shrink-0 pl-1 pr-2" Disabled="State.IsPrerendering">
                                <ItemTemplate Context="item">
                                    <div class="d-flex flex-row justify-start align-center">
                                        <img src="@item.IconUrl" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{item.ItemType.RustItemTypeToShortName()}.png'")" class="mr-1" style="width:32px; height:32px;" />
                                        <MudText Style="@($"color: {item.ForegroundColour}")">@item.Name</MudText>
                                    </div>
                                </ItemTemplate>
                            </MudAutocomplete>
                            @if (Store.Start != null)
                            {
                                <MudNumericField @bind-Value="LinkedItemStorePrice" Format="F2" Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-dollar-sign" Variant="Variant.Outlined" Margin="Margin.Dense" 
                                                 HideSpinButtons="true" Class="flex-grow-0 flex-shrink-0 pl-1 pr-2" Disabled="State.IsPrerendering" />
                            }
                            <MudTooltip Text="Add this item to the store">
                                <MudButton OnClick="@LinkItem" Variant="Variant.Text" Color="Color.Primary" StartIcon="fas fa-fw fa-plus" Class="flex-grow-0 flex-shrink-0 pa-2" Disabled="State.IsPrerendering">Add</MudButton>
                            </MudTooltip>
                        </MudPaper>
                    </MudItem>
                }

                @if (!Store.Items.Any())
                {
                    <MudItem xs="12">
                        <MudPaper Outlined="true" Class="d-flex flex-column justify-center align-center full-height pa-4">
                            <TumbleWeed />
                            <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">empty, check back later</MudText>
                        </MudPaper>
                    </MudItem>
                }
                
                @foreach (var item in Store.Items)
                {
                    <MudItem xs="12" sm="6" lg="3">
                        <div class="store-item full-height">
                            <MudCard Outlined="true" Class="d-flex flex-column full-height">
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudTooltip Text="@($"View more items created by {item.CreatorName}")">
                                            <MudAvatar Size="MudBlazor.Size.Medium" Class="clickable" @onclick="@(() => ShowCreatorItemsDialog(item))">
                                                <MudImage Src="@item.CreatorAvatarUrl" />
                                            </MudAvatar>
                                        </MudTooltip>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <div>
                                            <MudText Typo="MudBlazor.Typo.h6" Style="@($"color: {item.ForegroundColour}")">@item.Name</MudText>
                                        </div>
                                        @if (!String.IsNullOrEmpty(item.ItemType))
                                        {
                                            <div class="mt-n1">
                                                <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Secondary">@item.ItemType</MudText>
                                            </div>
                                        }
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <div class="pa-1 d-flex align-center justify-center">
                                            @if (State.IsInRole(Roles.Administrator) || (Store.IsDraft && item.IsDraft && State.IsInRole(Roles.Contributor)))
                                            {
                                                <MudTooltip Text="Remove this item from the store">
                                                    <MudFab OnClick="@(() => UnlinkItem(item))" Color="Color.Error" Size="Size.Medium" StartIcon="fas fa-fw fa-trash-alt" Class="mr-3" Disabled="State.IsPrerendering"></MudFab>
                                                </MudTooltip>
                                            }
                                            @if (Store.End == null && item.IsStillAvailableFromStore && item.TopSellerIndex != null)
                                            {
                                                <div class="text-centered">
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Secondary" Style="@GetItemTopSellerStyles(item.TopSellerIndex)">
                                                            <i class="fas fa-fw fa-trophy"/>
                                                        </MudText>
                                                        <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" Style="@GetItemTopSellerStyles(item.TopSellerIndex)">
                                                            <span>@(item.TopSellerIndex.Value + 1)@((item.TopSellerIndex.Value + 1).GetPositionSuffix())</span>
                                                        </MudText>
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        <span>This item is currently the @(item.TopSellerIndex.Value + 1)@((item.TopSellerIndex.Value + 1).GetPositionSuffix()) highest top seller for sales made in the last few hours</span>
                                                    </TooltipContent>
                                                </MudTooltip>
                                                </div>
                                            }
                                        </div>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent Class="d-flex flex-grow-1">
                                    <MudGrid Spacing="1" Class="flex-grow-1">

                                        <MudItem xs="12" xl="5" Class="d-flex flex-column flex-grow-1">
                                            <MudTooltip Text="View more item details" RootClass="d-flex flex-grow-1 align-center justify-center full-width full-height">
                                                <div class="d-flex flex-grow-1 align-center justify-center hover-zoom hover-zoom-extra ">
                                                    <img src="@item.IconUrl" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{item.ItemType.RustItemTypeToShortName()}.png'")" @onclick="@(() => ShowItemDetailsDialog(item))" class="@($"{GetItemIconClass(item)} icon full-width pa-2")" style="@($"{GetItemIconStyles(item)}")" />
                                                </div>
                                            </MudTooltip>
                                            <div class="d-flex flex-column flex-grow-0 flex-shrink-1 align-center justify-center">
                                                @if (item.MarketPrice > 0 && !item.IsBanned)
                                                { 
                                                    @if (item.MarketPrice > 0 && item.StorePrice > 0)
                                                    {
                                                        @if (item.MarketPrice > item.StorePrice)
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-up mr-1" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice.Value)" 
                                                                     Color="MudBlazor.Color.Success" Variant="MudBlazor.Variant.Filled" Class="mt-0" />
                                                        }
                                                        else if (item.MarketPrice < item.StorePrice)
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-arrow-down mr-1" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice.Value)" 
                                                                     Color="MudBlazor.Color.Error" Variant="MudBlazor.Variant.Filled" Class="mt-0" />
                                                        }
                                                        else
                                                        {
                                                            <MudChip Size="MudBlazor.Size.Small" Text="@item.MarketPrice.Value.ToMovementString(item.StorePrice.Value)" 
                                                                     Color="MudBlazor.Color.Secondary" Variant="MudBlazor.Variant.Filled" Class="mt-0" />
                                                        }
                                                    }
                                                    <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="no-wrap">
                                                        <span>@State.Currency.ToPriceString(item.MarketPrice ?? 0)</span>
                                                        @if (item.MarketPrice > 0 && item.StorePrice > 0)
                                                        {
                                                            <span class="mud-secondary-text text-line-through px-2">@State.Currency.ToPriceString(item.StorePrice.Value, dense: true)</span>
                                                        }
                                                    </MudText>
                                                }
                                                else if (item.StorePrice > 0)
                                                {
                                                    <MudText Typo="MudBlazor.Typo.h6" Color="@(item.IsStillAvailableFromStore ? MudBlazor.Color.Default : MudBlazor.Color.Secondary)" Class="@($"no-wrap {(item.IsStillAvailableFromStore ? null : "text-line-through")}")">
                                                        <span>@State.Currency.ToPriceString(item.StorePrice.Value)</span>
                                                    </MudText>
                                                }
                                            </div>
                                        </MudItem>

                                        <MudItem xs="12" xl="7" Class="d-flex flex-column flex-grow-1">
                                            @if (!item.HasWorkshopFile)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="mb-2">
                                                    <span>This item is not from the @State.App.Name workshop, detailed statistics are not available.</span>
                                                </MudText>
                                            }
                                            @if (item.SupplyTotalEstimated > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-shopping-cart mud-secondary-text"></i>
                                                    <span>
                                                        <MudLink @onclick="@(() => ShowItemEstimatedSupplyDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Disabled="State.IsPrerendering">@item.SupplyTotalEstimated.Value.ToQuantityString()+ minimum sales</MudLink>
                                                        <span class="mud-secondary-text"> from the store</span>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (item.Subscriptions > 0)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-user mud-secondary-text"></i>
                                                    <span>
                                                        <MudLink @onclick="@(() => ShowItemEstimatedSupplyDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Disabled="State.IsPrerendering">@item.Subscriptions.Value.ToQuantityString() subscribers</MudLink>  
                                                        <span class="mud-secondary-text"> from the workshop</span>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (item.IsMarketable && !item.IsBanned && !item.IsStillAvailableFromStore)
                                            {
                                                @if (item.MarketSupply != null)
                                                {
                                                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-truck-ramp-box mud-secondary-text"></i>
                                                    <span>
                                                        <MudLink @onclick="@(() => ViewItemMarketPage(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Disabled="State.IsPrerendering">@item.MarketSupply.Value.ToQuantityString() supply</MudLink>
                                                        <span class="mud-secondary-text"> on the market</span>
                                                    </span>
                                                </MudText>
                                                }
                                                @if (item.MarketDemand24hrs != null)
                                                {
                                                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-people-carry mud-secondary-text"></i>
                                                        <span>
                                                            <MudLink @onclick="@(() => ViewItemMarketPage(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Disabled="State.IsPrerendering">@item.MarketDemand24hrs.Value.ToQuantityString() demand</MudLink>
                                                            <span class="mud-secondary-text"> from the market (last 24hrs)</span>
                                                        </span>
                                                    </MudText>
                                                }
                                            }
                                            @if (item.MarketRankTotal > 0 && !item.IsBanned)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-piggy-bank mud-secondary-text"></i>
                                                    <span>
                                                        <MudLink @onclick="@(() => ShowItemTypeDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Disabled="State.IsPrerendering">@item.MarketRankIndex cheaper @item.ItemType.Pluralise(item.MarketRankTotal)</MudLink>
                                                        <span class="mud-secondary-text"> on the market</span>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (!String.IsNullOrEmpty(item.ItemCollection))
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-paint-roller mud-secondary-text"></i>
                                                    <span>
                                                        <span class="mud-secondary-text">Part of the </span>
                                                        <MudLink @onclick="@(() => ShowItemCollectionDialog(item))" Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Disabled="State.IsPrerendering">@item.ItemCollection</MudLink>
                                                        <span class="mud-secondary-text"> collection</span>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (item.TimeCreated != null && item.TimeAccepted != null && (item.TimeAccepted.Value - item.TimeCreated.Value) > TimeSpan.Zero)
                                            {
                                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Default" Class="no-wrap" GutterBottom>
                                                    <i class="fas fa-fw fa-stopwatch mud-secondary-text"></i>
                                                    <span>
                                                        <span class="mud-secondary-text">Waited </span>
                                                        <span>@((item.TimeAccepted.Value - item.TimeCreated.Value).ToDurationString(maxGranularity: 2))</span>
                                                        <span class="mud-secondary-text"> to be accepted</span>
                                                    </span>
                                                </MudText>
                                            }
                                            @if (item.Notes != null)
                                            {
                                                @foreach (var note in item.Notes)
                                                {
                                                    <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="mb-2">
                                                        <MarkdownView Content="@note" />
								                    </MudText>
                                                }
                                            }
                                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="mb-2">
                                                @if (item.IsStillAvailableFromStore && item.HasMarketListing)
                                                {
                                                    <span>This item is already available on the market.</span>
                                                }
                                                else if (!item.IsStillAvailableFromStore && item.HasMarketListing && !item.IsBanned)
                                                {
                                                    <span>This item is no longer available from the store, grab it from the market instead.</span>
                                                }
                                                else if (!item.IsStillAvailableFromStore)
                                                {
                                                    <span>This item is no longer available.</span>
                                                }
                                            </MudText>
                                            <div class="d-flex flex-row flex-wrap align-center justify-start mb-2">
                                                @if (item.IsBanned == true)
                                                {
                                                    <MudTooltip Text="@($"This item has been trade and market banned due to {item.BanReason.FirstCharToLower()}")">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Banned" Icon="fas fa-fw fa-ban mr-2" Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Error" Class="mud-chip-outlined" />
                                                    </MudTooltip>
                                                }
                                                <MudTooltip>
                                                    <ChildContent>
                                                        @* // TODO: Marketable after store rotation *@
                                                        <MudChip Size="MudBlazor.Size.Small" Text="@(item.IsMarketable ? "Marketable" : ((item.IsStillAvailableFromStore && item.MarketableRestrictionDays > 0) ? "Marketable Next Rotation" : "Not Marketable"))" Class="mud-chip-outlined"
                                                                 Icon="@(item.IsMarketable ? "fas fa-fw fa-balance-scale-left mr-3" : ((item.IsStillAvailableFromStore && item.MarketableRestrictionDays > 0) ? "fas fa-fw fa-balance-scale-left mr-3" : "fas fa-fw fa-times"))"
                                                                 IconColor="@(item.IsMarketable ? MudBlazor.Color.Default : ((item.IsStillAvailableFromStore && item.MarketableRestrictionDays > 0) ? MudBlazor.Color.Warning : MudBlazor.Color.Error))" 
                                                                 Color="@(item.IsMarketable ? MudBlazor.Color.Default : ((item.IsStillAvailableFromStore && item.MarketableRestrictionDays > 0) ? MudBlazor.Color.Warning : MudBlazor.Color.Error))"
                                                                 Variant="MudBlazor.Variant.Text" />
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if (item.IsMarketable)
                                                        {
                                                            @if (item.MarketableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>can</strong> be listed on the Steam Community Market <strong>@(item.MarketableRestrictionDays)</strong> day(s) after purchase</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>can</strong> be listed on the Steam Community Market immediately after purchase</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            @if (item.IsStillAvailableFromStore && item.MarketableRestrictionDays > 0 && Store.Start != null)
                                                            {
                                                                <span>This item <strong>cannot</strong> currently be listed on the Steam Community Market once purchased, but <strong>probably</strong> can be after the store is next updated/rotated in @((Store.Start.Value.AddDays(7) - DateTimeOffset.Now).ToDurationString(showMinutes: false, showSeconds: false, maxGranularity: 2)) from now.</span>
                                                                <span>This is a known issue with store items that follow Steams preset pricing table (i.e. "default pricing").</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>cannot</strong> be listed on the Steam Community Market once purchased</span>
                                                            }
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                                <MudTooltip>
                                                    <ChildContent>
                                                        <MudChip Size="MudBlazor.Size.Small" Text="@(item.IsTradable ? "Tradable" : "Not Tradable")" Class="mud-chip-outlined"
                                                                 Icon="@(item.IsTradable ? "fas fa-fw fa-exchange-alt mr-2" : "fas fa-fw fa-times")"
                                                                 IconColor="@(item.IsTradable ? MudBlazor.Color.Default : MudBlazor.Color.Error)"
                                                                 Color="@(item.IsTradable ? MudBlazor.Color.Default : MudBlazor.Color.Error)"
                                                                 Variant="MudBlazor.Variant.Text" />
                                                    </ChildContent>
                                                    <TooltipContent>
                                                        @if (item.IsTradable)
                                                        {
                                                            @if (item.TradableRestrictionDays > 0)
                                                            {
                                                                <span>This item <strong>can</strong> be traded <strong>@(item.TradableRestrictionDays)</strong> day(s) after purchase</span>
                                                            }
                                                            else
                                                            {
                                                                <span>This item <strong>can</strong> be traded immediately after purchase</span>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span>This item <strong>cannot</strong> be traded once purchased</span>
                                                        }
                                                    </TooltipContent>
                                                </MudTooltip>
                                                @if (item.IsPermanent == true)
                                                {
                                                    <MudTooltip Text="@($"This item will be permanently bound to your Steam account after purchase and it cannot be traded or sold")">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Permanent" Icon="fas fa-fw fa-thumbtack mr-2" Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                    </MudTooltip>
                                                }
                                                @if (item.HasGlow == true)
                                                {
                                                    <MudTooltip>
                                                        <ChildContent>
                                                            <MudChip Size="MudBlazor.Size.Small" Text="@($"Glow {(item.GlowRatio > 0.01m ? "(" + item.GlowRatio + "%)" : String.Empty).Trim()}")" Icon="fas fa-fw fa-moon mr-3" 
                                                                     Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                        </ChildContent>
                                                        <TooltipContent>
                                                            @if (item.GlowRatio > 0.01m)
                                                            {
                                                                <span>@item.GlowRatio% of this item glows in the dark, making it much easier to see at night</span>
                                                            }
                                                            else 
                                                            {
                                                                <span>Some parts of this item glow in the dark, making it much easier to see at night</span>
                                                            }
                                                        </TooltipContent>
                                                    </MudTooltip>
                                                }
                                                @if (item.HasGlowSights == true)
                                                {
                                                    <MudTooltip Text="The iron sights of this weapon glow in the dark, making it much easier to aim at night">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Glow Sight" Icon="fas fa-fw fa-crosshairs mr-3" 
                                                                 Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                    </MudTooltip>
                                                }
                                                @if (item.HasCutout == true)
                                                {
                                                    <MudTooltip>
                                                        <ChildContent>
                                                            <MudChip Size="MudBlazor.Size.Small" Text="@($"Cutout {(item.CutoutRatio > 0.01m ? "(" + item.CutoutRatio + "%)" : String.Empty).Trim()}")" Icon="fas fa-fw fa-cut mr-3" 
                                                                     Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                        </ChildContent>
                                                        <TooltipContent>
                                                            @if (item.CutoutRatio > 0.01m)
                                                            {
                                                                <span>@item.CutoutRatio% of this items material has been removed. The shape may appeared altered when compared against the default item</span>
                                                            }
                                                            else 
                                                            {
                                                                <span>Parts of this items material has been removed. The shape may appeared altered when compared against the default item</span>
                                                            }
                                                        </TooltipContent>
                                                    </MudTooltip>
                                                }
                                                @if (item.IsPublisherDrop == true)
                                                {
                                                    <MudTooltip Text="This item is a limited-time publisher drop, generally done as part of special event (e.g. charity or promotion)">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="@($"{State.App?.PublisherName ?? "Publisher"} Drop")" Icon="fas fa-fw fa-crown mr-3" 
                                                                 Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                    </MudTooltip>
                                                }
                                                @if (item.IsLootCrateDrop == true)
                                                {
                                                    <MudTooltip Text="There is a chance to obtain this item when opening a loot crate. The odds of obtaining this item from a loot crate are not known.">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Loot Crate Drop" Icon="fas fa-fw fa-parachute-box mr-2"
                                                                    Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                    </MudTooltip>
                                                }
                                                @if (item.HasReturnedToStoreBefore == true)
                                                {
                                                    <MudTooltip Text="This item has returned from a previous store release">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Returning Item" Icon="fas fa-fw fa-redo mr-3" 
                                                                 Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                    </MudTooltip>
                                                }
                                                @if (item.IsCommodity == true)
                                                {
                                                    <MudTooltip Text="This item is a commodity, where all the individual items are effectively identical.">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Commodity" Icon="fas fa-fw fa-coins mr-2" 
                                                                 Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                    </MudTooltip>
                                                }
                                                else
                                                {
                                                    <MudTooltip Text="The appearance of items in the individual listings may vary slightly from the one above. For example, items could have custom names, descriptions, or colors.">
                                                        <MudChip Size="MudBlazor.Size.Small" Text="Unique" Icon="fas fa-fw fa-fingerprint mr-2" 
                                                                 Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Default" Class="mud-chip-outlined" />
                                                    </MudTooltip>
                                                }
                                            </div>

                                            <MudSpacer />

                                            <div class="d-flex flex-row flex-wrap mt-auto">
                                                @if (item.HasWorkshopFile)
                                                {
                                                    <div class="d-flex flex-row full-width mb-2">
                                                        <MudButton OnClick="@(() => ViewItemWorkshopPage(item))" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Secondary" StartIcon="fas fa-fw fa-tools" Size="@Size.Small" 
                                                                   FullWidth Disabled="State.IsPrerendering" title="Click to view this item on the Steam workshop">     
                                                            <strong>Workshop</strong>
                                                        </MudButton>
                                                        @if (!String.IsNullOrEmpty(item.WorkshopFileUrl))
                                                        {
                                                            <MudButton OnClick="@(() => ShowItemModelDialog(item))" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Secondary" StartIcon="fab fa-fw fa-unity" Size="@Size.Small" 
                                                                       Class="ml-2" Disabled="State.IsPrerendering" title="Click to view an interactive 3D render of this item">     
                                                                <strong>3D</strong>
                                                            </MudButton>
                                                        }
                                                    </div>
                                                }
                                                @if (item.IsStillAvailableFromStore)
                                                {
                                                    <div class="d-flex flex-row full-width mb-2">
                                                        <MudButton OnClick="@(() => ViewItemStorePage(item))" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" Size="@Size.Medium" FullWidth 
                                                                   Disabled="State.IsPrerendering" title="Click to view this item on the Steam item store">
                                                            @if (State.AppId > 0)
                                                            {
                                                                <img src="/images/app/@(@State.AppId.ToString())/icon.svg" class="store-button-icon" />    
                                                            }
                                                            else
                                                            {
                                                                <i class="fab fa-fw fa-steam" />
                                                            }
                                                            <strong class="ml-2 store-button-label">Store</strong>
                                                        </MudButton>
                                                        <MudButton OnClick="@(() => BuyItemFromStore(item))" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="fas fa-fw fa-cart-shopping" Size="@Size.Small"
                                                                   Class="ml-2" Disabled="State.IsPrerendering" title="Click to buy this item from the Steam item store">
                                                            <span>Buy</span>
                                                        </MudButton>
                                                    </div>
                                                }
                                                @if ((item.HasMarketListing || item.IsMarketable || (item.IsStillAvailableFromStore && item.MarketableRestrictionDays > 0 && Store.Start != null)) && !item.IsBanned)
                                                {
                                                    <div class="d-flex flex-row full-width">
                                                        <MudButton OnClick="@(() => ViewItemMarketPage(item))" Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Dark" StartIcon="fab fa-fw fa-steam" Size="@Size.Medium" FullWidth 
                                                                   Disabled="State.IsPrerendering" title="Click to view this item on the Steam community market">
                                                            <strong>Marketplace</strong>
                                                        </MudButton>
                                                    </div>
                                                }
                                            </div>

                                        </MudItem>

                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </div>
                    </MudItem>   
                }

                @foreach (var media in Store.Media)
                {
                    <MudItem xs="12" sm="6" lg="3">
                        @if (Int64.TryParse(media, out _))
                        {
                            <TwitchVideo VideoId="@media" />
                        }
                        else
                        {
                            <YouTubeVideo VideoId="@media" />
                        }
                    </MudItem>
                }

            }
        </MudGrid>

    </PageContainer>
}
else
{
    <div class="d-flex flex-column justify-center align-center full-height pa-4">
        <TumbleWeed Light="true" />
        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">empty, check back later</MudText>
    </div>
}

@code {

    [Parameter]
    public string StoreId { get; set; }

    private StoreIdentifierDTO[] StoreList;

    private int StoreIndex;

    private StoreDetailsDTO Store;

    private Exception StoreException;

    private ItemDescriptionWithPriceDTO LinkedItem;

    private double LinkedItemStorePrice;

    protected override async Task OnLoadStateAsync()
    {
        StoreId = RestoreFromStateOrDefault(nameof(StoreId), StoreId);
        StoreList = await RestoreFromStateOrLoad(nameof(StoreList), async () =>
        {
            await LoadStoreList();
            return StoreList;
        });
        StoreIndex = RestoreFromStateOrDefault(nameof(StoreIndex), StoreIndex);
        Store = await RestoreFromStateOrLoad(nameof(Store), async () =>
        {
            await LoadStore();
            return Store;
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(StoreId), StoreId);
        PersistToState(nameof(StoreList), StoreList);
        PersistToState(nameof(StoreIndex), StoreIndex);
        PersistToState(nameof(Store), Store);
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        // If there is no store selected yet, use the current one
        if (String.IsNullOrEmpty(StoreId))
        {
            StoreId = "current";
        }

        // If the store id has changed, reload the store details
        if (!String.Equals(StoreId, Store?.Id.ToString(), StringComparison.InvariantCultureIgnoreCase))
        {
            await LoadStore();
        }
    }

    private void OnSelectedStoreChanged(int index)
    {
        var oldStore = StoreList.ElementAtOrDefault(StoreIndex);
        StoreIndex = index;

        // Navigate to the selected store page
        var store = StoreList.ElementAtOrDefault(index);
        if (store != null && store != oldStore)
        {
            NavigationManager.NavigateTo($"/store/{store.Id}");  
        }
    }

    private async Task LoadStoreList()
    {
        try
        {
            Store = null;
            StoreList = null;
            StoreException = null;
            StateHasChanged();

            // Load the store list
            StoreList = await Http.GetFromJsonWithDefaultsAsync<StoreIdentifierDTO[]>($"api/store");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading the store list");
            Snackbar.Add($"Unable to load store list. {ex.Message}", MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    private async Task LoadStore()
    {
        try
        {
            Store = null;
            StoreException = null;
            StateHasChanged();

            if (!String.IsNullOrEmpty(StoreId))
            {
                // Load the new store (if any)
                Store = await Http.GetFromJsonWithDefaultsAsync<StoreDetailsDTO>($"api/store/{Uri.EscapeDataString(StoreId)}");
                StoreId = Store.Id;

                // The selected store should show as the active tab in the store tab list
                if (StoreList != null)
                {
                    StoreIndex = Array.IndexOf(StoreList, StoreList.FirstOrDefault(x => x.Id == StoreId));
                }

                StateHasChanged();
            }
        }
        catch(HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
            {
                Store = null;
                StoreId = null;
                StoreIndex = 0;
                StoreException = null;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            StoreException = ex;
            Logger.LogError(ex, $"Error loading store {StoreId}");
            Snackbar.Add($"Unable to load store details. {ex.Message}", MudBlazor.Severity.Error);
            StateHasChanged();
        }
    }

    private async Task BuyItemFromStore(StoreItemDetailsDTO item)
    {
        if (item?.ItemDefinitionId == null)
        {
            return;
        }

        var dialog = Dialogs.Show<BuyStoreItemDialog>(null, parameters: new DialogParameters()
        {
            ["Item"] = item,
        });
        
        var numberToBuy = await dialog.GetReturnValueAsync<int?>();
        if (numberToBuy > 0)
        {
            await ExternalNavigationManager.NavigateToNewTabAsync(new SteamBuyItemPageRequest() 
            {
                AppId = item.AppId.ToString(),
                ItemDefinitionId = item.ItemDefinitionId.Value.ToString(),
                Quantity = numberToBuy.Value
            });
        }
    }

    private void ViewItemStorePage(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTabAsync(new SteamItemStoreDetailPageRequest() 
        {
            AppId = item.AppId.ToString(),
            ItemId = item.Id.ToString()
        });
    }

    private void ViewItemMarketPage(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTabAsync(new SteamMarketListingPageRequest() 
        {
            AppId = item.AppId.ToString(),
            MarketHashName = item.Name
        });
    }

    private void ViewItemWorkshopPage(StoreItemDetailsDTO item)
    {
        if (item.HasWorkshopFile)
        {
            ExternalNavigationManager.NavigateToNewTabAsync(new SteamWorkshopFileDetailsPageRequest() 
            {
                Id = item.WorkshopFileId.ToString()
            });
        }
    }

    private void ViewItem(StoreItemDetailsDTO item)
    {
        ExternalNavigationManager.NavigateToNewTabAsync($"/item/{item.AssetDescriptionId}");
    }

    private void ShowCreatorItemsDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = $"Items by {item.CreatorName}",
            ["ListUrl"] = $"api/item?creatorId={item.CreatorId}&count=-1",
            ["HighlightedItemId"] = item.AssetDescriptionId,
            ["SortBy"] = nameof(ItemDescriptionWithPriceDTO.TimeAccepted),
            ["SortDirection"] = MudBlazor.SortDirection.Descending
        });
    }

    private void ShowItemDetailsDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemDetailsDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = item.Name,
            ["ItemUrl"] = $"/api/item/{item.AssetDescriptionId}"
        });
    }

    private void ShowItemModelDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemModelDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = item.Name,
            ["ItemType"] = item.ItemType,
            ["WorkshopFileUrl"] = item.WorkshopFileUrl,
            ["DisableCutoutControls"] = item.HasCutout != true,
            ["DisableGlowControls"] = item.HasGlow != true
        });
    }

    private void ShowStoreListDialog(StoreIdentifierDTO[] stores)
    {
        Dialogs.Show<ViewStoreListDialog>(null, parameters: new DialogParameters()
        {
            ["List"] = stores
        });
    }
    
    private void ShowItemEstimatedSupplyDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemEstimatedSupplyDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = item.Name,
            ["ItemUrl"] = $"/api/item/{item.AssetDescriptionId}"
        });
    }

    private void ShowItemTypeDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemListDialog>(null, parameters: new DialogParameters()
        {
            ["ListName"] = $"All {item.ItemType.Pluralise()}",
            ["ListUrl"] = $"api/item?id={item.AssetDescriptionId}&type={item.ItemType}&count=-1",
            ["DemandUrl"] = $"api/item/type/{item.ItemType}/demand",
            ["HighlightedItemId"] = item.AssetDescriptionId,
            ["SortBy"] = nameof(ItemDescriptionWithPriceDTO.TimeAccepted),
            ["SortDirection"] = MudBlazor.SortDirection.Descending
        });
    }

    private void ShowItemCollectionDialog(StoreItemDetailsDTO item)
    {
        Dialogs.Show<ViewItemCollectionDialog>(null, parameters: new DialogParameters()
        {
            ["CollectionName"] = $"{item.ItemCollection} Collection",
            ["CollectionUrl"] = $"api/item/collection/{item.ItemCollection}?creatorId={item.CreatorId}"
        });
    }

    private string GetItemIconClass(StoreItemDetailsDTO item)
    {
        var result = String.Empty;
        if (item.HasWorkshopFile)
        {
            result += " clickable";
        }
        if (item.HasGlow == true)
        {
            if (!String.IsNullOrEmpty(item.IconAccentColour))
            {
                result += " glow-transparent";
            }
            else
            {
                result += " glow";
            }
        }

        return result.Trim();
    }

    private string GetItemIconStyles(StoreItemDetailsDTO item)
    {
        if (item.HasGlow == true)
        {
            if (!String.IsNullOrEmpty(item.IconAccentColour))
            {
                return $"filter: drop-shadow(0px 0px 16px {item.IconAccentColour});";
            }
        }
        return null;
    }

    private string GetItemTopSellerStyles(int? topSellerIndex)
    {
        switch(topSellerIndex)
        {
            case 0: return "color: gold !important";
            case 1: return "color: silver !important";
            case 2: return "color: #cd7f32 !important";
            default: return "color: #fff !important";
        }
    }

    private string GetStoreTitle(StoreIdentifierDTO store)
    {
        var title = new StringBuilder();
        if (store.Start != null)
        {
            title.Append(store.Start.Value.ToString("MMMM d"));
            if (store.Id == StoreId)
            {
                title.Append(store.Start.Value.ToString(" yyyy"));
            }
        }
        else
        {
            title.Append(store.Name);
        }

        return title.ToString().Trim();
    }

    private async Task<IEnumerable<ItemDescriptionWithPriceDTO>> SearchItem(string value)
    {
        try
        {
            var search = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemDescriptionWithPriceDTO>>(
                $"api/item?filter={Uri.EscapeDataString(value ?? String.Empty)}&count=30"
            );

            return search.Items;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing items");
            return null;
        }
    }

    private async void LinkItem()
    {
        try
        {
            var storePriceText = Math.Round(LinkedItemStorePrice, 2).ToString();
            var response = await Http.PostAsJsonWithDefaultsAsync(
                $"api/store/{Store.Guid}/linkItem",
                new LinkStoreItemCommand()
                {
                    AssetDescriptionId = LinkedItem.Id,
                    StorePrice = storePriceText.SteamPriceAsInt(culture: CultureInfo.InvariantCulture, useDecimalShortCircuit: false)
                }
            );

            if(!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(await response.Content.ReadAsStringAsync(), null, response.StatusCode);
            }

            var item = await response.Content.ReadFromJsonWithDefaultsAsync<StoreItemDetailsDTO>();
            if (item != null && !Store.Items.Any(x => x.AssetDescriptionId == item.AssetDescriptionId))
            {
                Store.Items = Store.Items?.Union(new[] { item })?.ToArray();
            }

            // Reset the selected item
            LinkedItem = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error linking item");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async void UnlinkItem(StoreItemDetailsDTO item)
    {
        try
        {
            var response = await Http.PostAsJsonWithDefaultsAsync(
                $"api/store/{Store.Guid}/unlinkItem/",
                new UnlinkStoreItemCommand()
                {
                    AssetDescriptionId = (item.AssetDescriptionId ?? 0)
                }
            );

            if(!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(await response.Content.ReadAsStringAsync(), null, response.StatusCode);
            }

            if (Store.Items.Contains(item))
            {
                Store.Items = Store.Items?.Except(new[] { item })?.ToArray();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error unlinking item");
        }
        finally
        {
            StateHasChanged();
        }
    }

}
