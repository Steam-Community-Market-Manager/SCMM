@using SCMM.Web.Data.Models.UI.Statistic
@using SCMM.Web.Data.Models.UI.Store
@using Syncfusion.Blazor.Charts
@inherits PersistentComponent
@inject ILogger<StoreAnalyticsPanel> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject AppState State

<MudExpansionPanels Dense="true" DisableGutters="true">
    <MudExpansionPanel @bind-IsExpanded="IsAnalyticsPanelOpen" Disabled="State.IsPrerendering">
        <TitleContent>
            <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="d-flex flex-wrap justify-center align-center">
                @if (Store.Start != null && (Store.Start.Value.AddDays(7) - DateTimeOffset.Now) > TimeSpan.Zero)
                {
                    <small class="px-2">
                        <i class="fa fa-fw fa-clock mr-1" />
                        <span>@((Store.Start.Value.AddDays(7) - DateTimeOffset.Now).ToDurationString(showMinutes: false, showSeconds: false, maxGranularity: 2)) <span class="mud-secondary-text"> remaining until next expected store change</span></span>
                    </small>
                }
                else if (Store.Start != null && Store.End != null)
                {
                    <small class="px-2">
                        <span class="mud-secondary-text">Store was available for </span> 
                        <span><i class="fa fa-fw fa-clock mx-1" /> @((Store.End.Value - Store.Start.Value).ToDurationString(showMinutes: false, showSeconds: false, maxGranularity: 2))</span>
                    </small>
                }
                @if (Store.Items.Any())
                {
                    <small class="px-2">
                        <i class="fa fa-fw fa-shopping-cart mr-1" />
                        <span>@Store.Items.Sum(x => x.SupplyTotalEstimated ?? 0).RoundDownToNearest(1000).ToQuantityString() <span class="mud-secondary-text">minimum sales</span></span>
                    </small>
                    <small class="px-2">
                        <i class="fa fa-fw fa-hand-holding-usd mr-1" />
                        <span>@State.Currency.ToPriceString(State.Currency.CalculateExchange(Store.Items.Sum(x => (x.SupplyTotalEstimated ?? 0) * (x.StorePriceUsd ?? 0))).RoundDownToNearest(100000)) <span class="mud-secondary-text">minimum revenue</span></span>
                    </small>
                }
            </MudText>
        </TitleContent>
        <ChildContent>
            @if (IsAnalyticsPanelOpen)
            {
                <MudTabs @bind-ActivePanelIndex="AnalyticsPanelIndex" Rounded="true" Centered="true" KeepPanelsAlive="false" PanelClass="ma-2">
                    @if (Store?.Start != null)
                    {
                        <MudTabPanel Icon="fas fa-fw fa-trophy mr-2" Text="Top Selling Items" Disabled="@(Store?.Items?.Any() != true || TopSellers?.Any() != true)">
                            @if (Store?.Items?.Any() != true || TopSellers?.Any() != true)
                            {
                                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="pa-8 text-centered">
                                    <span>No data available yet.</span>
                                </MudText>
                            }
                            else
                            {
                                <MudGrid Spacing="2">
                                    <MudItem xs="12" md="8" lg="9" xl="10" xxl="10">
                                        <SfChart ID="TopSellers" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" Width="100%" Height="100%">
                                            <ChartArea>
                                                <ChartAreaBorder Width="0"></ChartAreaBorder>
                                            </ChartArea>
                                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Auto" Format="ddd hh:mm" LabelIntersectAction="LabelIntersectAction.Rotate90" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                            </ChartPrimaryXAxis>
                                            <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" IntervalType="IntervalType.Auto" Format="\##,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift" OpposedPosition="true" IsInversed="true">
                                            </ChartPrimaryYAxis>
                                            <ChartSeriesCollection>
                                                @foreach(var topSeller in TopSellers)
                                                {
                                                    <Syncfusion.Blazor.Charts.ChartSeries DataSource="@topSeller.PositionChanges" Name="@topSeller.Name" XName="Timestamp" YName="Position" Fill="@(topSeller.IconAccentColour)" Type="ChartSeriesType.Line" LegendShape="LegendShape.Circle" Visible="@(topSeller.Position <= 3)">
                                                        <ChartMarker Visible="true" Shape="ChartShape.Image" ImageUrl="@topSeller.IconUrl" Width="24" Height="24" /> 
                                                    </Syncfusion.Blazor.Charts.ChartSeries>
                                                }
                                            </ChartSeriesCollection>
                                            <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="false" EnablePinchZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
                                            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
                                            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                            <ChartLegendSettings Visible="true"></ChartLegendSettings>
                                        </SfChart>
                                    </MudItem>
                                    <MudItem xs="12" md="4" lg="3" xl="2" xxl="2" Class="d-flex align-start justify-center">
                                        <MudList Clickable="false" Dense="true">
                                            @foreach(var topSeller in TopSellers.Where(x => x.Position > 0).OrderBy(x => x.Position))
                                            {
                                                <MudListItem>
                                                    <div class="d-flex">
                                                        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary" Style="@GetItemTopSellerStyles(topSeller.Position)">
                                                            <i class="fas fa-fw fa-trophy mr-2"/>
                                                        </MudText>
                                                        <MudText Typo="MudBlazor.Typo.caption" Color="MudBlazor.Color.Secondary" Style="@GetItemTopSellerStyles(topSeller.Position)">
                                                            <span>@(topSeller.Position)@(topSeller.Position.GetPositionSuffix())</span>
                                                        </MudText>
                                                        <div class="d-flex flex-row justify-start align-center ml-4">
                                                            <img src="@topSeller.IconUrl" class="mr-2" style="width:32px; height:32px;" />
                                                            <MudText Typo="Typo.body1" Style="@($"color: {topSeller.IconAccentColour}")">@topSeller.Name</MudText>
                                                        </div>
                                                    </div>
                                                </MudListItem>
                                            }
                                        </MudList>
                                    </MudItem>
                                </MudGrid>
                            }
                        </MudTabPanel>
                    }
                    <MudTabPanel Icon="fas fa-fw fa-user mr-2" Text="Subscribers">
                        <SfChart ID="Subscribers" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" Width="100%" Height="100%">
                            <ChartArea>
                                <ChartAreaBorder Width="0"></ChartAreaBorder>
                            </ChartArea>
                            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Auto" Format="ddd hh:mm" LabelIntersectAction="LabelIntersectAction.Rotate90" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                            </ChartPrimaryXAxis>
                            <ChartPrimaryYAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double" IntervalType="IntervalType.Auto" Format="\##,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift" OpposedPosition="true">
                            </ChartPrimaryYAxis>
                            <ChartSeriesCollection>
                                @foreach(var subscription in Subscriptions)
                                {
                                    <Syncfusion.Blazor.Charts.ChartSeries DataSource="@subscription.SubscriberTimeline" Name="@subscription.Name" XName="Timestamp" YName="Subscribers" Fill="@(subscription.IconAccentColour)" Type="ChartSeriesType.Line">
                                    </Syncfusion.Blazor.Charts.ChartSeries>
                                }
                            </ChartSeriesCollection>
                            <ChartZoomSettings EnableSelectionZooming="true" EnableMouseWheelZooming="false" EnablePinchZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
                            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
                            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                            <ChartLegendSettings Visible="true"></ChartLegendSettings>
                        </SfChart>
                    </MudTabPanel>
                    <MudTabPanel Icon="fas fa-fw fa-shopping-cart mr-2" Text="Minimum Sales" Disabled="@(Store?.Items?.Any(x => x.SupplyTotalEstimated > 0) != true)">
                        @if ((Store?.Items?.Any(x => x.SupplyTotalEstimated > 0) != true))
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="pa-8 text-centered">
                                <span>No data available yet.</span>
                            </MudText>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Warning" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Class="ma-2 mud-alert-outlined-warning">
                                <span><strong>Steam doesn't disclose exact sales figures, this is just an estimate</strong> to roughly guage how each item is performing. How is this calculated? Steam users <MudLink Href="https://partner.steamgames.com/doc/features/workshop/implementation#item_subscription" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Underline="Underline.Hover" Target="_blank">subscribe to workshop files</MudLink> when they purchase items from the store. Using this, we can determine the approximate number of unique users that purchased at least one copy of the item.</span>
                                <span>We also periodically scan Steam inventories to identify actual stock held. Because only a small fraction of all Steam accounts are scanned, these estimates should be taken with a grain of salt.</span>
                            </MudAlert>
                            <SfChart ID="ItemSales" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" Width="100%" Height="100%">
                                @* TODO: Preload this, web api adapter cause multiple calls on first load *@
                                <SfDataManager Url="@($"api/store/{Store.Guid}/stats/itemSales")" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis LabelFormat="#,##" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                    <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries XName="name" YName="supplyTotalMarketsKnown" Name="Currently listed on the market" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#171a21" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalOwnersKnown" Name="Tracked subscribers currently holding this item" StackingGroup="Breakdown" ColumnWidth="0.5" Width="2" Fill="#1565c0" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalOwnersEstimated" Name="Untracked workshop subscribers of this item" StackingGroup="Breakdown" ColumnWidth="0.5" Width="2" Fill="#1e88e5" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalInvestorsKnown" Name="Tracked duplicate inventory stock held of this item" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#6a1b9a" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalInvestorsEstimated" Name="Untracked estimated duplicate inventory stock held of this item" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#8e24aa" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="supplyTotalEstimated" Name="Total minimum sales" StackingGroup="Total" ColumnWidth="1" Fill="#388e3c" Width="2" Type="ChartSeriesType.Bar">
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Name="totalText" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                                <ChartDataLabelFont FontWeight="600" Color="#eeeeee"></ChartDataLabelFont>
                                            </ChartDataLabel>
                                        </ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" Position="LegendPosition.Auto"></ChartLegendSettings>
                            </SfChart>
                        }
                    </MudTabPanel>
                    <MudTabPanel Icon="fas fa-fw fa-hand-holding-usd mr-2" Text="Minimum Revenue" Disabled="@(Store?.Items?.Any(x => x.SupplyTotalEstimated > 0) != true)">
                        @if ((Store?.Items?.Any(x => x.SupplyTotalEstimated > 0) != true))
                        {
                            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" Class="pa-8 text-centered">
                                <span>No data available yet.</span>
                            </MudText>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Warning" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Class="ma-2 mud-alert-outlined-warning">
                                <span><strong>Steam doesn't disclose exact sales figures, this is just an estimate</strong> to roughly guage how each item is performing. How is this calculated? <code>(total_estimated_sales * price_in_usd)</code>. See the sales tab for more on how we estimate sales numbers.</span>
                                <span>All revenue is subject to local sales tax, which varies between countries (and states) and is difficult to accurately estimate. We estimate that Steam pay about 7% in taxes for all store revenue collected.</span>
                                <span>After tax, <MudLink Href="https://steamcommunity.com/workshop/about/?appid=252490" Typo="MudBlazor.Typo.subtitle2" Color="MudBlazor.Color.Warning" Underline="Underline.Hover" Target="_blank">25% of remaining revenue goes to the item creator(s)</MudLink>. After the item creator(s), we estimate that Steam takes 30% as a service fee, with the remaining revenue going to the game publisher (@State.App.PublisherName).</span>
                                <span>Finally, all revenue is further subject to local income taxes (for individuals), goods and service taxes (for companies), international banking fees, etc; None of these additional taxes/fees are accounted for in the below estimates, so actual revenue is likley lower.</span>
                            </MudAlert>
                            <SfChart ID="ItemRevenue" Theme="Syncfusion.Blazor.Theme.FluentDark" Background="transparent" Width="100%" Height="100%">
                                @* TODO: Preload this, web api adapter cause multiple calls on first load *@
                                <SfDataManager Url="@($"api/store/{Store.Guid}/stats/itemRevenue")" Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis LabelFormat="@($"{State.Currency.PrefixText}#,##0.00{State.Currency.SuffixText} (minimum)")" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                    <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries XName="name" YName="salesTax" Name="Sales tax" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#fb8c00" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="authorRevenue" Name="Item author revenue" StackingGroup="Breakdown" ColumnWidth="0.5" Fill="#1e88e5" Width="2" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="platformRevenue" Name="Steam revenue" StackingGroup="Breakdown" ColumnWidth="0.5" Width="2" Fill="#171a21" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="publisherRevenue" Name="@($"{State.App.PublisherName} revenue")" StackingGroup="Breakdown" ColumnWidth="0.5" Width="2" Fill="@State.App?.PrimaryColor" Type="ChartSeriesType.StackingBar">
                                        <ChartEmptyPointSettings Mode="EmptyPointMode.Drop" />
                                    </ChartSeries>
                                    <ChartSeries XName="name" YName="total" Name="Total minimum revenue" StackingGroup="Total" ColumnWidth="1" Fill="#388e3c" Width="2" Type="ChartSeriesType.Bar">
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
                                                <ChartDataLabelFont FontWeight="600" Color="#eeeeee"></ChartDataLabelFont>
                                            </ChartDataLabel>
                                        </ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" Position="LegendPosition.Auto"></ChartLegendSettings>
                            </SfChart>
                        }
                    </MudTabPanel>
                </MudTabs>
            }
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    [Parameter]
    public StoreDetailsDTO Store { get; set; }

    private bool IsAnalyticsPanelOpen;

    private int AnalyticsPanelIndex = 1;

    private IEnumerable<StoreTopSellerItemDTO> TopSellers;

    private IEnumerable<StoreItemSubscriptionDTO> Subscriptions;

    protected override async Task OnLoadStateAsync()
    {
        if (Store?.Start != null && Store?.End == null)
        {
            TopSellers = await RestoreFromStateOrLoad(nameof(TopSellers), async () =>
            {
                try
                {
                    var topSellers = await Http.GetFromJsonWithDefaultsAsync<IEnumerable<StoreTopSellerItemDTO>>($"api/stats/store/topSellers?start={Store.Start?.Ticks}&end={Store.End?.Ticks}");
                    foreach (var topSeller in topSellers)
                    {
                        if (topSeller.Position > 0)
                        {
                            topSeller.PositionChanges.Add(new StoreTopSellerPositionChartPointDTO
                            {
                                Timestamp = DateTime.UtcNow,
                                Position = topSeller.Position,
                                IsActive = true
                            });
                        }
                    }
                    return topSellers;
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, $"Error loading the store top sellers");
                    Snackbar.Add($"Unable to load store top sellers. {ex.Message}", MudBlazor.Severity.Error);
                    throw;
                }
            });
        }
        if (Store?.Items?.Any() == true)
        {
            Subscriptions = RestoreFromStateOrDefault(nameof(Subscriptions), Store.Items.Select(x => new StoreItemSubscriptionDTO()
            {
                Name = x.Name,
                IconUrl = x.IconUrl,
                IconAccentColour = x.IconAccentColour,
                SubscriberTimeline = x.SubscriptionsTimeline.Select(s => new StoreItemSubscriberSnapshotDTO
                {
                    Timestamp = new DateTime(s.Key),
                    Subscribers = s.Value
                }).ToList()
            }));
        }
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(TopSellers), TopSellers);
        PersistToState(nameof(Subscriptions), Subscriptions);
        return Task.CompletedTask;
    }
    
    private string GetItemTopSellerStyles(int? topSellerPosition)
    {
        switch(topSellerPosition)
        {
            case 1: return "color: gold !important";
            case 2: return "color: silver !important";
            case 3: return "color: #cd7f32 !important";
            default: return "color: #fff !important";
        }
    }

}
