@page "/system"
@inherits PersistentComponent
@inject ILogger<SystemPage> Logger
@inject ISnackbar Snackbar
@inject ISystemService SystemService
@inject AppState State

<PageContainer Title="SCMM - Service Health">
    @if (SystemStatus == null)
    {
        <Loading Message="Refreshing system status..." />
    }
    else
    {
       <MudGrid Spacing="4">

            @if (SystemStatus.SteamApp != null)
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="pa-4">
                        <MudStack Row="true" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween">
                            <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Default" GutterBottom>
                                <i class="fab fa-fw fa-steam" />
                                <span>Steam Services</span>
                            </MudText>
                            <MudIconButton Size="Size.Small" Variant="Variant.Text" Icon="fas fa-fw fa-rotate" Color="Color.Secondary" Title="Refresh system status" Disabled="State.IsPrerendering"
                                           OnClick="@(async () => await RefreshSystemStatusAsync())"></MudIconButton>
                        </MudStack>
                        @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemDefinitions) == true)
                        {
                            <MudSimpleTable Elevation="0" Dense="true">
                                <thead>
                                    <tr>
                                        <th>Recent @SystemStatus.SteamApp.Name Item Definition Archives</th>
                                        <th>Published</th>
                                        <th class="text-right">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var itemDefinitionArchive in SystemStatus.SteamApp.ItemDefinitionArchives)
                                    {
                                        <tr>
                                            <td>@itemDefinitionArchive.Digest <small class="mud-secondary-text">(@(itemDefinitionArchive.Size.ToQuantityString()) bytes)</small></td>
                                            <td>@((DateTimeOffset.Now - itemDefinitionArchive.PublishedOn).ToDurationString(maxGranularity: 2, suffix: "ago"))</td>
                                            <td class="text-right">
                                                <MudText Typo="Typo.inherit" Color="@(itemDefinitionArchive.IsImported ? Color.Success : Color.Warning)">
                                                    @if (itemDefinitionArchive.IsImported)
                                                    {
                                                        <span><i class="fas fa-fw fa-circle-check mr-1"></i>Imported</span>
                                                    }
                                                    else
                                                    {
                                                        <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Not processed</span>
                                                    }
                                                </MudText>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        }
                        <MudSimpleTable Elevation="0" Dense="true" Class="mt-4">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Lasted Updated</th>
                                    <th>Update Delta</th>
                                    <th>Target Delta</th>
                                    <th class="text-right">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.AssetDescriptionTracking) == true && SystemStatus.SteamApp.AssetDescriptionsUpdates.Newest != null && SystemStatus.SteamApp.AssetDescriptionsUpdates.Oldest != null)
                                {
                                    <tr>
                                        <td>@SystemStatus.SteamApp.Name Item Asset Descriptions</td>
                                        <td>
                                            <span>@((DateTimeOffset.Now - SystemStatus.SteamApp.AssetDescriptionsUpdates.Newest.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</span>
                                            <small class="mud-secondary-text"> (most recent item update) </small>
                                            <br />
                                            <span>@((DateTimeOffset.Now - SystemStatus.SteamApp.AssetDescriptionsUpdates.Oldest.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</span>
                                            <small class="mud-secondary-text"> (oldest item update) </small>
                                        </td>
                                        <td>@SystemStatus.SteamApp.AssetDescriptionsUpdates.Delta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td>Less than @SystemStatus.SteamApp.AssetDescriptionsUpdates.TargetDelta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(SystemStatus.SteamApp.AssetDescriptionsUpdates.IsOnTarget ? Color.Success : Color.Warning)">
                                                @if (SystemStatus.SteamApp.AssetDescriptionsUpdates.IsOnTarget)
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>Running on schedule</span>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Running behind schedule</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                                @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketPriceTracking) == true && SystemStatus.SteamApp.MarketOrderUpdates.Newest != null && SystemStatus.SteamApp.MarketOrderUpdates.Oldest != null)
                                {
                                    <tr>
                                        <td>@SystemStatus.SteamApp.Name Market Item Buy/Sell Orders</td>
                                        <td>
                                            <span>@((DateTimeOffset.Now - SystemStatus.SteamApp.MarketOrderUpdates.Newest.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</span>
                                            <small class="mud-secondary-text"> (most recent item update) </small>
                                            <br />
                                            <span>@((DateTimeOffset.Now - SystemStatus.SteamApp.MarketOrderUpdates.Oldest.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</span>
                                            <small class="mud-secondary-text"> (oldest item update) </small>
                                        </td>
                                        <td>@SystemStatus.SteamApp.MarketOrderUpdates.Delta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td>Less than @SystemStatus.SteamApp.MarketOrderUpdates.TargetDelta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(SystemStatus.SteamApp.MarketOrderUpdates.IsOnTarget ? Color.Success : Color.Warning)">
                                                @if (SystemStatus.SteamApp.MarketOrderUpdates.IsOnTarget)
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>Running on schedule</span>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Running behind schedule</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                                @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketPriceTracking) == true && SystemStatus.SteamApp.MarketSaleUpdates.Newest != null && SystemStatus.SteamApp.MarketSaleUpdates.Oldest != null)
                                {
                                    <tr>
                                        <td>@SystemStatus.SteamApp.Name Market Item Sales History</td>
                                        <td>
                                            <span>@((DateTimeOffset.Now - SystemStatus.SteamApp.MarketSaleUpdates.Newest.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</span>
                                            <small class="mud-secondary-text"> (most recent item update) </small>
                                            <br/>
                                            <span>@((DateTimeOffset.Now - SystemStatus.SteamApp.MarketSaleUpdates.Oldest.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</span>
                                            <small class="mud-secondary-text"> (oldest item update) </small>
                                        </td>
                                        <td>@SystemStatus.SteamApp.MarketSaleUpdates.Delta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td>Less than @SystemStatus.SteamApp.MarketSaleUpdates.TargetDelta.Value.ToDurationString(maxGranularity: 2)</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(SystemStatus.SteamApp.MarketSaleUpdates.IsOnTarget ? Color.Success : Color.Warning)">
                                                @if (SystemStatus.SteamApp.MarketSaleUpdates.IsOnTarget)
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>Running on schedule</span>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-exclamation mr-1"></i>Running behind schedule</span>
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                </MudItem>
            }
            
            @if (SystemStatus.SteamApp?.Markets?.Any() == true)
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="pa-4">
                        <MudStack Row="true" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween">
                            <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Default" GutterBottom>
                                <i class="fas fa-fw fa-shop" />
                                <span>Market Services</span>
                            </MudText>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mb-2">
                                <MudText Typo="Typo.subtitle1" Color="Color.Success">
                                    <span class="no-wrap"><i class="fas fa-fw fa-circle-check mr-1" /> Normal <strong>(@SystemStatus.SteamApp.Markets.Count(x => x.Status == SystemStatusSeverity.Normal))</strong></span>
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Color="Color.Warning">
                                    <span class="no-wrap"><i class="fas fa-fw fa-circle-exclamation mr-1" /> Degraded <strong>(@SystemStatus.SteamApp.Markets.Count(x => x.Status == SystemStatusSeverity.Degraded))</strong></span>
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Color="Color.Error">
                                    <span class="no-wrap"><i class="fas fa-fw fa-circle-xmark mr-1" /> Unavailable <strong>(@SystemStatus.SteamApp.Markets.Count(x => x.Status == SystemStatusSeverity.Critical))</strong></span>
                                </MudText>
                            </MudStack>
                            <MudIconButton Size="Size.Small" Variant="Variant.Text" Icon="fas fa-fw fa-rotate" Color="Color.Secondary" Title="Refresh system status" Disabled="State.IsPrerendering"
                                           OnClick="@(async () => await RefreshSystemStatusAsync())"></MudIconButton>
                        </MudStack>
                        <MudSimpleTable Elevation="0" FixedHeader="true" Dense="true">
                            <thead>
                                <tr>
                                    <th>Market</th>
                                    <th>Last Updated</th>
                                    <th>Number of Items</th>
                                    <th>Number of Listings</th>
                                    <th class="text-right">Overall Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var now = DateTimeOffset.Now;
                                }
                                @foreach (var market in SystemStatus.SteamApp.Markets)
                                {
                                    <tr>
                                        <td>
                                            <MudStack Spacing="2" Row="true" AlignItems="AlignItems.Center">
                                                <img src="@($"/images/app/{State.App.Id}/markets/{market.Type.ToString().ToLower()}.png")" style="width:1.5em; height:1.5em" />
                                                <span>@market.Type.GetDisplayName()</span>
                                            </MudStack>
                                        </td>
                                        <td>
                                            @if (market.LastUpdatedItemsOn != null)
                                            {
                                                <span>@((now - market.LastUpdatedItemsOn.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</span>
                                                @if (market.LastUpdatedItemsDuration != null)
                                                {
                                                    <small class="mud-secondary-text">, @market.LastUpdatedItemsDuration.Value.ToDurationString(prefix: "completed in", maxGranularity: 2)</small>
                                                }
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td>@market.TotalItems.ToQuantityString()</td>
                                        <td>@(market.TotalListings != null ? market.TotalListings.Value.ToQuantityString() : "???")</td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(market.Status == SystemStatusSeverity.Normal ? Color.Success : (market.Status == SystemStatusSeverity.Degraded) ? Color.Warning : Color.Error)">
                                                @switch (market.Status)
                                                {
                                                    case SystemStatusSeverity.Normal:
                                                        <span class="no-wrap"><i class="fas fa-fw fa-circle-check mr-1" /> Normal</span>
                                                        break;
                                                    case SystemStatusSeverity.Degraded:
                                                        <span class="no-wrap"><i class="fas fa-fw fa-circle-exclamation mr-1" /> Degraded</span>
                                                        break;
                                                    case SystemStatusSeverity.Critical:
                                                        <span class="no-wrap"><i class="fas fa-fw fa-circle-xmark mr-1" /> Unavailable</span>
                                                        break;
                                                }
                                            </MudText>
                                            @if (market.HasError)
                                            {
                                                <div>
                                                    <MudText Typo="Typo.caption" Color="@(market.Status == SystemStatusSeverity.Degraded ? Color.Warning : Color.Error)">
                                                        <span>@market.LastUpdateError</span>
                                                    </MudText>
                                                </div>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                </MudItem>
            }
        
            @if (SystemStatus.WebProxies?.Any() == true)
            {
                <MudItem xs="12">
                    <MudPaper Outlined="true" Class="pa-4">
                        <MudStack Row="true" AlignItems="AlignItems.Start" Justify="Justify.SpaceBetween">
                            <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Default" GutterBottom>
                                <i class="fas fa-fw fa-robot" />
                                <span>SCMM Proxies</span>
                            </MudText>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="mb-2">
                                <MudText Typo="Typo.subtitle1" Color="Color.Success">
                                    <span class="no-wrap"><i class="fas fa-fw fa-circle-check mr-1" /> Normal <strong>(@SystemStatus.WebProxies.Count(x => x.Status == SystemStatusSeverity.Normal))</strong></span>
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Color="Color.Warning">
                                    <span class="no-wrap"><i class="fas fa-fw fa-circle-exclamation mr-1" /> Degraded <strong>(@SystemStatus.WebProxies.Count(x => x.Status == SystemStatusSeverity.Degraded))</strong></span>
                                </MudText>
                                <MudText Typo="Typo.subtitle1" Color="Color.Error">
                                    <span class="no-wrap"><i class="fas fa-fw fa-circle-xmark mr-1" /> Unavailable <strong>(@SystemStatus.WebProxies.Count(x => x.Status == SystemStatusSeverity.Critical))</strong></span>
                                </MudText>
                            </MudStack>
                            <MudIconButton Size="Size.Small" Variant="Variant.Text" Icon="fas fa-fw fa-rotate" Color="Color.Secondary" Title="Refresh system status" Disabled="State.IsPrerendering"
                                           OnClick="@(async () => await RefreshSystemStatusAsync())"></MudIconButton>
                        </MudStack>
                        <MudSimpleTable Elevation="0" FixedHeader="true" Dense="true" Style="height:50vh">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Location</th>
                                    <th>Last Accessed</th>
                                    <th>Request Hits & Misses</th>
                                    <th>Rate Limits & Restrictions</th>
                                    <th class="text-right">Overall Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var now = DateTimeOffset.Now;
                                }
                                @foreach (var webProxy in SystemStatus.WebProxies)
                                {
                                    <tr>
                                        <td>
                                            <i class="fas fa-fw fa-globe mr-1"></i>
                                            <span>@webProxy.Id</span>
                                        </td>
                                        <td>
                                            <span>@webProxy.CountryFlag @webProxy.CityName</span>
                                            <span><small>(@webProxy.Address)</small></span>
                                        </td>
                                        <td>
                                            @if (webProxy.LastAccessedOn != null)
                                            {
                                                <span>@((now - webProxy.LastAccessedOn.Value).ToDurationString(maxGranularity: 2, suffix: "ago"))</span>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td>
                                            <span>@webProxy.RequestsSucceededCount.ToQuantityString() <small class="mud-secondary-text">hits</small></span><br/>
                                            <span>@webProxy.RequestsFailedCount.ToQuantityString() <small class="mud-secondary-text">misses</small></span>
                                        </td>
                                        <td>
                                            <MudText Typo="Typo.inherit" Color="@(webProxy.DomainRateLimits?.Any(x => x.Value > now) == true ? Color.Warning : Color.Success)">
                                                @if (webProxy.DomainRateLimits?.Any(x => x.Value > now) == true)
                                                {
                                                    <MudStack>
                                                        @foreach(var domainRateLimit in webProxy.DomainRateLimits.Where(x => x.Value > now))
                                                        {
                                                            <span>
                                                                <i class="fas fa-fw fa-circle-exclamation mr-1"></i>
                                                                <span><strong>@domainRateLimit.Key</strong> rate-limited for @((domainRateLimit.Value - now).Duration().ToDurationString(maxGranularity: 2))</span>
                                                            </span>
                                                        }
                                                    </MudStack>
                                                }
                                                else
                                                {
                                                    <span><i class="fas fa-fw fa-circle-check mr-1"></i>No restrictions</span>
                                                }
                                            </MudText>
                                        </td>
                                        <td class="text-right">
                                            <MudText Typo="Typo.inherit" Color="@(webProxy.Status == SystemStatusSeverity.Normal ? Color.Success : (webProxy.Status == SystemStatusSeverity.Degraded) ? Color.Warning : Color.Error)">
                                                @switch (webProxy.Status)
                                                {
                                                    case SystemStatusSeverity.Normal:
                                                        <span class="no-wrap"><i class="fas fa-fw fa-circle-check mr-1" /> Normal</span>
                                                        break;
                                                    case SystemStatusSeverity.Degraded:
                                                        <span class="no-wrap"><i class="fas fa-fw fa-circle-exclamation mr-1" /> Degraded</span>
                                                        break;
                                                    case SystemStatusSeverity.Critical:
                                                        <span class="no-wrap"><i class="fas fa-fw fa-circle-xmark mr-1" /> Unavailable</span>
                                                        break;
                                                }
                                            </MudText>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                </MudItem>
            }
        
        </MudGrid> 
    }
</PageContainer>

@code {

    private SystemStatusDTO SystemStatus { get; set; }

    protected override async Task OnLoadStateAsync()
    {
        SystemStatus = await RestoreFromStateOrLoad(nameof(SystemStatus), async () =>
        {
            try
            {
                return await SystemService.GetSystemStatusAsync(State.AppId, includeAppMarkets: true, includeWebProxiesStatus: true);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error loading system status");
                Snackbar.Add($"Unable to loading system status. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(SystemStatus), SystemStatus);
        return Task.CompletedTask;
    }

    public async Task RefreshSystemStatusAsync()
    {
        try
        {
            SystemStatus = null;
            StateHasChanged();

            SystemStatus = await SystemService.GetSystemStatusAsync(State.AppId, includeAppMarkets: true, includeWebProxiesStatus: true);
            if (SystemStatus != null)
            {
                State.SystemStatus = SystemStatus;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error refreshing system status");
            Snackbar.Add($"Unable to refresh system status. {ex.Message}", MudBlazor.Severity.Error);
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

}
