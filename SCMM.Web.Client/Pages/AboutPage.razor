@page "/about"
@inherits PersistentComponent
@inject ILogger<AboutPage> Logger
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject AppState State

<PageContainer Title="SCMM - About">
    <MudPaper Outlined="true" Class="pa-4">
        <MudText Typo="MudBlazor.Typo.h5" Color="MudBlazor.Color.Default" GutterBottom>About</MudText>
        <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
            <span>Steam Community Market Manager (SCMM) aggregates and analyses public data collected from Steam (and other sources) to help better understand market history patterns and trends.</span>
            <span>SCMM is fanmade and not affilated with Valve Corporation or @State.App.PublisherName.</span>
        </MudText>
        <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
            <span>SCMM is still under development and may change (or be removed) without notice.</span>
            <span>No claim is made that the information provided here is accurate; use it at your own risk.</span>
        </MudText>

        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" GutterBottom>Frequently Asked Questions</MudText>
        <ul class="fa-ul">
            <li>
                <span class="fa-li">-</span>
                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">
                    <span>Why does the site take so long to load and why is it so slow?</span>
                </MudText>
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                    <span>The user interface is built using <MudLink Typo="MudBlazor.Typo.body2" Href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor" Target="_blank">Blazor</MudLink> and <MudLink Typo="MudBlazor.Typo.body2" Href="https://webassembly.org/" Target="_blank">WebAssembly (Wasm)</MudLink>, a relatively new web technology that is not as mature and optimised as traditional JavaScript based websites.</span>
                    <span>Performance will improve over time as the technology matures. The decision to use Blazor/WebAssembly was for self-learning and educational reasons. This is a learning project, not a commercial project.</span>
                </MudText>
            </li>
            <li>
                <span class="fa-li">-</span>
                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">
                    <span>I have an issue or suggestion, where can I get help?</span>
                </MudText>
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                    <span>Any feedback is appreciated and bug reports are welcomed, drop a message in Discord using the pop-out chat in the corner of the page.</span>
                </MudText>
            </li>
            <li>
                <span class="fa-li">-</span>
                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">
                    <span>I want to help with this project, how can I get involved?</span>
                </MudText>
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                    <span>At this time I'm not actively looking for any help, the project is still very early days and the development environment isn't geared up for public contributions.</span>
                    <span>Ideally one day I'd setup something to allow for public contributions, but this is very far down on the todo list right now and I'm more focused on finishing the basic functionality first.</span>
                </MudText>
            </li>
            <li>
                <span class="fa-li">-</span>
                <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">
                    <span>The price for item <code>X</code> is wrong</span>
                </MudText>
                <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                    <span>Item prices/orders/activity are synced with Steam about once every 60 minutes (on average).</span>
                    <span>Due to Steam request throttling and occasional API down-time, data can lag behind even further than this. Because Steam is a live and high-volume marketplace, real-time updates are not feasible.</span>
                </MudText>
            </li>
        </ul>

        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" GutterBottom>Acknowledgements</MudText>
        <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
            <ul class="fa-ul">
                <li><span class="fa-li">-</span><MudLink Typo="MudBlazor.Typo.body2" Href="https://steamcommunity.com/" Target="_blank">Steam Community</MudLink> and <MudLink Typo="MudBlazor.Typo.body2" Href="https://partner.steamgames.com/doc/webapi" Target="_blank">Steam WebAPI</MudLink> for providing much of the source data.</li>
                <li><span class="fa-li">-</span><MudLink Typo="MudBlazor.Typo.body2" Href="http://web.archive.org/web/20150415000000*/http://store.steampowered.com/itemstore/252490/" Target="_blank">Internet Archive's Wayback Machine</MudLink> for preserving Rust store information since 2015.</li>
                <li><span class="fa-li">-</span><MudLink Typo="MudBlazor.Typo.body2" Href="https://www.youtube.com/channel/UCvCBuwbtKRwM0qMi7rc7CUw" Target="_blank">ThatGermanGuy YouTube</MudLink> for documenting the weekly Rust items and prices since 2017.</li>
                <li><span class="fa-li">-</span><MudLink Typo="MudBlazor.Typo.body2" Href="https://discord.gg/CRMf95Z" Target="_blank">OMIGHTY YouTube & Discord Community</MudLink> for all their help, feedback, and support with the project.</li>
                <li><span class="fa-li">-</span>Dr. Blake Porter's <MudLink Typo="MudBlazor.Typo.body2" Href="https://www.blakeporterneuro.com/video-game-skin-analysis-rust/" Target="_blank">"Video Game Skin Analysis - Rust"</MudLink> for market stats/analytics inspiration and ideas.</li>
            </ul>
        </MudText>
        
        <MudText Typo="MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" GutterBottom>Contributors</MudText>

        @if (Donators != null && Donators.Any())
        {
            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                Thank you to the following for their generous support and/or donations towards this project:
            </MudText>
            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                <ul class="fa-ul donators top-donators d-flex flex-row flex-wrap my-4">
                    @foreach (var donator in Donators.Take(3))
                    {
                        <li class="donator ma-1 mr-4 no-wrap">
                            @if (donator != null)
                            {
                                <img src="@donator.AvatarUrl" />
                                <span>@donator.Name</span>
                                <i class="fas fa-fw fa-trophy"></i>
                            }
                            else
                            {
                                <MudSkeleton Width="@Skeleton.Width(0.3)" />
                            }
                        </li>
                    }
                </ul>
                <ul class="fa-ul donators d-flex flex-row flex-wrap my-4">
                    @foreach (var donator in Donators.Skip(3))
                    {
                        <li class="donator ma-1 no-wrap">
                            @if (donator != null)
                            {
                                <img src="@donator.AvatarUrl" />
                                <span>@donator.Name</span>
                            }
                            else
                            {
                                <MudSkeleton Width="@Skeleton.Width(0.3)" />
                            }
                        </li>
                    }
                </ul>
            </MudText>
        }
        
        @if (Contributors != null && Contributors.Any())
        {
            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                Thank you to the following for their contributions towards this project:
            </MudText>
            <MudText Typo="MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                <ul class="fa-ul contributors d-flex flex-row flex-wrap my-4">
                    @foreach (var contributor in Contributors)
                    {
                        <li class="contributor ma-1 no-wrap">
                            @if (contributor != null)
                            {
                                <img src="@contributor.AvatarUrl" />
                                <span>@contributor.Name</span>
                            }
                            else
                            {
                                <MudSkeleton Width="@Skeleton.Width(0.3)" />
                            }
                        </li>
                    }
                </ul>
            </MudText>
        }
        
    </MudPaper>
</PageContainer>

@code {

    private IList<ProfileDTO> Contributors = Skeleton.List<ProfileDTO>();
    
    private IList<ProfileDTO> Donators = Skeleton.List<ProfileDTO>();
    
    protected override async Task OnLoadStateAsync()
    {
        Contributors = await RestoreFromStateOrLoad(nameof(Contributors), async () =>
        {
            try
            {
                return await Http.GetFromJsonWithDefaultsAsync<ProfileDTO[]>($"api/stats/contributors");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error loading contributors");
                Snackbar.Add($"Unable to load contributor list. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
        Donators = await RestoreFromStateOrLoad(nameof(Donators), async () =>
        {
            try
            {
                return await Http.GetFromJsonWithDefaultsAsync<ProfileDTO[]>($"api/stats/donators");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error loading donators");
                Snackbar.Add($"Unable to load donator list. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(Contributors), Contributors);
        PersistToState(nameof(Donators), Donators);
        return Task.CompletedTask;
    }

}
