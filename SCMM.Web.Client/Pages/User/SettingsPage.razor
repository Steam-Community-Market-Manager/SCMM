@using SCMM.Web.Data.Models.UI.Profile
@page "/settings"
@inject ILogger<SettingsPage> Logger
@inject ISnackbar Snackbar
@inject IDialogService Dialogs
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="SCMM - Settings" class="mt-3 mb-6 mx-6">

    @if (IsUpdating)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-n3 mb-2 mx-n6" />
    }

    <MudTabs Elevation="0" Class="mud-tabs-transparent">
        <MudTabPanel Icon="fas fa-fw fa-user mr-2" Text="Profile" Disabled="State.IsPrerendering">
            <MudGrid Spacing="3">
                <MudItem xs="12">
                    <MudCard class="full-height d-flex flex-column mud-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                                    <i class="fab fa-fw fa-steam mr-2"></i><span>Steam Profile</span>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent class="d-flex flex-column justify-center align-center">
                            <MudGrid Spacing="4">
                                <MudItem xs="12" md="3" xl="2" xxl="1" class="d-flex flex-column justify-center align-center">
                                    <MudAvatar Class="full-width full-height text-centered mx-2 mb-4" Style="max-width:8rem; max-height:8rem;">
                                        <MudImage Src="@State.Profile.AvatarLargeUrl" />
                                    </MudAvatar>
                                    <MudText Typo="@MudBlazor.Typo.body1" Color="MudBlazor.Color.Default">
                                        <span>@State.Profile.Name</span>
                                    </MudText>
                                    <MudText Typo="@MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary">
                                        <span>@State.Profile.SteamId</span>
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12" md="9" xl="10" xxl="11">
                                    <MudGrid Spacing="4">
                                        <MudItem xs="12">
                                            <MudTextField Label="Steam Trade URL" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="State.IsPrerendering"
                                                          @bind-Value="@Update.TradeUrl" DebounceInterval="1000" OnDebounceIntervalElapsed="UpdateProfile"
                                                          HelperText="Optional. If set, we'll allow other users to send you trade requests if they are looking for items that you've flagged as available for trade. Click on the question mark icon to view and manage your Steam Trade URL."
                                                          Adornment="Adornment.End" AdornmentIcon="fa fa-fw fa-question-circle" OnAdornmentClick="@(() => ExternalNavigationManager.NavigateToNewTabAsync($"https://steamcommunity.com/id/{State.Profile.SteamId}/tradeoffers/privacy#trade_offer_access_url"))" />
                                        </MudItem>
                                        <MudItem xs="12" lg="6" xl="4" xxl="3">
                                            <MudSelect T="ItemAnalyticsParticipationType" Value="@Update.ItemAnalyticsParticipation" ValueChanged="((x) => { Update.ItemAnalyticsParticipation = x; _ = UpdateProfile(); })" Label="Item Analytics" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true"
                                                       HelperText="Participation allows SCMM to use public information about the items in your inventory to improve the accuracy of item analytics. Some analytics may only be available to users that choose to participate, fair is fair." Disabled="State.IsPrerendering">
                                               @foreach (var value in Enum.GetValues<ItemAnalyticsParticipationType>())
                                               {
                                                    <MudSelectItem Value="@value">@value.GetDisplayName()</MudSelectItem>
                                               }
                                            </MudSelect>
                                        </MudItem>
                                        <MudItem xs="12" lg="6" xl="4" xxl="3">
                                            <MudTextField Label="Gambling Balance" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="State.IsPrerendering || true"
                                                          Value="@State.Profile.Currency.ToPriceString(State.Profile.GamblingOffset)" 
                                                          HelperText="Optional. If you use gambling sites, enter your total win/lose amount here. We'll factor this in to your inventory profit/loss total." />
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                @if (State.IsInRole(Roles.Donator) || State.IsInRole(Roles.VIP))
                {
                    <MudItem xs="12">
                        <MudPaper Outlined="true" class="d-flex flex-row pa-4" style="background:#ffd70044; color:#ffd700">
                            <MudText Typo="@MudBlazor.Typo.h4" Color="MudBlazor.Color.Inherit" Class="pr-2">
                                <i class="@($"fas fa-fw {(State.Profile.DonatorLevel > 0 ? "fa-crown" : "fa-star")}")"></i>
                            </MudText>
                            <div class="pl-2">
                                <MudText Typo="@MudBlazor.Typo.body1" Color="MudBlazor.Color.Inherit">
                                    <strong>You are a @(State.Profile.DonatorLevel > 0 ? Roles.Donator : Roles.VIP)!</strong>
                                </MudText>
                                <MudText Typo="@MudBlazor.Typo.body2" Color="MudBlazor.Color.Inherit">
                                    @if (State.IsInRole(Roles.Donator))
                                    {
                                        <span>Thank you for your generous support and/or donation(s) to the SCMM project.</span>
                                    }
                                    else
                                    {
                                        <span>Thank you for contributing to the SCMM project.</span>
                                    }
                                </MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Icon="fas fa-fw fa-sliders-h mr-2" Text="Preferences" Disabled="State.IsPrerendering">
            <MudGrid Spacing="3">
                <MudItem xs="12">
                    <MudCard class="full-height d-flex flex-column mud-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                                    <i class="fas fa-fw fa-language mr-2"></i><span>Locale</span>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent class="pt-0">
                            <MudGrid Spacing="4">
                                <MudItem xs="12" lg="6" xl="4" xxl="3">
                                    <MudTextField Label="Preferred Language" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="State.IsPrerendering || true"
                                                  Value="@State.Profile.Language.Name"
                                                  HelperText="Some underlying Steam data is only available in English and therefore we may not be able to show all text in your preferred language." />
                                </MudItem>
                                <MudItem xs="12" lg="6" xl="4" xxl="3">
                                    <MudTextField Label="Preferred Currency" Variant="MudBlazor.Variant.Outlined" FullWidth Disabled="State.IsPrerendering || true"
                                                  Value="@State.Profile.Currency.Name"
                                                  HelperText="To change currency, use the currency picker in the top-right corner of the page." />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudCard class="full-height d-flex flex-column mud-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                                    <i class="fas fa-fw fa-star mr-2"></i><span>Customisation</span>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent class="pt-0">
                            <MudGrid Spacing="4">
                                <Preference Title="Store 'Top Sellers'" 
                                            Description="Which data source is used to determine top selling items in the store.">
                                    <MudSelect T="StoreTopSellerRankingType" Value="@Update.StoreTopSellers" ValueChanged="((x) => { Update.StoreTopSellers = x; _ = UpdateProfile(); })" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="false" Class="ma-0" Disabled="State.IsPrerendering">
                                        @foreach (var value in Enum.GetValues<StoreTopSellerRankingType>())
                                        {
                                            <MudSelectItem Value="@value">@value.GetDisplayName()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </Preference>
                                <Preference Title="Market Types" 
                                            Description="Which third-party markets are shown when displaying item prices.">
                                    <MudSelect T="MarketType" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="false" Class="ma-0" Disabled="State.IsPrerendering"
                                               @bind-SelectedValues="@SelectedMarketTypes" ToStringFunc="@((x) => x.GetDisplayName())" OnClose="@((x) => UpdateProfile())"
                                               MultiSelection="true" MultiSelectionTextFunc="@(new Func<List<string>, string>(x => x.Count > 0 ? String.Join(", ", x) : "No third-party markets"))">
                                        @foreach (var value in Enum.GetValues<MarketType>().Where(x => x.IsEnabled() && x.IsAppSupported(State.AppId)&& !x.IsFirstParty()).OrderBy(x => x.ToString()))
                                        {
                                            <MudSelectItem Value="@value">@value.GetDisplayName()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </Preference>
                                <Preference Title="Market 'Value'" 
                                            Description="Which data source is used to determine an items price/value.">
                                    <MudSelect T="MarketValueType" Value="@Update.MarketValue" ValueChanged="((x) => { Update.MarketValue = x; _ = UpdateProfile(); })" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="false" Class="ma-0" Disabled="State.IsPrerendering || true">
                                        @foreach (var value in Enum.GetValues<MarketValueType>())
                                        {
                                            <MudSelectItem Value="@value">@value.GetDisplayName()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </Preference>
                                <Preference Title="Item Summary Information" 
                                            Description="What additional information to show when viewing item summaries.">
                                    <MudSelect T="ItemInfoType" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="false" Class="ma-0" Disabled="State.IsPrerendering"
                                               @bind-SelectedValues="@SelectedItemInfoTypes" ToStringFunc="@((x) => x.GetDisplayName())" OnClose="@((x) => UpdateProfile())"
                                               MultiSelection="true" MultiSelectionTextFunc="@(new Func<List<string>, string>(x => x.Count > 0 ? String.Join(", ", x) : "No additional info"))">
                                        @foreach (var value in Enum.GetValues<ItemInfoType>().OrderBy(x => x.ToString()))
                                        {
                                            <MudSelectItem Value="@value">@value.GetDisplayName()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </Preference>
                                <Preference Title="Item Detailed Information" 
                                            Description="Which website to use when you click on an item (to view more details).">
                                    <MudSelect T="ItemInfoWebsiteType" Value="@Update.ItemInfoWebsite" ValueChanged="((x) => { Update.ItemInfoWebsite = x; _ = UpdateProfile(); })" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="false" Class="ma-0" Disabled="State.IsPrerendering">
                                        @foreach (var value in Enum.GetValues<ItemInfoWebsiteType>())
                                        {
                                            <MudSelectItem Value="@value">@value.GetDisplayName()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </Preference>
                                <Preference Title="Item Market Fees" 
                                            Description="Should market sales fees be included in all resell, profit, and investment gain/loss calculations. This is recommended if you primarily sell your items on skin marketplaces (as opposed to selling for cash).">  
                                    <MudSwitch T="bool" Value="@Update.ItemIncludeMarketFees" ValueChanged="((x) => { Update.ItemIncludeMarketFees = x; _ = UpdateProfile(); })" Color="Color.Primary" Class="ma-0" Disabled="State.IsPrerendering">@(Update.ItemIncludeMarketFees ? "Include" : "Exclude")</MudSwitch>
                                </Preference>
                                <Preference Title="Inventory Item Drops" 
                                            Description="@($"Should 'free' item drops (e.g. Twitch and {State.App.PublisherName} items) be shown when viewing item inventories and item collections.")">
                                    <MudSwitch T="bool" Value="@Update.InventoryShowItemDrops" ValueChanged="((x) => { Update.InventoryShowItemDrops = x; _ = UpdateProfile(); })" Color="Color.Primary" Class="ma-0" Disabled="State.IsPrerendering">@(Update.InventoryShowItemDrops ? "Show" : "Hide")</MudSwitch>
                                </Preference>
                                <Preference Title="Inventory Unmarketable Items" 
                                            Description="Should unmarketable items (e.g. Permanent store and charity items) be shown when viewing item inventories and item collections.">  
                                    <MudSwitch T="bool" Value="@Update.InventoryShowUnmarketableItems" ValueChanged="((x) => { Update.InventoryShowUnmarketableItems = x; _ = UpdateProfile(); })" Color="Color.Primary" Class="ma-0" Disabled="State.IsPrerendering">@(Update.InventoryShowUnmarketableItems ? "Show" : "Hide")</MudSwitch>
                                </Preference>
                                <Preference Title="Inventory Value Movement Display" 
                                            Description="How should inventory value movements be shown.">  
                                    <MudSelect T="InventoryValueMovementDisplayType" Value="@Update.InventoryValueMovemenDisplay" ValueChanged="((x) => { Update.InventoryValueMovemenDisplay = x; _ = UpdateProfile(); })" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="false" Class="ma-0" Disabled="State.IsPrerendering">
                                        @foreach (var value in Enum.GetValues<InventoryValueMovementDisplayType>())
                                        {
                                            <MudSelectItem Value="@value">@value.GetDisplayName()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </Preference>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Icon="fas fa-fw fa-bell mr-4" Text="Notifications" Disabled="State.IsPrerendering">
            <MudGrid Spacing="3">
                <MudItem xs="12">
                    <MudCard class="full-height d-flex flex-column mud-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                                    <i class="fas fa-fw fa-bell mr-2"></i><span>Notifications</span>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent class="pt-0">
                            <MudGrid Spacing="4">
                                <Preference Title="New Workshop Item Submission" 
                                            Description="Be notified when an accepted item author submits a new item to the workshop. Items from accepted authors are generally the highest quality workshop submissions. Recommended if you like to stay up to date with the latest item submissions that have the potentional to be accepted in-game.">
                                    <MudSelect T="string" Value="@("Disabled")" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering || true">
                                       <MudSelectItem Value="@("Disabled")" />
                                    </MudSelect>
                                </Preference>
                                <Preference Title="New Workshop Collection Submission" 
                                            Description="Be notifieid when a accepted item collection gets continued with a new workshop submission. Recommended if you like to stay up to date with ermering collections and continuations.">
                                    <MudSelect T="string" Value="@("Disabled")" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering || true">
                                       <MudSelectItem Value="@("Disabled")" />
                                    </MudSelect>
                                </Preference>
                                <Preference Title="New Store Items" 
                                            Description="Be notified when new items are released to the store. This generally happens every Thursday around 8PM UTC, exact times vary week to week.">
                                    <MudSelect T="string" Value="@("Disabled")" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering || true">
                                       <MudSelectItem Value="@("Disabled")" />
                                    </MudSelect>
                                </Preference>
                                <Preference Title="New Store Video" 
                                            Description="Be notified when a new community video featuring the item store has been uploaded. Recommended if you like to watch commentary about the weeks store items.">
                                    <MudSelect T="string" Value="@("Disabled")" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering || true">
                                       <MudSelectItem Value="@("Disabled")" />
                                    </MudSelect>
                                </Preference>
                                <Preference Title="New Market Items" 
                                            Description="Be notified when new items are release to the Steam Community Market. This generally happens every Thursday at 12AM UTC and 8PM UTC (when the item store updates). Recommended if you prefer to buy items from the market and want to get a low buy order in early.">
                                    <MudSelect T="string" Value="@("Disabled")" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering || true">
                                       <MudSelectItem Value="@("Disabled")" />
                                    </MudSelect>
                                </Preference>
                                <Preference Title="Item Updated" 
                                            Description="@($"Be notified when accepted items are updated. This doesn't happen often, but occasionally {State.App.PublisherName} will modify or fix items after they have been accepted in-game. In rare instances, the appearance of items can be modified. Recommended if you'd like to stay up to day with potential changes to in-game items.")">
                                    <MudSelect T="string" Value="@("Disabled")" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering || true">
                                       <MudSelectItem Value="@("Disabled")" />
                                    </MudSelect>
                                </Preference>
                                <Preference Title="Item Market High" 
                                            Description="Be notified when an item reaches a new all-time high price on the Steam Community Market. Recommended if you like to sell items as they peak in price. This notification has a 24hr cool-down to avoid spam.">
                                    <MudSelect T="string" Value="@("Disabled")" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering || true">
                                       <MudSelectItem Value="@("Disabled")" />
                                    </MudSelect>
                                </Preference>
                                <Preference Title="Item Market Low" 
                                            Description="Be notified when an item reaches a new all-time low price on the Steam Community Market. Recommended if you like to buy items while at their cheapest. This notification has a 24hr cool-down to avoid spam.">
                                    <MudSelect T="string" Value="@("Disabled")" Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Class="ma-0" Disabled="State.IsPrerendering || true">
                                       <MudSelectItem Value="@("Disabled")" />
                                    </MudSelect>
                                </Preference>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudCard class="full-height d-flex flex-column mud-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                                    <i class="fab fa-fw fa-discord mr-2"></i><span>Discord</span>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent class="py-0">
                            <MudAlert Severity="MudBlazor.Severity.Normal" ContentAlignment="HorizontalAlignment.Center" NoIcon="true" Class="pa-8">Empty</MudAlert>
                        </MudCardContent>
                        <MudCardActions class="pa-4">
                            <MudButton Variant="MudBlazor.Variant.Outlined" Color="MudBlazor.Color.Primary" StartIcon="fas fa-fw fa-link" Disabled="State.IsPrerendering || true">
                                Link Discord
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudCard class="full-height d-flex flex-column mud-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default" Class="d-flex align-center">
                                    <WebHookIcon /><span class="ml-2">Webhooks</span>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent class="py-0">
                            <MudAlert Severity="MudBlazor.Severity.Normal" ContentAlignment="HorizontalAlignment.Center" NoIcon="true" Class="pa-8">Empty</MudAlert>
                        </MudCardContent>
                        <MudCardActions class="pa-4">
                            <MudButton Variant="MudBlazor.Variant.Outlined" Color="MudBlazor.Color.Primary" StartIcon="fas fa-fw fa-plus" Disabled="State.IsPrerendering || true">
                                Add Webhook
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Icon="fas fa-fw fa-database mr-3" Text="Data" Disabled="State.IsPrerendering">
            <MudGrid Spacing="3">
                <MudItem xs="12">
                    <MudCard class="full-height d-flex flex-column mud-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="@MudBlazor.Typo.h6" Color="MudBlazor.Color.Default">
                                    <i class="fas fa-fw fa-key mr-2"></i><span>Your Data</span>
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent class="py-0">
                            <MudText Typo="@MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                                <span>SCMM <MudLink Typo="MudBlazor.Typo.body2" Href="/privacy">respects your privacy</MudLink> and here you can manage the data we've collected about your Steam Profile. It is your right to download a copy of this data, or request that it be deleted.</span><br/>
                                <span>Your SCMM data includes information such as:</span>
                            </MudText>
                            <MudText Typo="@MudBlazor.Typo.body2" Color="MudBlazor.Color.Secondary" GutterBottom>
                                <ul class="fa-ul">
                                    <li><span class="fa-li">-</span>Steam ID, Name, Custom URL, Avatar URL, Trade URL</li>
                                    <li><span class="fa-li">-</span>Steam inventory item list <i>(including quantity and purchase source/price)</i></li>
                                    <li><span class="fa-li">-</span>Steam market item list <i>(monitored items)</i></li>
                                    <li><span class="fa-li">-</span>Discord ID</li>
                                    <li><span class="fa-li">-</span>Gambling balance</li>
                                    <li><span class="fa-li">-</span>SCMM language and currency</li>
                                    <li><span class="fa-li">-</span>SCMM donation level</li>
                                    <li><span class="fa-li">-</span>SCMM roles</li>
                                    <li><span class="fa-li">-</span>SCMM preferences <i>(including privacy and notification settings)</i></li>
                                </ul>
                            </MudText>
                            @if (State.IsInRole(Roles.Creator))
                            {
                                <MudAlert Severity="Severity.Warning" Icon="fas fa-fw fa-exclamation-triangle" Class="mt-4 mud-alert-outlined-warning">
                                    <span>As an accepted item creator, if you choose to delete your data, we must still retain a minimal amount of your public Steam information-- specifically, your Steam ID, Name, and Avatar URL. This is nessecary to protect the integrity of the SCMM database and allow other users to view the items that you've created.</span>
                                </MudAlert>
                            }
                        </MudCardContent>
                        <MudCardActions class="d-flex flex-wrap pt-4 px-4">
                            <MudButton OnClick="@DownloadProfileData" Variant="MudBlazor.Variant.Outlined" Color="MudBlazor.Color.Default" StartIcon="fas fa-fw fa-download" Class="mr-4 mb-4" Disabled="State.IsPrerendering">
                                Download Your Data
                            </MudButton>
                            <MudButton OnClick="@ShowDeleteProfileDataConfirmationDialog" Variant="MudBlazor.Variant.Outlined" Color="MudBlazor.Color.Error" StartIcon="fas fa-fw fa-trash" Class="mr-4 mb-4" Disabled="State.IsPrerendering">
                                Delete Your Data
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
    </MudTabs>

</PageContainer>

@code {

    private bool IsUpdating { get; set; }

    private UpdateProfileCommand Update { get; set; }
    
    private IEnumerable<MarketType> SelectedMarketTypes { get; set; }

    private IEnumerable<ItemInfoType> SelectedItemInfoTypes { get; set; }

    private Exception UpdateException { get; set; }

    protected override void OnInitialized()
    {
        if (!State.IsAuthenticated)
        {
            ExternalNavigationManager.NavigateToAsync($"/signin?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        }
        else 
        {
            SelectedMarketTypes = State.Profile.MarketTypes;
            SelectedItemInfoTypes = State.Profile.ItemInfo;
            Update = new UpdateProfileCommand()
            {
                TradeUrl = State.Profile.TradeUrl,
                ItemAnalyticsParticipation = State.Profile.ItemAnalyticsParticipation,
                GamblingOffset = State.Profile.GamblingOffset,
                StoreTopSellers = State.Profile.StoreTopSellers,
                MarketValue = State.Profile.MarketValue,
                ItemInfo = State.Profile.ItemInfo,
                ItemInfoWebsite = State.Profile.ItemInfoWebsite,
                ItemIncludeMarketFees = State.Profile.ItemIncludeMarketFees,
                InventoryShowItemDrops = State.Profile.InventoryShowItemDrops,
                InventoryShowUnmarketableItems = State.Profile.InventoryShowUnmarketableItems,
                InventoryValueMovemenDisplay = State.Profile.InventoryValueMovementDisplay
            };
        }
    }

    public async Task UpdateProfile()
    {
        if (IsUpdating) 
        {
            return;
        }
        try 
        {
            IsUpdating = true;
            Update.MarketTypes = SelectedMarketTypes?.ToArray();
            Update.ItemInfo = SelectedItemInfoTypes?.ToArray();
            StateHasChanged();

            var response = await Http.PutAsJsonWithDefaultsAsync($"api/profile", Update);
            if(!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(await response.Content.ReadAsStringAsync(), null, response.StatusCode);
            }
            
            UpdateException = null;
            Snackbar.Add($"Changes saved!", MudBlazor.Severity.Success, options =>
            {
                options.Icon = "fas fa-fw fa-check";
                options.RequireInteraction = false;
                options.ShowCloseIcon = false;
            });

            await State.LoadFromServerProfileAsync(Http);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error updating profile details");
            Snackbar.Add($"Unable to update profile, your recent changes may not have been applied, try again later.", MudBlazor.Severity.Error, options =>
            {
                options.Icon = "fas fa-fw fa-exclamation-triangle";
                options.RequireInteraction = true;
                options.ShowCloseIcon = true;
            });
            UpdateException = ex;
        }
        finally
        {
            IsUpdating = false;
            StateHasChanged();
        }
    }
    
    private void DownloadProfileData()
    {
        ExternalNavigationManager.NavigateToAsync("/api/profile/data");
    }
    
    private async Task ShowDeleteProfileDataConfirmationDialog()
    {
        var confirmation = Dialogs.Show<ConfirmationDialog>(null, parameters: new DialogParameters()
        {
            ["Title"] = "Are you sure?",
            ["Description"] = "Do you really want to delete your profile from SCMM? This process cannot be undone.",
            ["ConfirmText"] = "Yes, delete all my data"
        });

        var result = await confirmation.Result;
        if (!result.Canceled && (bool) result.Data == true)
        {
            await DeleteProfileDataAndSignout();
        }
    }

    private async Task DeleteProfileDataAndSignout()
    {
        try 
        {
            var response = await Http.DeleteAsync($"api/profile/data");
            if(!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException(await response.Content.ReadAsStringAsync(), null, response.StatusCode);
            }

            await ExternalNavigationManager.NavigateToAsync("/signout");
        }
        catch (Exception)
        {
            Snackbar.Add($"Unable to delete profile, try again later.", MudBlazor.Severity.Error, options =>
            {
                options.Icon = "fas fa-fw fa-exclamation-triangle";
                options.RequireInteraction = true;
                options.ShowCloseIcon = true;
            });
        }
    }
}
