@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Analytic
@using SCMM.Web.Client.Shared.Dialogs.Items
@page "/market/deals"
@page "/market/deals/{tab}"
@inherits PersistentComponent
@inject ILogger<MarketDealsPage> Logger
@inject ISnackbar Snackbar
@inject IDialogService Dialogs
@inject ISystemService SystemService
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="@($"{State?.App?.Name} Market Deals")">
    <MudAlert Icon="fa fa-fw fa-exclamation-triangle" Severity="Severity.Warning" Variant="MudBlazor.Variant.Text" Class="mud-alert-outlined-warning">
        <span>Always double check prices manually before buying or selling from a third-party market. Prices shown here update once every hour and may no longer be available.</span>
    </MudAlert>
    <MudTabs Elevation="0" ActivePanelIndex="TabIndex" ActivePanelIndexChanged="OnSelectedTabChanged" KeepPanelsAlive="false" Class="mud-tabs-transparent">
        <ChildContent>

            <MudTabPanel Icon="fas fa-fw fa-search-dollar mr-2" Text="Cheapest Offers" Disabled="State.IsPrerendering">
                <AnalyticsPanel>
                    @if (State.Profile.MarketTypes.Any())
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary" GutterBottom="true">
                            <span>Looking to buy a particular item?</span><br/>
                            <span>Find the cheapest offer across all markets here.</span>
                        </MudText>
                        <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Class="mx-n4 mb-n4" Style="height:70vh;">
                            <thead>
                                <tr>
                                    <th class="py-0 my-0">
                                        <MudTextField T="string" Value="Filter" ValueChanged="async (x) => { Filter = x; await VirtualiseMarketCheapestListings.RefreshDataAsync(); StateHasChanged(); }" DebounceInterval="500" 
                                                      Placeholder="Search items..." FullWidth="true" Class="mud-input-full-height ma-0" Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" Disabled="State.IsPrerendering" />
                                    </th>
                                    <th>
                                        <MudSelect T="MarketType?" Value="@MarketType" ValueChanged="async (x) => { MarketType = x; await VirtualiseMarketCheapestListings.RefreshDataAsync(); StateHasChanged(); }" 
                                                   ToStringFunc="@(x => $"Cheapest {(x != null ? $"{x.GetDisplayName()} offer" : "offer from all markets")}")"
                                                   Margin="MudBlazor.Margin.None" Dense="true" FullWidth="true" Class="mud-input-full-height mud-input-transparent ma-0" Disabled="State.IsPrerendering">
                                        
                                            <MudSelectItem Value="@((MarketType?)null)">
                                                <span>Cheapest offer from <strong>all markets</strong></span>
                                            </MudSelectItem>
                                            @foreach (var marketType in State.Profile.MarketTypes.Where(x => x.IsEnabled() && x.IsAppSupported(State.AppId) && !x.IsFirstParty()))
                                            {
                                                <MudSelectItem Value="@((MarketType?)marketType)">
                                                    <div class="d-flex justify-start align-center">
                                                        <span>Cheapest </span>
                                                        <img src="@($"/images/app/{State.App.Id}/markets/{marketType.ToString().ToLower()}.png")" class="mx-2" style="width:1.5em; height:1.5em" />
                                                        <span><strong>@marketType.GetDisplayName()</strong> offer</span>
                                                    </div>
                                                </MudSelectItem>
                                            }
                                        </MudSelect>
                                    </th>
                                    @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketPriceTracking) == true)
                                    {
                                        <th>Steam Community Market</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                <Virtualize @ref="VirtualiseMarketCheapestListings" ItemsProvider="LoadMarketCheapestListings" Context="item" SpacerElement="tr">
                                    <ItemContent>
                                        <tr>
                                            <td>
                                                <div class="d-flex flex-row justify-start align-center clickable hover-zoom" @onclick="@(() => ShowItemDetailsDialog(item.Name, item.Id.ToString()))">
                                                    <img src="@item.IconUrl" class="mr-1" style="width:32px; height:32px;" />
                                                    <MudText Typo="Typo.body2">@item.Name</MudText>
                                                    @if (item.IsBeingManipulated)
                                                    {
                                                        <MudChip Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Warning" Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-exclamation-triangle" Text="Price Manipulation" title="@($"It is suspected that this items price is being manipulated on the market because {item.ManipulationReason.FirstCharToLower()}")" Class="ml-2" />
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center gap-1">
                                                    <MudButton Variant="Variant.Filled" Color="@(item.IsBeingManipulated ? Color.Warning : Color.Success)" Size="Size.Small" OnClick="@((_) => BuyItem(item.BuyUrl))" Disabled="State.IsPrerendering">Buy</MudButton>
                                                    <img src="@($"/images/app/{State.App.Id}/markets/{item.BuyFrom.ToString().ToLower()}.png")" alt="@item.BuyFrom.GetDisplayName()" title="@item.BuyFrom.GetDisplayName()" class="mx-2" style="width:1.5em; height:1.5em" />
                                                    <span>@State.Currency.ToPriceString(item.BuyTotal)</span>
                                                    @if (State.Profile.ItemIncludeMarketFees && item.BuyFee != 0)
                                                    {
                                                        <MudTooltip>
                                                            <TooltipContent>
                                                                @if (item.BuyFee > 0)
                                                                {
                                                                    <span>Price includes @State.Currency.ToPriceString(item.BuyFee) in estimated fees charged by @item.BuyFrom.GetDisplayName()</span>
                                                                }
                                                                else
                                                                {
                                                                    <span>Price includes @State.Currency.ToPriceString(item.BuyFee) in estimate discounts gained by purchasing new @item.BuyFrom.GetDisplayName() balance</span>
                                                                }
                                                            </TooltipContent>
                                                            <ChildContent>
                                                                <i class="fa fa-fw fa-comment-dollar"></i>
                                                            </ChildContent>
                                                        </MudTooltip>
                                                    }
                                                    <MudTooltip>
                                                        <TooltipContent>
                                                            <span>Save @State.Currency.ToPriceString(item.DiscountAmount)</span>
                                                        </TooltipContent>
                                                        <ChildContent>
                                                            <MudChip Variant="Variant.Text" Color="@(item.IsBeingManipulated ? Color.Warning : ((item.DiscountAmount > 0) ? Color.Success : Color.Secondary))" Size="@Size.Small" Text="@($"-{item.DiscountAmount.ToPercentageString(item.ReferemcePrice) ?? "0%"}")" />
                                                        </ChildContent>
                                                    </MudTooltip>
                                                    @if (GetTimeSinceLastMarketPriceUpdate(item.BuyFrom) != null)
                                                    {
                                                        <small class="mud-secondary-text"> @GetTimeSinceLastMarketPriceUpdate(item.BuyFrom).Value.ToDurationString(maxGranularity: 2, prefix: "price checked", suffix: "ago") </small>
                                                    }
                                                </MudText>
                                            </td>
                                            @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketPriceTracking) == true)
                                            {
                                                <td>
                                                    <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center gap-1">
                                                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" OnClick="@((_) => ViewMarketItem(item.AppId, item.Name))" Disabled="State.IsPrerendering">Compare</MudButton>
                                                        <img src="@($"/images/app/{State.App.Id}/markets/{item.ReferenceFrom.ToString().ToLower()}.png")" alt="@item.ReferenceFrom.GetDisplayName()" title="@item.ReferenceFrom.GetDisplayName()" class="mx-2" style="width:1.5em; height:1.5em" />
                                                        <span>@State.Currency.ToPriceString(item.ReferemcePrice)</span>
                                                    </MudText>
                                                </td>
                                            }
                                        </tr>
                                    </ItemContent>
                                    <Placeholder>
                                        <tr>
                                            <td>
                                                <div class="d-flex flex-row justify-start align-center">
                                                    <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                                </div>
                                            </td>
                                            <td>—</td>
                                            @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketPriceTracking) == true)
                                            {
                                                <td>—</td>
                                            }
                                        </tr>
                                    </Placeholder>
                                </Virtualize>
                            </tbody>
                        </MudSimpleTable>
                    }
                    else
                    {
                        <Alert Severity="Severity.Normal" Icon="fas fa-fw fa-shop mr-2" Title="No third-party markets enabled" SubTitle="To use this feature, enable at least one third-party market in your profile preferences." />
                    }
                </AnalyticsPanel>
            </MudTabPanel>
            
            @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.ItemMarketPriceTracking) == true)
            {
                <MudTabPanel Icon="fas fa-fw fa-exchange-alt mr-2" Text="Profitable Flips" Disabled="State.IsPrerendering">
                    <AnalyticsPanel>
                        @if (State.Profile.MarketTypes.Any())
                        {
                            <MudText Typo="Typo.body2" Color="Color.Secondary" GutterBottom="true">
                                <span>Looking to top up your Steam wallet balance?</span><br/>
                                <span>Buy these undervalued items from third party markets and flip them on the Steam Community Market for profit. Quick profit can be made by flipping instantly to the highest buy order. Maximum profit can be made by listing a sell order and waiting for somebody to buy it.</span>
                            </MudText>
                            <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Class="mx-n4 mb-n4" Style="height:70vh;">
                                <thead>
                                    <tr>
                                        <th class="py-0 my-0">
                                            <MudTextField T="string" Value="Filter" ValueChanged="async (x) => { Filter = x; await VirtualiseMarketFlips.RefreshDataAsync(); StateHasChanged(); }" DebounceInterval="500" 
                                                          Placeholder="Search items..." FullWidth="true" Class="mud-input-full-height ma-0" Adornment="Adornment.Start" AdornmentIcon="fas fa-fw fa-filter mr-2" IconSize="MudBlazor.Size.Small" Disabled="State.IsPrerendering" />
                                        </th>
                                        <th>
                                            <MudSelect T="MarketType?" Value="@MarketType" ValueChanged="async (x) => { MarketType = x; await VirtualiseMarketFlips.RefreshDataAsync(); StateHasChanged(); }" 
                                                       ToStringFunc="@(x => $"Buy it {(x != null ? $"from {x.GetDisplayName()}" : "from the cheapest market")}")"
                                                       Margin="MudBlazor.Margin.None" Dense="true" FullWidth="true" Class="mud-input-full-height mud-input-transparent ma-0" Disabled="State.IsPrerendering">
                                        
                                                <MudSelectItem Value="@((MarketType?)null)">
                                                    <span>Buy it from the <strong>cheapest market</strong></span>
                                                </MudSelectItem>
                                                @foreach (var marketType in State.Profile.MarketTypes.Where(x => x.IsEnabled() && x.IsAppSupported(State.AppId)&& !x.IsFirstParty()))
                                                {
                                                    <MudSelectItem Value="@((MarketType?)marketType)">
                                                        <div class="d-flex justify-start align-center">
                                                        <span>Buy it from </span>
                                                            <img src="@($"/images/app/{State.App.Id}/markets/{marketType.ToString().ToLower()}.png")" class="mx-2" style="width:1.5em; height:1.5em" />
                                                        <span><strong>@marketType.GetDisplayName()</strong></span>
                                                        </div>
                                                    </MudSelectItem>
                                                }
                                            </MudSelect>
                                        </th>
                                        <th class="pa-0">
                                            <i class="fa fa-fw fa-arrow-right"></i>
                                        </th>
                                        <th>
                                            <MudSelect T="bool?" Value="@SellNow" ValueChanged="OnSellNowChanged" Margin="Margin.None" Dense="true" FullWidth="true" Class="mud-input-full-height mud-input-transparent ma-0" Disabled="State.IsPrerendering">
                                                <MudSelectItem Value="@((bool?)true)">
                                                    <span><strong>Sell it now</strong> for quick profit</span>
                                                </MudSelectItem>
                                                <MudSelectItem Value="@((bool?)false)">
                                                    <span><strong>List it now</strong> and <strong>sell later</strong> for maximum profit</span>
                                                </MudSelectItem>
                                            </MudSelect>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <Virtualize @ref="VirtualiseMarketFlips" ItemsProvider="LoadMarketFlips" Context="item" SpacerElement="tr">
                                        <ItemContent>
                                            <tr>
                                                <td>
                                                    <div class="d-flex flex-row justify-start align-center clickable hover-zoom" @onclick="@(() => ShowItemDetailsDialog(item.Name, item.Id.ToString()))">
                                                        <img src="@item.IconUrl" class="mr-2" style="width:32px; height:32px;" />
                                                        <MudText Typo="Typo.body2">@item.Name</MudText>
                                                        @if (item.IsBeingManipulated)
                                                        {
                                                            <MudChip Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Warning" Size="MudBlazor.Size.Small" Icon="fas fa-fw fa-exclamation-triangle" Text="Price Manipulation" title="@($"It is suspected that this items price is being manipulated on the market because {item.ManipulationReason.FirstCharToLower()}")" Class="ml-2" />
                                                        }
                                                    </div>
                                                </td>
                                                <td>
                                                    <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center gap-1">
                                                        <MudButton Variant="Variant.Filled" Color="@(item.IsBeingManipulated ? Color.Warning : Color.Success)" Size="Size.Small" OnClick="@((_) => BuyItem(item.BuyUrl))" Disabled="State.IsPrerendering">Buy</MudButton>
                                                        <img src="@($"/images/app/{State.App.Id}/markets/{item.BuyFrom.ToString().ToLower()}.png")" alt="@item.BuyFrom.GetDisplayName()" title="@item.BuyFrom.GetDisplayName()" class="mx-2" style="width:1.5em; height:1.5em" />
                                                        <span>@State.Currency.ToPriceString(item.BuyTotal)</span>
                                                        @if (State.Profile.ItemIncludeMarketFees && item.BuyFee != 0)
                                                        {
                                                            <MudTooltip>
                                                                <TooltipContent>
                                                                    @if (item.BuyFee > 0)
                                                                    {
                                                                        <span>Price includes @State.Currency.ToPriceString(item.BuyFee) in estimated fees charged by @item.BuyFrom.GetDisplayName()</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span>Price includes @State.Currency.ToPriceString(item.BuyFee) in estimate discounts gained by purchasing @item.BuyFrom.GetDisplayName() balance</span>
                                                                    }
                                                                </TooltipContent>
                                                                <ChildContent>
                                                                    <i class="fa fa-fw fa-comment-dollar"></i>
                                                                </ChildContent>
                                                            </MudTooltip>
                                                        }
                                                        @if (GetTimeSinceLastMarketPriceUpdate(item.BuyFrom) != null)
                                                        {
                                                            <small class="mud-secondary-text"> @GetTimeSinceLastMarketPriceUpdate(item.BuyFrom).Value.ToDurationString(maxGranularity: 2, prefix: "price checked", suffix: "ago") </small>
                                                        }
                                                    </MudText>
                                                </td>
                                                <th class="pa-0">
                                                    <i class="fa fa-fw fa-arrow-right"></i>
                                                </th>
                                                <td>
                                                    <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center gap-1">
                                                        <MudButton Variant="Variant.Filled" Color="@(item.IsBeingManipulated ? Color.Warning : Color.Success)" Size="Size.Small" OnClick="@((_) => ViewMarketItem(item.AppId, item.Name))" Disabled="State.IsPrerendering">@(SellNow == true ? "Sell" : "List")</MudButton>
                                                        <img src="@($"/images/app/{State.App.Id}/markets/{item.SellTo.ToString().ToLower()}.png")" alt="@item.BuyFrom.GetDisplayName()" title="@item.BuyFrom.GetDisplayName()" class="mx-2" style="width:1.5em; height:1.5em" />
                                                        <span>
                                                            <span>@State.Currency.ToPriceString(item.SellPrice)</span>
                                                            @if (SellNow != true)
                                                            {
                                                                <span class="mud-secondary-text"> then wait <i class="fa fa-fw fa-clock"></i> </span>
                                                            }
                                                            <span class="mud-secondary-text"> for a</span> <span class="@(item.IsBeingManipulated ? "mud-warning-text" : "mud-success-text")">@State.Currency.ToPriceString(item.SellProfit)</span>
                                                        </span>
                                                        <MudChip Variant="Variant.Text" Color="@(item.IsBeingManipulated ? Color.Warning : Color.Success)" Size="@Size.Small" Text="@($"{item.SellProfit.ToPercentageString(item.BuyTotal) ?? "0%"}")" />
                                                        <span><span class="mud-secondary-text">profit @(State.Profile.ItemIncludeMarketFees ? "after" : "before") fees</span></span>
                                                    </MudText>
                                                </td>
                                            </tr>
                                        </ItemContent>
                                        <Placeholder>
                                            <tr>
                                                <td>
                                                    <div class="d-flex flex-row justify-start align-center">
                                                        <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                                    </div>
                                                </td>
                                                <td>—</td>
                                                <td></td>
                                                <td>—</td>
                                            </tr>
                                        </Placeholder>
                                    </Virtualize>
                                </tbody>
                            </MudSimpleTable>
                        }
                        else
                        {
                            <Alert Severity="Severity.Normal" Icon="fas fa-fw fa-shop mr-2" Title="No third-party markets enabled" SubTitle="To use this feature, enable at least one third-party market in your profile preferences." />
                        }
                    </AnalyticsPanel>
                </MudTabPanel>
            }

            @if (State.App?.FeatureFlags.HasFlag(SteamAppFeatureFlags.AssetDescriptionFeatureCrafting) == true)
            {
                <MudTabPanel Icon="fas fa-fw fa-hammer mr-2" Text="Crafting" Disabled="State.IsPrerendering">
                    <MudGrid Space="2">

                        <MudItem xs="12" xl="6">
                            <AnalyticsPanel Icon="fas fa-fw fa-box" Title="Containers" Subtitle="What is the cheapest way to aquire craftable containers?" Dense="true">
                                <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Class="flex-grow-1 full-height">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>Craft It</th>
                                            <th>Buy It</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <Virtualize ItemsProvider="LoadMarketCheapestCraftableContainerCosts" Context="item" SpacerElement="tr">
                                            <ItemContent>
                                                <tr @onclick="@((_) => BuyItem(item.BuyUrl))" class="clickable">
                                                    <td class="align-top">
                                                        <div class="d-flex flex-row justify-start align-start pa-2">
                                                            <img src="@item.IconUrl" class="mr-4" style="width:5em; height:5em;" />
                                                            <div>
                                                                <MudText Typo="Typo.body2" Color="MudBlazor.Color.Default"><strong>@item.Name</strong></MudText>
                                                                <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                                    @if (item.CraftingPrice >= item.BuyPrice)
                                                                    {
                                                                        <span>Cheapest to buy directly from @item.BuyFrom.GetDisplayName().</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span>Cheapest if you buy the resources and craft it yourself.</span>
                                                                    }
                                                                </MudText>
                                                                <MudSimpleTable Dense="true" Hover="true" Elevation="0">
                                                                    <tbody>
                                                                        @foreach(var component in item.CraftingComponents)
                                                                        {
                                                                            <tr @onclick="@((_) => ViewItem(component.Component))" class="clickable table-disable-borders">
                                                                                <td>
                                                                                    <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary">@(component.Quantity)x</MudText>
                                                                                </td>
                                                                                <td>
                                                                                    <div class="d-flex flex-row justify-start align-center">
                                                                                        <img src="@component.Component.IconUrl" class="mr-1" style="width:24px; height:24px;" />
                                                                                        <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Default">
                                                                                            <span>@component.Component.Name <span class="mud-secondary-text">(@component.Name)</span></span>
                                                                                        </MudText>
                                                                                    </div>
                                                                                </td>
                                                                                <td>
                                                                                    <MudText Typo="Typo.subtitle2" Color="@(item.CraftingPrice < item.BuyPrice ? Color.Default : Color.Secondary)">
                                                                                        <span><span class="mud-text-secondary">@@</span> @State.Currency.ToPriceString(component.Component.BuyNowPrice) each</span>
                                                                                    </MudText>
                                                                                </td>
                                                                            </tr>
                                                                        }
                                                                    </tbody>
                                                                </MudSimpleTable>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td class="align-top pa-4">
                                                        <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center" Color="@(item.CraftingPrice < item.BuyPrice ? Color.Default : Color.Secondary)">
                                                            <span>@State.Currency.ToPriceString(item.CraftingPrice)</span>
                                                        </MudText>
                                                    </td>
                                                    <td class="align-top pa-4">
                                                        <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center" Color="@(item.CraftingPrice >= item.BuyPrice ? Color.Default : Color.Secondary)">
                                                            <img src="@($"/images/app/{State.App.Id}/markets/{item.BuyFrom.ToString().ToLower()}.png")" alt="@item.BuyFrom.GetDisplayName()" title="@item.BuyFrom.GetDisplayName()" class="mr-2" style="width:1.5em; height:1.5em" />
                                                            <span>@State.Currency.ToPriceString(item.BuyPrice)</span>
                                                        </MudText>
                                                    </td>
                                                </tr>
                                            </ItemContent>
                                            <Placeholder>
                                                <tr>
                                                    <td class="align-top">
                                                        <div class="d-flex flex-row justify-start align-center pa-2">
                                                            <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                            <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                                        </div>
                                                    </td>
                                                    <td class="align-top pa-4">-</td>
                                                    <td class="align-top pa-4">-</td>
                                                </tr>
                                            </Placeholder>
                                        </Virtualize>
                                    </tbody>
                                </MudSimpleTable>
                            </AnalyticsPanel>
                        </MudItem>
    
                        <MudItem xs="12" xl="6">
                            <AnalyticsPanel Icon="fas fa-fw fa-shapes" Title="Resources" Subtitle="What is the cheapest way to aquire crafting components?" Dense="true">
                                <MudSimpleTable Dense="true" Hover="true" FixedHeader="true" Class="flex-grow-1 full-height">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>Break It</th>
                                            <th>Buy It</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <Virtualize ItemsProvider="LoadMarketCheapestCraftingResourceCosts" Context="item" SpacerElement="tr">
                                            <ItemContent>
                                                <tr @onclick="@((_) => BuyItem(item.BuyUrl))" class="clickable">
                                                    <td class="align-top">
                                                        <div class="d-flex flex-row justify-start align-start pa-2">
                                                            <img src="@item.IconUrl" class="mr-2" style="width:3em; height:3em;" />
                                                            <div>
                                                                <MudText Typo="Typo.body2" Color="MudBlazor.Color.Default"><strong>@item.Name</strong></MudText>
                                                                <MudText Typo="Typo.subtitle2" Color="MudBlazor.Color.Secondary">
                                                                    @if (item.CheapestItem.BuyNowPrice >= item.BuyPrice)
                                                                    {
                                                                        <span>Cheapest to buy directly from @item.BuyFrom.GetDisplayName().</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span>Cheapest if you buy <strong>@item.CheapestItem.Name</strong> and break it down using the @State.App.Name in-game workshop.</span>
                                                                    }
                                                                </MudText>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td class="align-top pa-4">
                                                        <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center" Color="@(item.CheapestItem.BuyNowPrice < item.BuyPrice ? Color.Default : Color.Secondary)">
                                                            <img src="@item.CheapestItem.IconUrl" class="mr-2" style="width:1.5em; height:1.5em;" />
                                                            <span>@State.Currency.ToPriceString(item.CheapestItem.BuyNowPrice)</span>
                                                        </MudText>
                                                    </td>
                                                    <td class="align-top pa-4">
                                                        <MudText Typo="Typo.body2" Class="no-wrap d-flex align-center" Color="@(item.CheapestItem.BuyNowPrice >= item.BuyPrice ? Color.Default : Color.Secondary)">
                                                            <img src="@($"/images/app/{State.App.Id}/markets/{item.BuyFrom.ToString().ToLower()}.png")" alt="@item.BuyFrom.GetDisplayName()" title="@item.BuyFrom.GetDisplayName()" class="mr-2" style="width:1.5em; height:1.5em" />
                                                            <span>@State.Currency.ToPriceString(item.BuyPrice)</span>
                                                        </MudText>
                                                    </td>
                                                </tr>
                                            </ItemContent>
                                            <Placeholder>
                                                <tr>
                                                    <td>
                                                        <div class="d-flex flex-row justify-start align-center pa-2">
                                                            <MudProgressCircular Indeterminate="true" Class="mr-1" Style="width:32px; height:32px;" />
                                                            <MudText Typo="Typo.body2" Color="Color.Secondary">Loading...</MudText>
                                                        </div>
                                                    </td>
                                                    <td class="align-top pa-4">-</td>
                                                    <td class="align-top pa-4">-</td>
                                                </tr>
                                            </Placeholder>
                                        </Virtualize>
                                    </tbody>
                                </MudSimpleTable>
                            </AnalyticsPanel>
                        </MudItem>
    
                    </MudGrid>
                </MudTabPanel>
            }

		</ChildContent>
    </MudTabs>

</PageContainer>

@code {

    [Parameter]
    public string Tab { get; set; }

    private int TabIndex;

    private readonly IDictionary<int, string> TabKeys = new Dictionary<int, string>
    {
        { 0, "cheapest-offers" },
        { 1, "profitable-flips" },
        { 2, "crafting" }
    };

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; }

    [Parameter]
    public MarketType? MarketType { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool? SellNow { get; set; }

    private Virtualize<MarketItemListingAnalyticDTO> VirtualiseMarketCheapestListings;

    private Virtualize<MarketItemFlipAnalyticDTO> VirtualiseMarketFlips;

    private SystemStatusDTO SystemStatus { get; set; }

    protected override void OnParametersSet()
    {
        SellNow = (SellNow != null ? SellNow : true);
        if (!String.IsNullOrEmpty(Tab))
        {
            TabIndex = TabKeys.FirstOrDefault(x => String.Equals(x.Value, Tab, StringComparison.OrdinalIgnoreCase)).Key;
        }
    }

    protected override async Task OnLoadStateAsync()
    {
        TabIndex = RestoreFromStateOrDefault(nameof(TabIndex), TabIndex);
        SystemStatus = await RestoreFromStateOrLoad(nameof(SystemStatus), async () =>
        {
            try
            {
                return await SystemService.GetSystemStatusAsync(State.AppId, includeAppMarkets: true, includeWebProxiesStatus: true);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error loading system status");
                Snackbar.Add($"Unable to loading system status. {ex.Message}", MudBlazor.Severity.Error);
                throw;
            }
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(TabIndex), TabIndex);
        PersistToState(nameof(SystemStatus), SystemStatus);
        return Task.CompletedTask;
    }

    private void OnSelectedTabChanged(int index)
    {
        TabIndex = index;
        if (!State.IsPrerendering)
        {
            var tabId = TabKeys.FirstOrDefault(x => x.Key == index).Value;
            if (!String.IsNullOrEmpty(tabId) && !String.Equals(Tab, tabId, StringComparison.OrdinalIgnoreCase))
            {
                NavigationManager.NavigateTo($"/market/deals/{Uri.EscapeDataString(tabId)}");
            }
        }
    }

    private void OnSellNowChanged(bool? sellNow)
    {
        SellNow = sellNow;
        _ = VirtualiseMarketFlips.RefreshDataAsync().ContinueWith(x => {
            InvokeAsync(StateHasChanged);
        });
    }

    private void ViewMarketItem(ulong appId, string name)
    {
        ExternalNavigationManager.NavigateToNewTabAsync(new SteamMarketListingPageRequest()
        {
            AppId = appId.ToString(),
            MarketHashName = name
        }.ToString());
    }

    private void ViewItem(ItemDescriptionDTO item)
    {
        ExternalNavigationManager.NavigateToItemAsync(item);
    }

    private void BuyItem(string buyUrl)
    {
        ExternalNavigationManager.NavigateToNewTabAsync(buyUrl);
    }

    private void ShowItemDetailsDialog(string itemName, string itemAssetDescriptionId)
    {
        Dialogs.Show<ViewItemDetailsDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = itemName,
            ["ItemUrl"] = $"/api/item/{itemAssetDescriptionId}",
        });
    }

    protected async ValueTask<ItemsProviderResult<MarketItemFlipAnalyticDTO>> LoadMarketFlips(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<MarketItemFlipAnalyticDTO>>($"api/stats/market/flips?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&market={MarketType}&sellNow={SellNow}&start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<MarketItemFlipAnalyticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'flips' analytics");
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<MarketItemListingAnalyticDTO>> LoadMarketCheapestListings(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<MarketItemListingAnalyticDTO>>($"api/stats/market/cheapestListings?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&market={MarketType}&start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<MarketItemListingAnalyticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'cheapest listings' analytics");
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<MarketCraftingItemCostAnalyticDTO>> LoadMarketCheapestCraftingResourceCosts(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<MarketCraftingItemCostAnalyticDTO>>($"api/stats/market/cheapestCraftingResourceCosts?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<MarketCraftingItemCostAnalyticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'cheapest crafting resource costs' analytics");
            throw;
        }
    }

    protected async ValueTask<ItemsProviderResult<MarketCraftableItemCostAnalyticDTO>> LoadMarketCheapestCraftableContainerCosts(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<MarketCraftableItemCostAnalyticDTO>>($"api/stats/market/cheapestCraftableContainerCosts?start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<MarketCraftableItemCostAnalyticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'cheapest craftable container costs' analytics");
            throw;
        }
    }

    protected TimeSpan? GetTimeSinceLastMarketPriceUpdate(MarketType marketType)
    {
        var lastUpdate = SystemStatus?.SteamApp?.Markets?.FirstOrDefault(x => x.Type == marketType)?.LastUpdatedItemsOn;
        return lastUpdate != null
            ? (DateTimeOffset.Now - lastUpdate.Value).Duration()
            : null;
    }
}
