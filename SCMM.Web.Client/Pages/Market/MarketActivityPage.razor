@using SCMM.Steam.Data.Models.Community.Requests.Html
@using SCMM.Web.Data.Models.UI.Item
@using SCMM.Web.Data.Models.UI.Statistic
@using SCMM.Web.Client.Shared.Dialogs.Items
@page "/market/activity"
@inject ILogger<MarketActivityPage> Logger
@inject IDialogService Dialogs
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="@($"{State?.App?.Name} Market Activity")">
    
    <MudAlert Icon="fa fa-fw fa-exclamation-triangle" Severity="Severity.Warning" Variant="MudBlazor.Variant.Text" Class="mud-alert-outlined-warning mb-5">
        <strong>This is NOT a full or complete list of all Steam community market activity!</strong><br/>
        <span>Only a small subset of all Steam community market activity is shown here. Steam APIs don't show all actions performed on the market and have aggressive caching and rate limiting which restricts how much information can be detected by SCMM (or any other user/website for that matter). Some highly active items that have hundreds of sales per day may only show a handful of sales here, this is a limitation of the Steam APIs. SCMM attempts to track as much market activity as is possible to do so within the limitations of the current Steam APIs.</span>
    </MudAlert>

    <MudGrid Spacing="2">

        <MudItem xs="2">
            <MudSelect T="SteamMarketItemActivityType?" Value="FilterType" ValueChanged="@OnFilterType" Label="Activity Type" Placeholder="Filter by activity type..." Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" 
                       FullWidth="true" Class="mud-input-transparent ma-0" Clearable="true" Disabled="State.IsPrerendering">
                <MudSelectItem T="SteamMarketItemActivityType?" Value="@null">Any</MudSelectItem>
                @foreach (var value in Enum.GetValues<SteamMarketItemActivityType>())
                {
                    <MudSelectItem Value="@((SteamMarketItemActivityType?)value)">@value.GetDisplayName()</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="5">
            <MudTextField T="string" Value="@FilterUser" ValueChanged="@OnFilterUser" DebounceInterval="500" Label="User" Placeholder="Filter by user name..." Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" 
                          FullWidth="true" Class="mud-input-transparent ma-0" Disabled="State.IsPrerendering" />
        </MudItem>
        <MudItem xs="5">
            <MudAutocomplete T="ItemDescriptionDTO" ValueChanged="@OnFilterItem" SearchFunc="@SearchItem" ToStringFunc="@(x => x == null ? null : x.Name)" Label="Item" Placeholder="Filter by item..."  Margin="MudBlazor.Margin.None" Variant="Variant.Outlined"  
                             FullWidth="true" Class="mud-input-transparent ma-0" Clearable="true" Disabled="State.IsPrerendering">
                <ItemTemplate Context="item">
                    <div class="d-flex flex-row justify-start align-center">
                        <img src="@item.IconUrl" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{item.ItemType.RustItemTypeToShortName()}.png'")" class="mr-1" style="width:32px; height:32px;" />
                        <MudText Style="@($"color: {item.ForegroundColour}")">@item.Name</MudText>
                    </div>
                </ItemTemplate>
            </MudAutocomplete>
        </MudItem>
        
        <MudItem xs="12" Class="pa-0">
            <Virtualize @ref="MarketActivityTable" ItemsProvider="LoadMarketActivity" Context="item" OverscanCount="30">
                <EmptyContent>
                    <div class="d-flex flex-column justify-center align-center full-height pa-4">
                        <TumbleWeed Light="true" />
                        <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">Nothing found, try broadening your search more</MudText>
                    </div>
                </EmptyContent>
                <ItemContent>
                    <div class="@($"{(item.IsSale ? "mud-theme-dark" : null)} hover-darken pa-1")">
                        <div class="d-flex flex-row flex-wrap justify-start align-center">
                            @if (!String.IsNullOrEmpty(item.BuyerName))
                            {
                                <img src="@item.BuyerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.BuyerName</MudText>
                            }
                            else if (!String.IsNullOrEmpty(item.SellerName))
                            {
                                <img src="@item.SellerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.SellerName</MudText>
                            }
                            <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap">@GetActivityDescription(item)</MudText>
                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.Quantity.ToQuantityString()x</MudText>
                            <img src="@item.IconUrl" onerror="@($"this.onerror=null; this.src='/images/app/{State.AppId}/items/{item.ItemType.RustItemTypeToShortName()}.png'")" class="mx-1 clickable" style="width:32px; height:32px;" @onclick="@(() => ViewItem(item))" />
                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap clickable" Style="@($"color: {item.ForegroundColour}")" @onclick="@(() => ShowItemDetailsDialog(item))">@item.Name</MudText>
                            <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap">for</MudText>
                            <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@State.Currency.ToPriceString(item.Price)</MudText>
                            @if (!String.IsNullOrEmpty(item.BuyerName) && !String.IsNullOrEmpty(item.SellerName))
                            {
                                <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary" Class="mx-1 no-wrap"> from a listing by </MudText>
                                <img src="@item.SellerAvatarUrl" class="mx-1" style="width:32px; height:32px;" />
                                <MudText Typo="Typo.body2" Class="mx-1 no-wrap">@item.SellerName</MudText>
                            }
                            <MudText Typo="Typo.caption" Color="MudBlazor.Color.Secondary" Class="flex-grow-1 text-right mx-1 no-wrap">@((DateTimeOffset.Now - item.Timestamp).ToDurationString(prefix: "about", maxGranularity: 3, suffix: "ago"))</MudText>
                        </div>
                    </div>
                    <MudDivider />
                </ItemContent>
                <Placeholder>
                    <div class="hover-darken pa-1">
                        <div class="d-flex flex-row justify-start align-center">
                            <MudProgressCircular Indeterminate="true" Class="mx-1" Style="width:32px; height:32px;" />
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mx-1">Loading...</MudText>
                        </div>
                    </div>
                    <MudDivider />
                </Placeholder>
            </Virtualize>
        </MudItem>

    </MudGrid>

</PageContainer>

@code {

    private SteamMarketItemActivityType? FilterType { get; set; }

    private string FilterUser { get; set; }

    private ItemDescriptionDTO FilterItem { get; set; }

    private Virtualize<ItemActivityStatisticDTO> MarketActivityTable { get; set; }

    private async Task<IEnumerable<ItemDescriptionDTO>> SearchItem(string value)
    {
        try
        {
            var search = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemDescriptionDTO>>(
                $"api/item?filter={Uri.EscapeDataString(value ?? String.Empty)}&count=30"
            );

            return search.Items;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing items");
            return null;
        }
    }
    
    private void ShowItemDetailsDialog(ItemDescriptionDTO item)
    {
        Dialogs.Show<ViewItemDetailsDialog>(null, parameters: new DialogParameters()
        {
            ["ItemName"] = item.Name,
            ["ItemUrl"] = $"/api/item/{item.Id}"
        });
    }

    private void ViewItem(ItemDescriptionDTO item)
    {
        ExternalNavigationManager.NavigateToItemAsync(item);
    }
    
    private async void OnFilterType(SteamMarketItemActivityType? type)
    {
        if (FilterType != type)
        {
            FilterType = type;
            await MarketActivityTable.RefreshDataAsync();
            StateHasChanged();
        };
    }
    
    private async void OnFilterUser(string user)
    {
        if (FilterUser != user)
        {
            FilterUser = user;
            await MarketActivityTable.RefreshDataAsync();
            StateHasChanged();
        };
    }
    
    private async void OnFilterItem(ItemDescriptionDTO item)
    {
        if (FilterItem != item)
        {
            FilterItem = item;
            await MarketActivityTable.RefreshDataAsync();
            StateHasChanged();
        };
    }
    
    protected async ValueTask<ItemsProviderResult<ItemActivityStatisticDTO>> LoadMarketActivity(ItemsProviderRequest request)
    {
        try
        {
            var response = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemActivityStatisticDTO>>($"api/stats/market/activity?type={FilterType?.ToString() ?? String.Empty}&user={Uri.EscapeDataString(FilterUser ?? String.Empty)}&item={Uri.EscapeDataString(FilterItem?.Name ?? String.Empty)}&start={request.StartIndex}&count={request.Count}");
            return new ItemsProviderResult<ItemActivityStatisticDTO>(response.Items, response.Total);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing 'activity' market statistics");
            throw;
        }
    }
    
    private string GetActivityDescription(ItemActivityStatisticDTO activity)
    {
        if (activity.IsSale)
        {
            return "purchased";
        }
        switch (activity.Type)
        {
            case SteamMarketItemActivityType.CreatedSellOrder: return $"created a listing of";
            case SteamMarketItemActivityType.CancelledSellOrder: return $"cancelled their listing of";
            case SteamMarketItemActivityType.CreatedBuyOrder: return $"created a buy order of";
            case SteamMarketItemActivityType.CancelledBuyOrder: return $"cancelled their buy order of";
            default: return "did something";
        }
    }

}