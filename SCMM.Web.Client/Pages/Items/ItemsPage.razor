@using SCMM.Web.Client.Shared.Components.Items
@using SCMM.Web.Data.Models.UI.Item
@page "/items"
@page "/skins"
@inherits PersistentComponent
@inject ILogger<ItemsPage> Logger
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ExternalNavigationManager ExternalNavigationManager
@inject HttpClient Http
@inject AppState State

<PageContainer Title="@($"{State?.App?.Name} Skins")">

    <MudGrid Spacing="2">
        <MudItem xs="12" sm="6" md="4" lg="4" xl="4">
            <MudTextField T="string" Value="@Filter" ValueChanged="@OnSearch" DebounceInterval="500" Label="Search" Placeholder="Search for an item..." 
                          Variant="MudBlazor.Variant.Outlined" Margin="MudBlazor.Margin.None" FullWidth="true" Class="mud-input-transparent ma-0" Disabled="State.IsPrerendering" />
        </MudItem>
        @if (Filters != null && FilterValues != null)
        {
            foreach (var filter in Filters.Where(x => x.IsEnabled))
            {
                switch(filter.Type)
                {
                    case "ItemType":
                    {
                        <MudItem xs="12" sm="6" md="@((int)Math.Ceiling(filter.Size * 1.5))" lg="@((int)Math.Ceiling(filter.Size * 1.5))" xl="@filter.Size">
                            <ItemTypeField Label="@filter.Name" Value="@Type" ValueChanged="@((x) => { Type = x; _ = RefreshItems(); })" Variant="MudBlazor.Variant.Outlined" Margin="MudBlazor.Margin.None" FullWidth="true" Class="mud-input-transparent ma-0" />
                        </MudItem>
                        break;
                    }

                    case "Select":
                    {
                        <MudItem xs="12" sm="6" md="@((int)Math.Ceiling(filter.Size * 1.5))" lg="@((int)Math.Ceiling(filter.Size * 1.5))" xl="@filter.Size">
                            <MudSelect T="string" Value="@FilterValues[filter.SteamId]" ValueChanged="@((x) => { FilterValues[filter.SteamId] = x; _ = RefreshItems(); })" Label="@filter.Name" Clearable="false" Disabled="State.IsPrerendering"
                                           Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Adornment="MudBlazor.Adornment.Start" AdornmentIcon="@($"fas fa-fw {filter.Icon ?? "fa-filter"} mr-1")" Class="mud-input-transparent ma-0">
                                <MudSelectItem T="string" Value="@String.Empty">Any</MudSelectItem>
                                @foreach (var option in filter.Options)
                                {
                                    <MudSelectItem Value="@option.Value">@option.Value</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        break;
                    }
                }
            }
        }
        <MudItem xs="12" sm="6" md="3" lg="3" xl="2">
            <MudSelect T="Tuple<string, Data.Models.SortDirection>" Value="@Sort" ValueChanged="SetSortOrder" Label="Sorting" Clearable="false" Disabled="State.IsPrerendering"
                       Margin="MudBlazor.Margin.None" Variant="MudBlazor.Variant.Outlined" FullWidth="true" Adornment="MudBlazor.Adornment.Start" AdornmentIcon="fas fa-fw fa-sort-alpha-down mr-1" Class="mud-input-transparent ma-0">
                @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.Age))
                {
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("TimeAccepted", Data.Models.SortDirection.Descending))">Newest</MudSelectItem>
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("TimeAccepted", Data.Models.SortDirection.Ascending))">Oldest</MudSelectItem>
                }
                <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("MarketItem.SellOrderLowestPrice", Data.Models.SortDirection.Ascending))">Lowest Price</MudSelectItem>
                <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("MarketItem.SellOrderLowestPrice", Data.Models.SortDirection.Descending))">Highest Price</MudSelectItem>
                <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("PriceMovement", Data.Models.SortDirection.Descending))">Highest Profit</MudSelectItem>
                <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("PriceMovement", Data.Models.SortDirection.Ascending))">Highest Loss</MudSelectItem>
                @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.Supply))
                {
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("MarketItem.SellOrderCount", Data.Models.SortDirection.Ascending))">Lowest Sell Orders (Supply)</MudSelectItem>
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("MarketItem.SellOrderCount", Data.Models.SortDirection.Descending))">Highest Sell Orders (Supply)</MudSelectItem>
                }
                @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.Demand))
                {
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("MarketItem.Last24hrSales", Data.Models.SortDirection.Ascending))">Lowest 24hr Sales (Demand)</MudSelectItem>
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("MarketItem.Last24hrSales", Data.Models.SortDirection.Descending))">Highest 24hr Sales (Demand)</MudSelectItem>
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("MarketItem.BuyOrderCount", Data.Models.SortDirection.Ascending))">Lowest Buy Orders</MudSelectItem>
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("MarketItem.BuyOrderCount", Data.Models.SortDirection.Descending))">Highest Buy Orders</MudSelectItem>
                }
                @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.Subscriptions))
                {
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("SubscriptionsCurrent", Data.Models.SortDirection.Ascending))">Lowest Subscribers</MudSelectItem>
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("SubscriptionsCurrent", Data.Models.SortDirection.Descending))">Highest Subscribers</MudSelectItem>
                }
                @if (State.Profile.ItemInfo.Any(x => x == ItemInfoType.EstimatedTotalSupply))
                {
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("SupplyTotalEstimated", Data.Models.SortDirection.Ascending))">Lowest Estimated Total Supply</MudSelectItem>
                    <MudSelectItem Value="@(new Tuple<string, Data.Models.SortDirection>("SupplyTotalEstimated", Data.Models.SortDirection.Descending))">Highest Estimated Total Supply</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
                <MudExpansionPanels Dense="true" DisableGutters="true">
                    <MudExpansionPanel Disabled="State.IsPrerendering">
                        <TitleContent>
                            <MudText Typo="MudBlazor.Typo.subtitle1" Color="MudBlazor.Color.Default" Class="text-centered my-n3">
                                <i class="fa fa-fw fa-toggle-off mr-1" />
                                <span>Toggle Item Features</span>
                            </MudText>
                        </TitleContent>
                        <ChildContent>
                            <div Class="d-flex flex-row align-center justify-center flex-wrap pa-2 px-4">
                                @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureGlowing))
                                {
                                    <MudSwitch T="bool" Checked="@Glow" CheckedChanged="@((x) => { Glow = x; _ = RefreshItems(); })" Label="Glow" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                    <MudSwitch T="bool" Checked="@Glowsight" CheckedChanged="@((x) => { Glowsight = x; _ = RefreshItems(); })" Label="Glowsight" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                }
                                @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureCutout))
                                {
                                    <MudSwitch T="bool" Checked="@Cutout" CheckedChanged="@((x) => { Cutout = x; _ = RefreshItems(); })" Label="Cutout" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                }
                                @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureCrafting))
                                {
                                    <MudSwitch T="bool" Checked="@Craftable" CheckedChanged="@((x) => { Craftable = x; _ = RefreshItems(); })" Label="Craftable" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                }
                                @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeaturePublisherDrops))
                                {
                                    <MudSwitch T="bool" Checked="@PublisherDrop" CheckedChanged="@((x) => { PublisherDrop = x; _ = RefreshItems(); })" Label="@($"{State.App?.PublisherName ?? "Publisher"} Drop")" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                }
                                @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureTwitchDrops))
                                {
                                    <MudSwitch T="bool" Checked="@TwitchDrop" CheckedChanged="@((x) => { TwitchDrop = x; _ = RefreshItems(); })" Label="Twitch Drop" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                }
                                @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureLootCrates))
                                {
                                    <MudSwitch T="bool" Checked="@LootCrateDrop" CheckedChanged="@((x) => { LootCrateDrop = x; _ = RefreshItems(); })" Label="Loot Crate Drop" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                }
                                <MudSwitch T="bool" Checked="@Tradable" CheckedChanged="@((x) => { Tradable = x; _ = RefreshItems(); })" Label="Tradable" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                <MudSwitch T="bool" Checked="@Marketable" CheckedChanged="@((x) => { Marketable = x; _ = RefreshItems(); })" Label="Marketable" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemStoreRotating))
                                {
                                    <MudSwitch T="bool" Checked="@Returning" CheckedChanged="@((x) => { Returning = x; _ = RefreshItems(); })" Label="Returning" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                }
                                <MudSwitch T="bool" Checked="@Banned" CheckedChanged="@((x) => { Banned = x; _ = RefreshItems(); })" Label="Banned" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                                <MudSwitch T="bool" Checked="@Manipulated" CheckedChanged="@((x) => { Manipulated = x; _ = RefreshItems(); })" Label="Manipulated" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                            </div>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
                <MudPaper Outlined="true" Class="d-flex flex-row align-center justify-center flex-wrap pa-2 px-4">
                    @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureGlowing))
                    {
                        <MudSwitch T="bool" Checked="@Glow" CheckedChanged="@((x) => { Glow = x; _ = RefreshItems(); })" Label="Glow" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                        <MudSwitch T="bool" Checked="@Glowsight" CheckedChanged="@((x) => { Glowsight = x; _ = RefreshItems(); })" Label="Glowsight" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    }
                    @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureCutout))
                    {
                        <MudSwitch T="bool" Checked="@Cutout" CheckedChanged="@((x) => { Cutout = x; _ = RefreshItems(); })" Label="Cutout" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    }
                    @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureCrafting))
                    {
                        <MudSwitch T="bool" Checked="@Craftable" CheckedChanged="@((x) => { Craftable = x; _ = RefreshItems(); })" Label="Craftable" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    }
                    @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeaturePublisherDrops))
                    {
                        <MudSwitch T="bool" Checked="@PublisherDrop" CheckedChanged="@((x) => { PublisherDrop = x; _ = RefreshItems(); })" Label="@($"{State.App?.PublisherName ?? "Publisher"} Drop")" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    }
                    @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureTwitchDrops))
                    {
                        <MudSwitch T="bool" Checked="@TwitchDrop" CheckedChanged="@((x) => { TwitchDrop = x; _ = RefreshItems(); })" Label="Twitch Drop" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    }
                    @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemFeatureLootCrates))
                    {
                        <MudSwitch T="bool" Checked="@LootCrateDrop" CheckedChanged="@((x) => { LootCrateDrop = x; _ = RefreshItems(); })" Label="Loot Crate Drop" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    }
                    <MudSwitch T="bool" Checked="@Commodity" CheckedChanged="@((x) => { Commodity = x; _ = RefreshItems(); })" Label="Commodity " Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    <MudSwitch T="bool" Checked="@Tradable" CheckedChanged="@((x) => { Tradable = x; _ = RefreshItems(); })" Label="Tradable" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    <MudSwitch T="bool" Checked="@Marketable" CheckedChanged="@((x) => { Marketable = x; _ = RefreshItems(); })" Label="Marketable" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    @if (State.App.Features.HasFlag(SteamAppFeatureTypes.ItemStoreRotating))
                    {
                        <MudSwitch T="bool" Checked="@Returning" CheckedChanged="@((x) => { Returning = x; _ = RefreshItems(); })" Label="Returning" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    }
                    <MudSwitch T="bool" Checked="@Banned" CheckedChanged="@((x) => { Banned = x; _ = RefreshItems(); })" Label="Banned" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                    <MudSwitch T="bool" Checked="@Manipulated" CheckedChanged="@((x) => { Manipulated = x; _ = RefreshItems(); })" Label="Manipulated" Color="Color.Primary" Class="mr-10" Disabled="State.IsPrerendering" />
                </MudPaper>
            </MudHidden>
        </MudItem>
        @if (Items == null)
        {
            <MudItem xs="12">
                <Loading Message="Finding items..." />
            </MudItem>
        }
        else if (Items.Items.Any())
        {
            @foreach (var item in Items.Items)
            {
                <MudItem xs="6" sm="4" md="3" lg="2" xxl="1">
                    <MudPaper Outlined="true" Class="full-height">
                        <ItemDescriptionSummary Item="@item" OnClick="@OnItemClicked" />
                    </MudPaper>
                </MudItem>
            }
            @if(Items.Total > 0)
            {
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudPagination SelectedChanged="@OnPageChange" Color="@Color.Primary" ShowFirstButton="true" ShowLastButton="true" 
                                   Selected="@((int)Math.Floor(Start > 0 ? ((double)Start.Value / Math.Max(Count ?? 100, 1)) + 1 : 1))" 
                                   Count="@((int)Math.Ceiling((double)Items.Total / Math.Max(Count ?? 100, 1)))" Disabled="State.IsPrerendering" />
                </MudItem>
            }
        }
        else
        {
            <MudItem xs="12" Class="d-flex justify-center">
                <div class="d-flex flex-column justify-center align-center full-height pa-4">
                    <TumbleWeed Light="true" />
                    <MudText Typo="MudBlazor.Typo.body1" Color="MudBlazor.Color.Secondary">Nothing found, try searching for something else</MudText>
                </div>
            </MudItem>
        }
    </MudGrid>

</PageContainer>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Type { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string BreaksIntoComponent { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Glow { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Glowsight { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Cutout { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Craftable { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool PublisherDrop { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool TwitchDrop { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool LootCrateDrop { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Commodity { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Tradable { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Marketable { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Returning { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Banned { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool Manipulated { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Nullable<int> Start { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Nullable<int> Count { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string SortBy { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string SortDirection { get; set; }

    private Tuple<string, Data.Models.SortDirection> Sort;

    private IEnumerable<ItemFilterDTO> Filters;

    private IDictionary<string, string> FilterValues;

    private PaginatedResult<ItemDescriptionWithPriceDTO> Items;

    protected override void OnInitialized()
    {
        if (String.IsNullOrEmpty(SortBy))
        {
            SortBy = nameof(ItemDescriptionWithPriceDTO.TimeAccepted);
        }
        if (String.IsNullOrEmpty(SortDirection))
        {
            SortDirection = Data.Models.SortDirection.Descending.ToString();
        }
    }

    protected override void OnParametersSet()
    {
        if (!String.IsNullOrEmpty(SortBy) && !String.IsNullOrEmpty(SortDirection))
        {
            Sort = new Tuple<string, Data.Models.SortDirection>(SortBy, Enum.Parse<Data.Models.SortDirection>(SortDirection, true));
        }
    }

    protected override async Task OnLoadStateAsync()
    {
        Filters = await RestoreFromStateOrLoad(nameof(Filters), async () =>
        {
            var filters = await Http.GetFromJsonWithDefaultsAsync<IEnumerable<ItemFilterDTO>>($"api/item/filters");
            FilterValues = (filters ?? Enumerable.Empty<ItemFilterDTO>()).ToDictionary(x => x.SteamId, x => String.Empty);
            return filters;
        });
        FilterValues = await RestoreFromStateOrLoad(nameof(FilterValues), () => Task.FromResult(FilterValues ?? new Dictionary<string, string>()));
        Items = await RestoreFromStateOrLoad(nameof(Items), async () =>
        {
            await RefreshItems();
            return Items;
        });
    }

    protected override Task OnPersistStateAsync()
    {
        PersistToState(nameof(Filters), Filters);
        PersistToState(nameof(FilterValues), FilterValues);
        PersistToState(nameof(Items), Items);
        return Task.CompletedTask;
    }

    private void OnItemClicked(IItemDescription item)
    {
        if (item.Id > 0)
        {
            ExternalNavigationManager.NavigateToNewTabAsync($"/item/{item.Id}");
        }
        else
        {
            ExternalNavigationManager.NavigateToNewTabAsync($"/item/{item.Name}");
        }
    }

    private void OnSearch(string text)
    {
        if (Filter != text)
        {
            Start = 0;
            Filter = text;
            _ = RefreshItems();
        };
    }

    private void SetSortOrder(Tuple<string, Data.Models.SortDirection> sort)
    {
        Start = 0;
        Sort = sort;
        SortBy = sort.Item1;
        SortDirection = sort.Item2.ToString();
        StateHasChanged();
        
        _ = RefreshItems();
    }
    
    private void OnPageChange(int page)
    {
        var newStart = (Math.Max(page - 1, 0) * Math.Max(Count ?? 100, 1));
        if (Start != newStart)
        {
            Start = newStart;
            _ = RefreshItems();
        }
    }

    private async Task RefreshItems()
    {
        try
        {
            Items = null;
            StateHasChanged();

            var itemFilters = String.Join("&", FilterValues
                .Where(x => !String.IsNullOrEmpty(x.Key) && !String.IsNullOrEmpty(x.Value))
                .Select(x => $"filter.{x.Key}={x.Value}")
            );

            Items = await Http.GetFromJsonWithDefaultsAsync<PaginatedResult<ItemDescriptionWithPriceDTO>>(
                $"api/item?filter={Uri.EscapeDataString(Filter ?? String.Empty)}&exactMatch=false&start={Start ?? 0}&count={Math.Max(Count ?? 100, 1)}" +
                $"&sortBy={Uri.EscapeDataString(SortBy ?? String.Empty)}&sortDirection={Uri.EscapeDataString(SortDirection ?? String.Empty)}&type={Uri.EscapeDataString(Type ?? String.Empty)}&breaksIntoComponent={Uri.EscapeDataString(BreaksIntoComponent ?? String.Empty)}" +
                $"&glow={(Glow ? true : (bool?)null)}&glowsight={(Glowsight ? true : (bool?)null)}&cutout={(Cutout ? true : (bool?)null)}&craftable={(Craftable ? true : (bool?)null)}" +
                $"&publisherDrop={(PublisherDrop ? true : (bool?)null)}&twitchDrop={(TwitchDrop ? true : (bool?)null)}&lootCrateDrop={(LootCrateDrop ? true : (bool?)null)}&commodity={(Commodity ? true : (bool?)null)}&tradable={(Tradable ? true : (bool?)null)}" +
                $"&marketable={(Marketable ? true : (bool?)null)}&returning={(Returning ? true : (bool?)null)}&banned={(Banned ? true : (bool?)null)}&manipulated={(Manipulated ? true : (bool?)null)}&{itemFilters}"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error listing items");
            Snackbar.Add($"Unable to load list. {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

}
