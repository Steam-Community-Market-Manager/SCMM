# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy solution to Azure

env:
  DOTNET_VERSION: '7.0.x'

on:
  push:
    branches: [ "main", "feature/github-actions-update" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build solution with dotnet
        run: dotnet build --configuration Release

      - name: Publish Steam.Functions app service with dotnet
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/pub/app-service/SCMM.Steam.Functions
        working-directory: ./SCMM.Steam.Functions

      - name: Publish Discord.Bot.Server app service with dotnet
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/pub/app-service/SCMM.Discord.Bot.Server
        working-directory: ./SCMM.Discord.Bot.Server

      - name: Publish Web.Server app service with dotnet
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/pub/app-service/SCMM.Web.Server
        working-directory: ./SCMM.Web.Server

      - name: Upload artifacts for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: app-services
          path: ${{env.DOTNET_ROOT}}/pub/app-service

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: none
    environment:
      name: 'Production'
    steps:

      - name: Download artifacts from build job
        uses: actions/download-artifact@v3
        with:
          name: app-services

      - name: Deploy Discord.Bot.Server app service to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: scmm-discord-bot
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_SCMM_DISCORD_BOT }}
          package: app-services/SCMM.Discord.Bot.Server
